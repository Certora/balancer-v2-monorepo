diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/contracts/MerkleOrchard.sol distributors/contracts/MerkleOrchard.sol
--- distributors/contracts/MerkleOrchard.sol	2022-06-22 10:15:28.000000000 -0700
+++ distributors/contracts/MerkleOrchard.sol	2022-09-20 00:31:32.000000000 -0700
@@ -14,13 +14,13 @@
 
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../../interfaces/contracts/vault/IVault.sol";
+import "../../../interfaces/contracts/vault/IAsset.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../../solidity-utils/contracts/openzeppelin/MerkleProof.sol";
+import "../../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 pragma solidity ^0.7.0;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/contracts/MerkleRedeem.sol distributors/contracts/MerkleRedeem.sol
--- distributors/contracts/MerkleRedeem.sol	2022-06-22 10:15:28.000000000 -0700
+++ distributors/contracts/MerkleRedeem.sol	2022-09-20 00:31:32.000000000 -0700
@@ -14,15 +14,15 @@
 
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../../interfaces/contracts/vault/IVault.sol";
+import "../../../interfaces/contracts/vault/IAsset.sol";
+
+import "../../../solidity-utils/contracts/openzeppelin/MerkleProof.sol";
+import "../../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../../solidity-utils/contracts/openzeppelin/Ownable.sol";
+import "../../../solidity-utils/contracts/math/FixedPoint.sol";
 
 pragma solidity ^0.7.0;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/contracts/test/MockRewardCallback.sol distributors/contracts/test/MockRewardCallback.sol
--- distributors/contracts/test/MockRewardCallback.sol	2022-06-22 10:15:28.000000000 -0700
+++ distributors/contracts/test/MockRewardCallback.sol	2022-09-20 00:31:32.000000000 -0700
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../interfaces/contracts/distributors/IDistributorCallback.sol";
 
 contract MockRewardCallback is IDistributorCallback {
     event CallbackReceived();
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IArbitrumFeeProvider.sol interfaces/contracts/liquidity-mining/IArbitrumFeeProvider.sol
--- interfaces/contracts/liquidity-mining/IArbitrumFeeProvider.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IArbitrumFeeProvider.sol	2022-09-20 00:31:32.000000000 -0700
@@ -17,7 +17,7 @@
 interface IArbitrumFeeProvider {
     function getArbitrumFees()
         external
-        view
+       
         returns (
             uint256 gasLimit,
             uint256 gasPrice,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol
--- interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol	2022-09-20 00:31:32.000000000 -0700
@@ -21,12 +21,12 @@
     /**
      * @notice Returns the Balancer Vault
      */
-    function getVault() external view returns (IVault);
+    function getVault() external returns (IVault);
 
     /**
      * @notice Returns the Authorizer
      */
-    function getAuthorizer() external view returns (IAuthorizer);
+    function getAuthorizer() external returns (IAuthorizer);
 
     /**
      * @notice Performs an arbitrary function call on a target contract, provided the caller is authorized to do so.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IBalancerMinter.sol interfaces/contracts/liquidity-mining/IBalancerMinter.sol
--- interfaces/contracts/liquidity-mining/IBalancerMinter.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IBalancerMinter.sol	2022-09-20 00:31:32.000000000 -0700
@@ -23,17 +23,17 @@
     /**
      * @notice Returns the address of the Balancer Governance Token
      */
-    function getBalancerToken() external view returns (IERC20);
+    function getBalancerToken() external returns (IERC20);
 
     /**
      * @notice Returns the address of the Balancer Token Admin contract
      */
-    function getBalancerTokenAdmin() external view returns (IBalancerTokenAdmin);
+    function getBalancerTokenAdmin() external returns (IBalancerTokenAdmin);
 
     /**
      * @notice Returns the address of the Gauge Controller
      */
-    function getGaugeController() external view returns (IGaugeController);
+    function getGaugeController() external returns (IGaugeController);
 
     /**
      * @notice Mint everything which belongs to `msg.sender` and send to them
@@ -66,12 +66,12 @@
     /**
      * @notice The total number of tokens minted for `user` from `gauge`
      */
-    function minted(address user, address gauge) external view returns (uint256);
+    function minted(address user, address gauge) external returns (uint256);
 
     /**
      * @notice Whether `minter` is approved to mint tokens for `user`
      */
-    function getMinterApproval(address minter, address user) external view returns (bool);
+    function getMinterApproval(address minter, address user) external returns (bool);
 
     /**
      * @notice Set whether `minter` is approved to mint tokens on your behalf
@@ -99,7 +99,7 @@
     /**
      * @notice Whether `minter` is approved to mint tokens for `user`
      */
-    function allowed_to_mint_for(address minter, address user) external view returns (bool);
+    function allowed_to_mint_for(address minter, address user) external returns (bool);
 
     /**
      * @notice Mint everything which belongs to `msg.sender` across multiple gauges
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IBalancerToken.sol interfaces/contracts/liquidity-mining/IBalancerToken.sol
--- interfaces/contracts/liquidity-mining/IBalancerToken.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IBalancerToken.sol	2022-09-20 00:31:32.000000000 -0700
@@ -19,26 +19,26 @@
 interface IBalancerToken is IERC20 {
     function mint(address to, uint256 amount) external;
 
-    function getRoleMemberCount(bytes32 role) external view returns (uint256);
+    function getRoleMemberCount(bytes32 role) external returns (uint256);
 
-    function getRoleMember(bytes32 role, uint256 index) external view returns (address);
+    function getRoleMember(bytes32 role, uint256 index) external returns (address);
 
-    function hasRole(bytes32 role, address account) external view returns (bool);
+    function hasRole(bytes32 role, address account) external returns (bool);
 
-    function getRoleAdmin(bytes32 role) external view returns (bytes32);
+    function getRoleAdmin(bytes32 role) external returns (bytes32);
 
     function grantRole(bytes32 role, address account) external;
 
     function revokeRole(bytes32 role, address account) external;
 
     // solhint-disable-next-line func-name-mixedcase
-    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
+    function DEFAULT_ADMIN_ROLE() external returns (bytes32);
 
     // solhint-disable-next-line func-name-mixedcase
-    function MINTER_ROLE() external view returns (bytes32);
+    function MINTER_ROLE() external returns (bytes32);
 
     // solhint-disable-next-line func-name-mixedcase
-    function SNAPSHOT_ROLE() external view returns (bytes32);
+    function SNAPSHOT_ROLE() external returns (bytes32);
 
     function snapshot() external;
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol
--- interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol	2022-09-20 00:31:32.000000000 -0700
@@ -20,24 +20,24 @@
 
 interface IBalancerTokenAdmin is IAuthentication {
     // solhint-disable func-name-mixedcase
-    function INITIAL_RATE() external view returns (uint256);
+    function INITIAL_RATE() external returns (uint256);
 
-    function RATE_REDUCTION_TIME() external view returns (uint256);
+    function RATE_REDUCTION_TIME() external returns (uint256);
 
-    function RATE_REDUCTION_COEFFICIENT() external view returns (uint256);
+    function RATE_REDUCTION_COEFFICIENT() external returns (uint256);
 
-    function RATE_DENOMINATOR() external view returns (uint256);
+    function RATE_DENOMINATOR() external returns (uint256);
 
     // solhint-enable func-name-mixedcase
 
     /**
      * @notice Returns the address of the Balancer Governance Token
      */
-    function getBalancerToken() external view returns (IBalancerToken);
+    function getBalancerToken() external returns (IBalancerToken);
 
     function activate() external;
 
-    function rate() external view returns (uint256);
+    function rate() external returns (uint256);
 
     function startEpochTimeWrite() external returns (uint256);
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol
--- interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol	2022-09-20 00:31:32.000000000 -0700
@@ -26,35 +26,35 @@
     /**
      * @notice Returns the address of the implementation used for gauge deployments.
      */
-    function getGaugeImplementation() external view returns (ILiquidityGauge);
+    function getGaugeImplementation() external returns (ILiquidityGauge);
 
     /**
      * @notice Returns the address of the implementation used for streamer deployments.
      */
-    function getChildChainStreamerImplementation() external view returns (IChildChainStreamer);
+    function getChildChainStreamerImplementation() external returns (IChildChainStreamer);
 
     /**
      * @notice Returns the address of the gauge belonging to `pool`.
      */
-    function getPoolGauge(address pool) external view returns (ILiquidityGauge);
+    function getPoolGauge(address pool) external returns (ILiquidityGauge);
 
     /**
      * @notice Returns the address of the streamer belonging to `gauge`.
      */
-    function getGaugeStreamer(address gauge) external view returns (address);
+    function getGaugeStreamer(address gauge) external returns (address);
 
     /**
      * @notice Returns true if `streamer` was created by this factory.
      */
-    function isStreamerFromFactory(address streamer) external view returns (bool);
+    function isStreamerFromFactory(address streamer) external returns (bool);
 
     /**
      * @notice Returns the address of the pool which `gauge` belongs.
      */
-    function getGaugePool(address gauge) external view returns (IERC20);
+    function getGaugePool(address gauge) external returns (IERC20);
 
     /**
      * @notice Returns the address of the streamer belonging to `pool`'s gauge.
      */
-    function getPoolStreamer(address pool) external view returns (address);
+    function getPoolStreamer(address pool) external returns (address);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IChildChainStreamer.sol interfaces/contracts/liquidity-mining/IChildChainStreamer.sol
--- interfaces/contracts/liquidity-mining/IChildChainStreamer.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IChildChainStreamer.sol	2022-09-20 00:31:32.000000000 -0700
@@ -25,7 +25,7 @@
 
     function get_reward() external;
 
-    function reward_tokens(uint256 index) external view returns (IERC20);
+    function reward_tokens(uint256 index) external returns (IERC20);
 
     function add_reward(
         IERC20 rewardToken,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IFeeDistributor.sol interfaces/contracts/liquidity-mining/IFeeDistributor.sol
--- interfaces/contracts/liquidity-mining/IFeeDistributor.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IFeeDistributor.sol	2022-09-20 00:31:32.000000000 -0700
@@ -33,31 +33,31 @@
     /**
      * @notice Returns the VotingEscrow (veBAL) token contract
      */
-    function getVotingEscrow() external view returns (IVotingEscrow);
+    function getVotingEscrow() external returns (IVotingEscrow);
 
     /**
      * @notice Returns the global time cursor representing the most earliest uncheckpointed week.
      */
-    function getTimeCursor() external view returns (uint256);
+    function getTimeCursor() external returns (uint256);
 
     /**
      * @notice Returns the user-level time cursor representing the most earliest uncheckpointed week.
      * @param user - The address of the user to query.
      */
-    function getUserTimeCursor(address user) external view returns (uint256);
+    function getUserTimeCursor(address user) external returns (uint256);
 
     /**
      * @notice Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed.
      * @param token - The ERC20 token address to query.
      */
-    function getTokenTimeCursor(IERC20 token) external view returns (uint256);
+    function getTokenTimeCursor(IERC20 token) external returns (uint256);
 
     /**
      * @notice Returns the user-level time cursor storing the timestamp of the latest token distribution claimed.
      * @param user - The address of the user to query.
      * @param token - The ERC20 token address to query.
      */
-    function getUserTokenTimeCursor(address user, IERC20 token) external view returns (uint256);
+    function getUserTokenTimeCursor(address user, IERC20 token) external returns (uint256);
 
     /**
      * @notice Returns the user's cached balance of veBAL as of the provided timestamp.
@@ -66,7 +66,7 @@
      * @param user - The address of the user of which to read the cached balance of.
      * @param timestamp - The timestamp at which to read the `user`'s cached balance at.
      */
-    function getUserBalanceAtTimestamp(address user, uint256 timestamp) external view returns (uint256);
+    function getUserBalanceAtTimestamp(address user, uint256 timestamp) external returns (uint256);
 
     /**
      * @notice Returns the cached total supply of veBAL as of the provided timestamp.
@@ -74,19 +74,19 @@
      * This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.
      * @param timestamp - The timestamp at which to read the cached total supply at.
      */
-    function getTotalSupplyAtTimestamp(uint256 timestamp) external view returns (uint256);
+    function getTotalSupplyAtTimestamp(uint256 timestamp) external returns (uint256);
 
     /**
      * @notice Returns the FeeDistributor's cached balance of `token`.
      */
-    function getTokenLastBalance(IERC20 token) external view returns (uint256);
+    function getTokenLastBalance(IERC20 token) external returns (uint256);
 
     /**
      * @notice Returns the amount of `token` which the FeeDistributor received in the week beginning at `timestamp`.
      * @param token - The ERC20 token address to query.
      * @param timestamp - The timestamp corresponding to the beginning of the week of interest.
      */
-    function getTokensDistributedInWeek(IERC20 token, uint256 timestamp) external view returns (uint256);
+    function getTokensDistributedInWeek(IERC20 token, uint256 timestamp) external returns (uint256);
 
     // Depositing
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IGaugeAdder.sol interfaces/contracts/liquidity-mining/IGaugeAdder.sol
--- interfaces/contracts/liquidity-mining/IGaugeAdder.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IGaugeAdder.sol	2022-09-20 00:31:32.000000000 -0700
@@ -28,7 +28,7 @@
     /**
      * @notice Returns the address of the Gauge Controller
      */
-    function getGaugeController() external view returns (IGaugeController);
+    function getGaugeController() external returns (IGaugeController);
 
     /**
      * @notice Returns the gauge corresponding to a Balancer pool `pool` on Ethereum mainnet.
@@ -37,22 +37,22 @@
      * This function provides global information by using which gauge has been added to the Gauge Controller
      * to represent the canonical gauge for a given pool address.
      */
-    function getPoolGauge(IERC20 pool) external view returns (ILiquidityGauge);
+    function getPoolGauge(IERC20 pool) external returns (ILiquidityGauge);
 
     /**
      * @notice Returns the `index`'th factory for gauge type `gaugeType`
      */
-    function getFactoryForGaugeType(GaugeType gaugeType, uint256 index) external view returns (address);
+    function getFactoryForGaugeType(GaugeType gaugeType, uint256 index) external returns (address);
 
     /**
      * @notice Returns the number of factories for gauge type `gaugeType`
      */
-    function getFactoryForGaugeTypeCount(GaugeType gaugeType) external view returns (uint256);
+    function getFactoryForGaugeTypeCount(GaugeType gaugeType) external returns (uint256);
 
     /**
      * @notice Returns whether `gauge` has been deployed by one of the listed factories for the gauge type `gaugeType`
      */
-    function isGaugeFromValidFactory(address gauge, GaugeType gaugeType) external view returns (bool);
+    function isGaugeFromValidFactory(address gauge, GaugeType gaugeType) external returns (bool);
 
     /**
      * @notice Adds a new gauge to the GaugeController for the "Ethereum" type.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IGaugeController.sol interfaces/contracts/liquidity-mining/IGaugeController.sol
--- interfaces/contracts/liquidity-mining/IGaugeController.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IGaugeController.sol	2022-09-20 00:31:32.000000000 -0700
@@ -26,11 +26,11 @@
 interface IGaugeController {
     function checkpoint_gauge(address gauge) external;
 
-    function gauge_relative_weight(address gauge, uint256 time) external view returns (uint256);
+    function gauge_relative_weight(address gauge, uint256 time) external returns (uint256);
 
-    function voting_escrow() external view returns (IVotingEscrow);
+    function voting_escrow() external returns (IVotingEscrow);
 
-    function token() external view returns (IERC20);
+    function token() external returns (IERC20);
 
     function add_type(string calldata name, uint256 weight) external;
 
@@ -38,9 +38,9 @@
 
     function add_gauge(address gauge, int128 gaugeType) external;
 
-    function n_gauge_types() external view returns (int128);
+    function n_gauge_types() external returns (int128);
 
-    function gauge_types(address gauge) external view returns (int128);
+    function gauge_types(address gauge) external returns (int128);
 
-    function admin() external view returns (IAuthorizerAdaptor);
+    function admin() external returns (IAuthorizerAdaptor);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/ILiquidityGauge.sol interfaces/contracts/liquidity-mining/ILiquidityGauge.sol
--- interfaces/contracts/liquidity-mining/ILiquidityGauge.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/liquidity-mining/ILiquidityGauge.sol	2022-09-20 00:31:32.000000000 -0700
@@ -28,7 +28,7 @@
      * @param user User address.
      * @return uint256 BAL amount to issue for the address.
      */
-    function integrate_fraction(address user) external view returns (uint256);
+    function integrate_fraction(address user) external returns (uint256);
 
     /**
      * @notice Record a checkpoint for a given user.
@@ -40,7 +40,7 @@
     /**
      * @notice Returns true if gauge is killed; false otherwise.
      */
-    function is_killed() external view returns (bool);
+    function is_killed() external returns (bool);
 
     /**
      * @notice Kills the gauge so it cannot mint BAL.
@@ -62,11 +62,11 @@
     /**
      * @notice Gets the relative weight cap for the gauge.
      */
-    function getRelativeWeightCap() external view returns (uint256);
+    function getRelativeWeightCap() external returns (uint256);
 
     /**
      * @notice Returns the gauge's relative weight for a given time, capped to its relative weight cap attribute.
      * @param time Timestamp in the past or present.
      */
-    function getCappedRelativeWeight(uint256 time) external view returns (uint256);
+    function getCappedRelativeWeight(uint256 time) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol
--- interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol	2022-09-20 00:31:32.000000000 -0700
@@ -21,5 +21,5 @@
     /**
      * @notice Returns true if `gauge` was created by this factory.
      */
-    function isGaugeFromFactory(address gauge) external view returns (bool);
+    function isGaugeFromFactory(address gauge) external returns (bool);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IOptimismGasLimitProvider.sol interfaces/contracts/liquidity-mining/IOptimismGasLimitProvider.sol
--- interfaces/contracts/liquidity-mining/IOptimismGasLimitProvider.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IOptimismGasLimitProvider.sol	2022-09-20 00:31:32.000000000 -0700
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 
 interface IOptimismGasLimitProvider {
-    function getOptimismGasLimit() external view returns (uint32 gasLimit);
+    function getOptimismGasLimit() external returns (uint32 gasLimit);
 
     function setOptimismGasLimit(uint32 gasLimit) external;
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol
--- interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol	2022-09-20 00:31:32.000000000 -0700
@@ -31,9 +31,9 @@
         uint256 integral;
     }
 
-    function reward_tokens(uint256 index) external view returns (IERC20);
+    function reward_tokens(uint256 index) external returns (IERC20);
 
-    function reward_data(IERC20 token) external view returns (Reward memory);
+    function reward_data(IERC20 token) external returns (Reward memory);
 
     function claim_rewards(address user) external;
 
@@ -43,7 +43,7 @@
 
     function deposit_reward_token(IERC20 rewardToken, uint256 amount) external;
 
-    function claimable_reward(address rewardToken, address user) external view returns (uint256);
+    function claimable_reward(address rewardToken, address user) external returns (uint256);
 
     function claimable_reward_write(address rewardToken, address user) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol
--- interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol	2022-09-20 00:31:32.000000000 -0700
@@ -29,9 +29,9 @@
     ) external;
 
     // solhint-disable-next-line func-name-mixedcase
-    function lp_token() external view returns (IERC20);
+    function lp_token() external returns (IERC20);
 
-    function reward_contract() external view returns (IChildChainStreamer);
+    function reward_contract() external returns (IChildChainStreamer);
 
     function set_rewards(
         address childChainStreamer,
@@ -39,5 +39,5 @@
         address[8] calldata rewardTokens
     ) external;
 
-    function last_claim() external view returns (uint256);
+    function last_claim() external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol
--- interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol	2022-09-20 00:31:32.000000000 -0700
@@ -15,5 +15,5 @@
 pragma solidity ^0.7.0;
 
 interface ISmartWalletChecker {
-    function check(address contractAddress) external view returns (bool);
+    function check(address contractAddress) external returns (bool);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IStakelessGauge.sol interfaces/contracts/liquidity-mining/IStakelessGauge.sol
--- interfaces/contracts/liquidity-mining/IStakelessGauge.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IStakelessGauge.sol	2022-09-20 00:31:32.000000000 -0700
@@ -19,5 +19,5 @@
 interface IStakelessGauge is ILiquidityGauge {
     function checkpoint() external payable returns (bool);
 
-    function getRecipient() external view returns (address);
+    function getRecipient() external returns (address);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol
--- interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol	2022-09-20 00:31:32.000000000 -0700
@@ -27,7 +27,7 @@
 interface IStakingLiquidityGauge is IRewardTokenDistributor, ILiquidityGauge, IERC20 {
     function initialize(address lpToken, uint256 relativeWeightCap) external;
 
-    function lp_token() external view returns (IERC20);
+    function lp_token() external returns (IERC20);
 
     function deposit(uint256 value, address recipient) external;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IVeDelegation.sol interfaces/contracts/liquidity-mining/IVeDelegation.sol
--- interfaces/contracts/liquidity-mining/IVeDelegation.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IVeDelegation.sol	2022-09-20 00:31:32.000000000 -0700
@@ -20,5 +20,5 @@
 
 interface IVeDelegation {
     // solhint-disable-next-line func-name-mixedcase
-    function adjusted_balance_of(address user) external view returns (uint256);
+    function adjusted_balance_of(address user) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IVotingEscrow.sol interfaces/contracts/liquidity-mining/IVotingEscrow.sol
--- interfaces/contracts/liquidity-mining/IVotingEscrow.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/liquidity-mining/IVotingEscrow.sol	2022-09-20 00:31:32.000000000 -0700
@@ -29,21 +29,21 @@
         uint256 blk; // block
     }
 
-    function epoch() external view returns (uint256);
+    function epoch() external returns (uint256);
 
-    function totalSupply(uint256 timestamp) external view returns (uint256);
+    function totalSupply(uint256 timestamp) external returns (uint256);
 
-    function user_point_epoch(address user) external view returns (uint256);
+    function user_point_epoch(address user) external returns (uint256);
 
-    function point_history(uint256 timestamp) external view returns (Point memory);
+    function point_history(uint256 timestamp) external returns (Point memory);
 
-    function user_point_history(address user, uint256 timestamp) external view returns (Point memory);
+    function user_point_history(address user, uint256 timestamp) external returns (Point memory);
 
     function checkpoint() external;
 
-    function admin() external view returns (IAuthorizerAdaptor);
+    function admin() external returns (IAuthorizerAdaptor);
 
-    function smart_wallet_checker() external view returns (address);
+    function smart_wallet_checker() external returns (address);
 
     function commit_smart_wallet_checker(address newSmartWalletChecker) external;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-linear/IAToken.sol interfaces/contracts/pool-linear/IAToken.sol
--- interfaces/contracts/pool-linear/IAToken.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/pool-linear/IAToken.sol	2022-09-20 00:31:32.000000000 -0700
@@ -19,5 +19,5 @@
      * @dev returns the address of the aToken's underlying asset
      */
     // solhint-disable-next-line func-name-mixedcase
-    function UNDERLYING_ASSET_ADDRESS() external view returns (address);
+    function UNDERLYING_ASSET_ADDRESS() external returns (address);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-linear/IButtonWrapper.sol interfaces/contracts/pool-linear/IButtonWrapper.sol
--- interfaces/contracts/pool-linear/IButtonWrapper.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/pool-linear/IButtonWrapper.sol	2022-09-20 00:31:32.000000000 -0700
@@ -98,23 +98,23 @@
     function withdrawAllTo(address to) external returns (uint256);
 
     //--------------------------------------------------------------------------
-    // ButtonWrapper view methods
+    // ButtonWrappermethods
 
     /// @return The address of the underlying token.
-    function underlying() external view returns (address);
+    function underlying() external returns (address);
 
     /// @return The total underlying tokens held by the wrapper contract.
-    function totalUnderlying() external view returns (uint256);
+    function totalUnderlying() external returns (uint256);
 
     /// @param who The account address.
     /// @return The underlying token balance of the account.
-    function balanceOfUnderlying(address who) external view returns (uint256);
+    function balanceOfUnderlying(address who) external returns (uint256);
 
     /// @param uAmount The amount of underlying tokens.
     /// @return The amount of wrapper tokens exchangeable.
-    function underlyingToWrapper(uint256 uAmount) external view returns (uint256);
+    function underlyingToWrapper(uint256 uAmount) external returns (uint256);
 
     /// @param amount The amount of wrapper tokens.
     /// @return The amount of underlying tokens exchangeable.
-    function wrapperToUnderlying(uint256 amount) external view returns (uint256);
+    function wrapperToUnderlying(uint256 amount) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-linear/ILendingPool.sol interfaces/contracts/pool-linear/ILendingPool.sol
--- interfaces/contracts/pool-linear/ILendingPool.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/pool-linear/ILendingPool.sol	2022-09-20 00:31:32.000000000 -0700
@@ -18,5 +18,5 @@
     /**
      * @dev returns a 27 decimal fixed point 'ray' value so a rate of 1 is represented as 1e27
      */
-    function getReserveNormalizedIncome(address asset) external view returns (uint256);
+    function getReserveNormalizedIncome(address asset) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-linear/ILinearPool.sol interfaces/contracts/pool-linear/ILinearPool.sol
--- interfaces/contracts/pool-linear/ILinearPool.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/pool-linear/ILinearPool.sol	2022-09-20 00:31:32.000000000 -0700
@@ -22,32 +22,32 @@
     /**
      * @dev Returns the Pool's main token.
      */
-    function getMainToken() external view returns (IERC20);
+    function getMainToken() external returns (IERC20);
 
     /**
      * @dev Returns the Pool's wrapped token.
      */
-    function getWrappedToken() external view returns (IERC20);
+    function getWrappedToken() external returns (IERC20);
 
     /**
      * @dev Returns the index of the Pool's BPT in the Pool tokens array (as returned by IVault.getPoolTokens).
      */
-    function getBptIndex() external view returns (uint256);
+    function getBptIndex() external returns (uint256);
 
     /**
      * @dev Returns the index of the Pool's main token in the Pool tokens array (as returned by IVault.getPoolTokens).
      */
-    function getMainIndex() external view returns (uint256);
+    function getMainIndex() external returns (uint256);
 
     /**
      * @dev Returns the index of the Pool's wrapped token in the Pool tokens array (as returned by
      * IVault.getPoolTokens).
      */
-    function getWrappedIndex() external view returns (uint256);
+    function getWrappedIndex() external returns (uint256);
 
     /**
      * @dev Returns the Pool's targets for the main token balance. These values have had the main token's scaling
      * factor applied to them.
      */
-    function getTargets() external view returns (uint256 lowerTarget, uint256 upperTarget);
+    function getTargets() external returns (uint256 lowerTarget, uint256 upperTarget);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-linear/IStaticAToken.sol interfaces/contracts/pool-linear/IStaticAToken.sol
--- interfaces/contracts/pool-linear/IStaticAToken.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/pool-linear/IStaticAToken.sol	2022-09-20 00:31:32.000000000 -0700
@@ -21,18 +21,18 @@
      * @dev returns the address of the staticAToken's underlying asset
      */
     // solhint-disable-next-line func-name-mixedcase
-    function ASSET() external view returns (address);
+    function ASSET() external returns (address);
 
     /**
      * @dev returns the address of the staticAToken's lending pool
      */
     // solhint-disable-next-line func-name-mixedcase
-    function LENDING_POOL() external view returns (ILendingPool);
+    function LENDING_POOL() external returns (ILendingPool);
 
     /**
      * @dev returns a 27 decimal fixed point 'ray' value so a rate of 1 is represented as 1e27
      */
-    function rate() external view returns (uint256);
+    function rate() external returns (uint256);
 
     function deposit(
         address,
@@ -47,5 +47,5 @@
         bool
     ) external returns (uint256, uint256);
 
-    function staticToDynamicAmount(uint256 amount) external view returns (uint256);
+    function staticToDynamicAmount(uint256 amount) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-utils/IAssetManager.sol interfaces/contracts/pool-utils/IAssetManager.sol
--- interfaces/contracts/pool-utils/IAssetManager.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/pool-utils/IAssetManager.sol	2022-09-20 00:31:32.000000000 -0700
@@ -36,24 +36,24 @@
     /**
      * @notice Returns the asset manager's token
      */
-    function getToken() external view returns (IERC20);
+    function getToken() external returns (IERC20);
 
     /**
      * @return the current assets under management of this asset manager
      */
-    function getAUM(bytes32 poolId) external view returns (uint256);
+    function getAUM(bytes32 poolId) external returns (uint256);
 
     /**
      * @return poolCash - The up-to-date cash balance of the pool
      * @return poolManaged - The up-to-date managed balance of the pool
      */
-    function getPoolBalances(bytes32 poolId) external view returns (uint256 poolCash, uint256 poolManaged);
+    function getPoolBalances(bytes32 poolId) external returns (uint256 poolCash, uint256 poolManaged);
 
     /**
      * @return The difference in tokens between the target investment
      * and the currently invested amount (i.e. the amount that can be invested)
      */
-    function maxInvestableBalance(bytes32 poolId) external view returns (int256);
+    function maxInvestableBalance(bytes32 poolId) external returns (int256);
 
     /**
      * @notice Updates the Vault on the value of the pool's investment returns
@@ -63,7 +63,7 @@
     /**
      * @notice Determines whether the pool should rebalance given the provided balances
      */
-    function shouldRebalance(uint256 cash, uint256 managed) external view returns (bool);
+    function shouldRebalance(uint256 cash, uint256 managed) external returns (bool);
 
     /**
      * @notice Rebalances funds between the pool and the asset manager to maintain target investment percentage.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-utils/IBasePoolFactory.sol interfaces/contracts/pool-utils/IBasePoolFactory.sol
--- interfaces/contracts/pool-utils/IBasePoolFactory.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/pool-utils/IBasePoolFactory.sol	2022-09-20 00:31:32.000000000 -0700
@@ -21,12 +21,12 @@
     /**
      * @dev Returns true if `pool` was created by this factory.
      */
-    function isPoolFromFactory(address pool) external view returns (bool);
+    function isPoolFromFactory(address pool) external returns (bool);
 
     /**
      * @dev Check whether the derived factory has been disabled.
      */
-    function isDisabled() external view returns (bool);
+    function isDisabled() external returns (bool);
 
     /**
      * @dev Disable the factory, preventing the creation of more pools. Already existing pools are unaffected.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol
--- interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol	2022-09-20 00:31:32.000000000 -0700
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "./IBasePoolFactory.sol";
+import "./IBasePoolSplitCodeFactory.sol";
 
-interface ILastCreatedPoolFactory is IBasePoolFactory {
+interface ILastCreatedPoolFactory is IBasePoolSplitCodeFactory {
     /**
      * @dev Returns the address of the last Pool created by this factory.
      *
      * This is typically only useful in complex Pool deployment schemes, where multiple subsystems need to know about
      * each other. Note that this value will only be updated once construction of the last created Pool finishes.
      */
-    function getLastCreatedPool() external view returns (address);
+    function getLastCreatedPool() external returns (address);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-utils/IRateProvider.sol interfaces/contracts/pool-utils/IRateProvider.sol
--- interfaces/contracts/pool-utils/IRateProvider.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/pool-utils/IRateProvider.sol	2022-09-20 00:31:32.000000000 -0700
@@ -19,5 +19,5 @@
      * @dev Returns an 18 decimal fixed point number that is the exchange rate of the token to some other underlying
      * token. The meaning of this rate depends on the context.
      */
-    function getRate() external view returns (uint256);
+    function getRate() external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-utils/IRecoveryMode.sol interfaces/contracts/pool-utils/IRecoveryMode.sol
--- interfaces/contracts/pool-utils/IRecoveryMode.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/pool-utils/IRecoveryMode.sol	2022-09-20 00:31:32.000000000 -0700
@@ -37,5 +37,5 @@
     /**
      * @notice Returns true if the Pool is in Recovery Mode.
      */
-    function inRecoveryMode() external view returns (bool);
+    function inRecoveryMode() external returns (bool);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/helpers/IAuthentication.sol interfaces/contracts/solidity-utils/helpers/IAuthentication.sol
--- interfaces/contracts/solidity-utils/helpers/IAuthentication.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/solidity-utils/helpers/IAuthentication.sol	2022-09-20 00:31:32.000000000 -0700
@@ -18,5 +18,5 @@
     /**
      * @dev Returns the action identifier associated with the external function described by `selector`.
      */
-    function getActionId(bytes4 selector) external view returns (bytes32);
+    function getActionId(bytes4 selector) external returns (bytes32);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol
--- interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol	2022-09-20 00:31:32.000000000 -0700
@@ -39,5 +39,5 @@
     /**
      * @dev Returns true if caller verification is enabled for the given user, false otherwise.
      */
-    function isOnlyCallerEnabled(address user) external view returns (bool);
+    function isOnlyCallerEnabled(address user) external returns (bool);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol
--- interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol	2022-09-20 00:31:32.000000000 -0700
@@ -21,10 +21,10 @@
     /**
      * @dev Returns the EIP712 domain separator.
      */
-    function getDomainSeparator() external view returns (bytes32);
+    function getDomainSeparator() external returns (bytes32);
 
     /**
      * @dev Returns the next nonce used by an address to sign messages.
      */
-    function getNextNonce(address user) external view returns (uint256);
+    function getNextNonce(address user) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol
--- interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol	2022-09-20 00:31:32.000000000 -0700
@@ -28,7 +28,6 @@
      */
     function getPausedState()
         external
-        view
         returns (
             bool paused,
             uint256 pauseWindowEndTime,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/misc/IERC4626.sol interfaces/contracts/solidity-utils/misc/IERC4626.sol
--- interfaces/contracts/solidity-utils/misc/IERC4626.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/solidity-utils/misc/IERC4626.sol	2022-09-20 00:31:32.000000000 -0700
@@ -51,22 +51,22 @@
     /**
      * @dev The address of the underlying token that the Vault uses for accounting, depositing, and withdrawing.
      */
-    function asset() external view returns (address);
+    function asset() external returns (address);
 
     /**
      * @dev Total amount of the underlying asset that is “managed” by Vault.
      */
-    function totalAssets() external view returns (uint256);
+    function totalAssets() external returns (uint256);
 
     /**
      * @dev The amount of `assets` that the Vault would exchange for the amount
      *      of `shares` provided, in an ideal scenario where all the conditions are met.
      */
-    function convertToAssets(uint256 shares) external view returns (uint256 assets);
+    function convertToAssets(uint256 shares) external returns (uint256 assets);
 
     /**
      * @dev The amount of `shares` that the Vault would exchange for the amount
      *      of `assets` provided, in an ideal scenario where all the conditions are met.
      */
-    function convertToShares(uint256 assets) external view returns (uint256 shares);
+    function convertToShares(uint256 assets) external returns (uint256 shares);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol
--- interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol	2022-09-20 00:31:32.000000000 -0700
@@ -15,5 +15,5 @@
      * @param hash      Hash of the data to be signed
      * @param signature Signature byte array associated with _data
      */
-    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);
+    function isValidSignature(bytes32 hash, bytes memory signature) external returns (bytes4 magicValue);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol
--- interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol	2022-09-20 00:31:32.000000000 -0700
@@ -9,12 +9,12 @@
     /**
      * @dev Returns the amount of tokens in existence.
      */
-    function totalSupply() external view returns (uint256);
+    function totalSupply() external returns (uint256);
 
     /**
      * @dev Returns the amount of tokens owned by `account`.
      */
-    function balanceOf(address account) external view returns (uint256);
+    function balanceOf(address account) external returns (uint256);
 
     /**
      * @dev Moves `amount` tokens from the caller's account to `recipient`.
@@ -32,7 +32,7 @@
      *
      * This value changes when {approve} or {transferFrom} are called.
      */
-    function allowance(address owner, address spender) external view returns (uint256);
+    function allowance(address owner, address spender) external returns (uint256);
 
     /**
      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol
--- interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol	2022-09-20 00:31:32.000000000 -0700
@@ -49,11 +49,11 @@
      * Every successful call to {permit} increases ``owner``'s nonce by one. This
      * prevents a signature from being used multiple times.
      */
-    function nonces(address owner) external view returns (uint256);
+    function nonces(address owner) external returns (uint256);
 
     /**
      * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.
      */
     // solhint-disable-next-line func-name-mixedcase
-    function DOMAIN_SEPARATOR() external view returns (bytes32);
+    function DOMAIN_SEPARATOR() external returns (bytes32);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IBALTokenHolder.sol interfaces/contracts/standalone-utils/IBALTokenHolder.sol
--- interfaces/contracts/standalone-utils/IBALTokenHolder.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/standalone-utils/IBALTokenHolder.sol	2022-09-20 00:31:32.000000000 -0700
@@ -18,7 +18,7 @@
 import "../solidity-utils/openzeppelin/IERC20.sol";
 
 interface IBALTokenHolder is IAuthentication {
-    function getName() external view returns (string memory);
+    function getName() external returns (string memory);
 
     function withdrawFunds(address recipient, uint256 amount) external;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol
--- interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol	2022-09-20 00:31:32.000000000 -0700
@@ -20,11 +20,11 @@
 import "./IBALTokenHolder.sol";
 
 interface IBALTokenHolderFactory {
-    function getBalancerToken() external view returns (IBalancerToken);
+    function getBalancerToken() external returns (IBalancerToken);
 
-    function getVault() external view returns (IVault);
+    function getVault() external returns (IVault);
 
-    function isHolderFromFactory(address holder) external view returns (bool);
+    function isHolderFromFactory(address holder) external returns (bool);
 
     function create(string memory name) external returns (IBALTokenHolder);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IBalancerRelayer.sol interfaces/contracts/standalone-utils/IBalancerRelayer.sol
--- interfaces/contracts/standalone-utils/IBalancerRelayer.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/standalone-utils/IBalancerRelayer.sol	2022-09-20 00:31:32.000000000 -0700
@@ -22,9 +22,9 @@
  * @notice Allows safe multicall execution of a relayer's functions
  */
 interface IBalancerRelayer {
-    function getLibrary() external view returns (address);
+    function getLibrary() external returns (address);
 
-    function getVault() external view returns (IVault);
+    function getVault() external returns (IVault);
 
     function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol
--- interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol	2022-09-20 00:31:32.000000000 -0700
@@ -51,12 +51,12 @@
     /**
      * @dev Returns true if `feeType` has been registered and can be queried.
      */
-    function isValidFeeType(uint256 feeType) external view returns (bool);
+    function isValidFeeType(uint256 feeType) external returns (bool);
 
     /**
      * @dev Returns true if `value` is a valid percentage value for `feeType`.
      */
-    function isValidFeeTypePercentage(uint256 feeType, uint256 value) external view returns (bool);
+    function isValidFeeTypePercentage(uint256 feeType, uint256 value) external returns (bool);
 
     /**
      * @dev Sets the percentage value for `feeType` to `newValue`.
@@ -73,17 +73,17 @@
      * @dev Returns the current percentage value for `feeType`. This is the preferred mechanism for querying these -
      * whenever possible, use this fucntion instead of e.g. querying the ProtocolFeesCollector.
      */
-    function getFeeTypePercentage(uint256 feeType) external view returns (uint256);
+    function getFeeTypePercentage(uint256 feeType) external returns (uint256);
 
     /**
      * @dev Returns `feeType`'s maximum value.
      */
-    function getFeeTypeMaximumPercentage(uint256 feeType) external view returns (uint256);
+    function getFeeTypeMaximumPercentage(uint256 feeType) external returns (uint256);
 
     /**
      * @dev Returns `feeType`'s name.
      */
-    function getFeeTypeName(uint256 feeType) external view returns (string memory);
+    function getFeeTypeName(uint256 feeType) external returns (string memory);
 }
 
 library ProtocolFeeType {
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol
--- interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol	2022-09-20 00:31:32.000000000 -0700
@@ -30,28 +30,28 @@
     /**
      * @notice Returns the address of the Protocol Fee Collector.
      */
-    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);
+    function getProtocolFeesCollector() external returns (IProtocolFeesCollector);
 
     /**
      * @notice Returns whether the provided token may be withdrawn from the Protocol Fee Collector
      */
-    function isWithdrawableToken(IERC20 token) external view returns (bool);
+    function isWithdrawableToken(IERC20 token) external returns (bool);
 
     /**
      * @notice Returns whether the provided array of tokens may be withdrawn from the Protocol Fee Collector
      * @dev Returns false if any token is denylisted.
      */
-    function isWithdrawableTokens(IERC20[] calldata tokens) external view returns (bool);
+    function isWithdrawableTokens(IERC20[] calldata tokens) external returns (bool);
 
     /**
      * @notice Returns the denylisted token at the given `index`.
      */
-    function getDenylistedToken(uint256 index) external view returns (IERC20);
+    function getDenylistedToken(uint256 index) external returns (IERC20);
 
     /**
      * @notice Returns the number of denylisted tokens.
      */
-    function getDenylistedTokensLength() external view returns (uint256);
+    function getDenylistedTokensLength() external returns (uint256);
 
     /**
      * @notice Withdraws fees from the Protocol Fee Collector.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IStaticATokenLM.sol interfaces/contracts/standalone-utils/IStaticATokenLM.sol
--- interfaces/contracts/standalone-utils/IStaticATokenLM.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/standalone-utils/IStaticATokenLM.sol	2022-09-20 00:31:32.000000000 -0700
@@ -140,7 +140,7 @@
      * @param account The address of the user
      * @return uint256 The aToken balance
      **/
-    function dynamicBalanceOf(address account) external view returns (uint256);
+    function dynamicBalanceOf(address account) external returns (uint256);
 
     /**
      * @notice Converts a static amount (scaled balance on aToken) to the aToken/underlying value,
@@ -148,7 +148,7 @@
      * @param amount The amount to convert from
      * @return uint256 The dynamic amount
      **/
-    function staticToDynamicAmount(uint256 amount) external view returns (uint256);
+    function staticToDynamicAmount(uint256 amount) external returns (uint256);
 
     /**
      * @notice Converts an aToken or underlying amount to the what it is denominated on the aToken as
@@ -156,20 +156,20 @@
      * @param amount The amount to convert from
      * @return uint256 The static (scaled) amount
      **/
-    function dynamicToStaticAmount(uint256 amount) external view returns (uint256);
+    function dynamicToStaticAmount(uint256 amount) external returns (uint256);
 
     /**
      * @notice Returns the Aave liquidity index of the underlying aToken, denominated rate here
      * as it can be considered as an ever-increasing exchange rate
      * @return The liquidity index
      **/
-    function rate() external view returns (uint256);
+    function rate() external returns (uint256);
 
     /**
      * @notice Function to return a dynamic domain separator, in order to be compatible with forks changing chainId
      * @return bytes32 The domain separator
      **/
-    function getDomainSeparator() external view returns (bytes32);
+    function getDomainSeparator() external returns (bytes32);
 
     /**
      * @notice Claims rewards from `INCENTIVES_CONTROLLER` and updates internal accounting of rewards.
@@ -206,29 +206,29 @@
      * @notice Get the total claimable rewards of the contract.
      * @return The current balance + pending rewards from the `_incentivesController`
      */
-    function getTotalClaimableRewards() external view returns (uint256);
+    function getTotalClaimableRewards() external returns (uint256);
 
     /**
      * @notice Get the total claimable rewards for a user in WAD
      * @param user The address of the user
      * @return The claimable amount of rewards in WAD
      */
-    function getClaimableRewards(address user) external view returns (uint256);
+    function getClaimableRewards(address user) external returns (uint256);
 
     /**
      * @notice The unclaimed rewards for a user in WAD
      * @param user The address of the user
      * @return The unclaimed amount of rewards in WAD
      */
-    function getUnclaimedRewards(address user) external view returns (uint256);
+    function getUnclaimedRewards(address user) external returns (uint256);
 
-    function getAccRewardsPerToken() external view returns (uint256);
+    function getAccRewardsPerToken() external returns (uint256);
 
-    function getLifetimeRewardsClaimed() external view returns (uint256);
+    function getLifetimeRewardsClaimed() external returns (uint256);
 
-    function getLifetimeRewards() external view returns (uint256);
+    function getLifetimeRewards() external returns (uint256);
 
-    function getLastRewardBlock() external view returns (uint256);
+    function getLastRewardBlock() external returns (uint256);
 
     // solhint-disable-next-line func-name-mixedcase
     function LENDING_POOL() external returns (address);
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IwstETH.sol interfaces/contracts/standalone-utils/IwstETH.sol
--- interfaces/contracts/standalone-utils/IwstETH.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/standalone-utils/IwstETH.sol	2022-09-20 00:31:32.000000000 -0700
@@ -69,24 +69,24 @@
      * @param _stETHAmount amount of stETH
      * @return Amount of wstETH for a given stETH amount
      */
-    function getWstETHByStETH(uint256 _stETHAmount) external view returns (uint256);
+    function getWstETHByStETH(uint256 _stETHAmount) external returns (uint256);
 
     /**
      * @notice Get amount of stETH for a given amount of wstETH
      * @param _wstETHAmount amount of wstETH
      * @return Amount of stETH for a given wstETH amount
      */
-    function getStETHByWstETH(uint256 _wstETHAmount) external view returns (uint256);
+    function getStETHByWstETH(uint256 _wstETHAmount) external returns (uint256);
 
     /**
      * @notice Get amount of wstETH for a one stETH
      * @return Amount of stETH for 1 wstETH
      */
-    function stEthPerToken() external view returns (uint256);
+    function stEthPerToken() external returns (uint256);
 
     /**
      * @notice Get amount of stETH for a one wstETH
      * @return Amount of wstETH for a 1 stETH
      */
-    function tokensPerStEth() external view returns (uint256);
+    function tokensPerStEth() external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/vault/IAuthorizer.sol interfaces/contracts/vault/IAuthorizer.sol
--- interfaces/contracts/vault/IAuthorizer.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/vault/IAuthorizer.sol	2022-09-20 00:31:32.000000000 -0700
@@ -22,5 +22,5 @@
         bytes32 actionId,
         address account,
         address where
-    ) external view returns (bool);
+    ) external returns (bool);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/vault/IBasePool.sol interfaces/contracts/vault/IBasePool.sol
--- interfaces/contracts/vault/IBasePool.sol	2022-09-20 00:25:58.000000000 -0700
+++ interfaces/contracts/vault/IBasePool.sol	2022-09-20 00:31:32.000000000 -0700
@@ -90,19 +90,19 @@
     /**
      * @dev Returns this Pool's ID, used when interacting with the Vault (to e.g. join the Pool or swap with it).
      */
-    function getPoolId() external view returns (bytes32);
+    function getPoolId() external returns (bytes32);
 
     /**
      * @dev Returns the current swap fee percentage as a 18 decimal fixed point number, so e.g. 1e17 corresponds to a
      * 10% swap fee.
      */
-    function getSwapFeePercentage() external view returns (uint256);
+    function getSwapFeePercentage() external returns (uint256);
 
     /**
      * @dev Returns the scaling factors of each of the Pool's tokens. This is an implementation detail that is typically
      * not relevant for outside parties, but which might be useful for some types of Pools.
      */
-    function getScalingFactors() external view returns (uint256[] memory);
+    function getScalingFactors() external returns (uint256[] memory);
 
     function queryJoin(
         bytes32 poolId,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/vault/IBasicAuthorizer.sol interfaces/contracts/vault/IBasicAuthorizer.sol
--- interfaces/contracts/vault/IBasicAuthorizer.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/vault/IBasicAuthorizer.sol	2022-09-20 00:31:32.000000000 -0700
@@ -18,9 +18,9 @@
     // solhint-disable-next-line func-name-mixedcase
     function DEFAULT_ADMIN_ROLE() external returns (bytes32);
 
-    function getRoleAdmin(bytes32 role) external view returns (bytes32);
+    function getRoleAdmin(bytes32 role) external returns (bytes32);
 
-    function getRoleMember(bytes32 role, uint256 index) external view returns (address);
+    function getRoleMember(bytes32 role, uint256 index) external returns (address);
 
-    function getRoleMemberCount(bytes32 role) external view returns (uint256);
+    function getRoleMemberCount(bytes32 role) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/vault/IProtocolFeesCollector.sol interfaces/contracts/vault/IProtocolFeesCollector.sol
--- interfaces/contracts/vault/IProtocolFeesCollector.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/vault/IProtocolFeesCollector.sol	2022-09-20 00:31:32.000000000 -0700
@@ -34,13 +34,13 @@
 
     function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;
 
-    function getSwapFeePercentage() external view returns (uint256);
+    function getSwapFeePercentage() external returns (uint256);
 
-    function getFlashLoanFeePercentage() external view returns (uint256);
+    function getFlashLoanFeePercentage() external returns (uint256);
 
-    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);
+    function getCollectedFeeAmounts(IERC20[] memory tokens) external returns (uint256[] memory feeAmounts);
 
-    function getAuthorizer() external view returns (IAuthorizer);
+    function getAuthorizer() external returns (IAuthorizer);
 
-    function vault() external view returns (IVault);
+    function vault() external returns (IVault);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/vault/IVault.sol interfaces/contracts/vault/IVault.sol
--- interfaces/contracts/vault/IVault.sol	2022-06-22 10:15:28.000000000 -0700
+++ interfaces/contracts/vault/IVault.sol	2022-09-20 00:31:32.000000000 -0700
@@ -43,9 +43,9 @@
     // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.
     // while execution control is transferred to a token contract during a swap) will result in a revert. View
     // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.
-    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.
+    // Contracts callingfunctions in the Vault must make sure the Vault has not already been entered.
     //
-    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.
+    // -functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.
 
     // Authorizer
     //
@@ -56,7 +56,7 @@
     /**
      * @dev Returns the Vault's Authorizer.
      */
-    function getAuthorizer() external view returns (IAuthorizer);
+    function getAuthorizer() external returns (IAuthorizer);
 
     /**
      * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.
@@ -87,7 +87,7 @@
     /**
      * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.
      */
-    function hasApprovedRelayer(address user, address relayer) external view returns (bool);
+    function hasApprovedRelayer(address user, address relayer) external returns (bool);
 
     /**
      * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.
@@ -118,7 +118,7 @@
     /**
      * @dev Returns `user`'s Internal Balance for a set of tokens.
      */
-    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);
+    function getInternalBalance(address user, IERC20[] memory tokens) external returns (uint256[] memory);
 
     /**
      * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)
@@ -237,7 +237,7 @@
     /**
      * @dev Returns a Pool's contract address and specialization setting.
      */
-    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);
+    function getPool(bytes32 poolId) external returns (address, PoolSpecialization);
 
     /**
      * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.
@@ -309,7 +309,7 @@
      */
     function getPoolTokenInfo(bytes32 poolId, IERC20 token)
         external
-        view
+       
         returns (
             uint256 cash,
             uint256 managed,
@@ -333,7 +333,7 @@
      */
     function getPoolTokens(bytes32 poolId)
         external
-        view
+       
         returns (
             IERC20[] memory tokens,
             uint256[] memory balances,
@@ -745,7 +745,7 @@
     /**
      * @dev Returns the current protocol fee module.
      */
-    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);
+    function getProtocolFeesCollector() external returns (IProtocolFeesCollector);
 
     /**
      * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an
@@ -767,6 +767,6 @@
     /**
      * @dev Returns the Vault's WETH instance.
      */
-    function WETH() external view returns (IWETH);
+    function WETH() external returns (IWETH);
     // solhint-disable-previous-line func-name-mixedcase
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/BalancerMinter.sol liquidity-mining/contracts/BalancerMinter.sol
--- liquidity-mining/contracts/BalancerMinter.sol	2022-09-20 00:25:58.000000000 -0700
+++ liquidity-mining/contracts/BalancerMinter.sol	2022-09-20 00:31:32.000000000 -0700
@@ -14,15 +14,15 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeController.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeController.sol";
+import "../../interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeMath.sol";
+import "../../solidity-utils/contracts/openzeppelin/EIP712.sol";
+import "../../solidity-utils/contracts/helpers/EOASignaturesValidator.sol";
 
 contract BalancerMinter is IBalancerMinter, ReentrancyGuard, EOASignaturesValidator {
     using SafeMath for uint256;
@@ -52,21 +52,21 @@
     /**
      * @notice Returns the address of the Balancer Governance Token
      */
-    function getBalancerToken() external view override returns (IERC20) {
+    function getBalancerToken() external override returns (IERC20) {
         return _token;
     }
 
     /**
      * @notice Returns the address of the Balancer Token Admin contract
      */
-    function getBalancerTokenAdmin() external view override returns (IBalancerTokenAdmin) {
+    function getBalancerTokenAdmin() external override returns (IBalancerTokenAdmin) {
         return _tokenAdmin;
     }
 
     /**
      * @notice Returns the address of the Gauge Controller
      */
-    function getGaugeController() external view override returns (IGaugeController) {
+    function getGaugeController() external override returns (IGaugeController) {
         return _gaugeController;
     }
 
@@ -111,14 +111,14 @@
     /**
      * @notice The total number of tokens minted for `user` from `gauge`
      */
-    function minted(address user, address gauge) external view override returns (uint256) {
+    function minted(address user, address gauge) external override returns (uint256) {
         return _minted[user][gauge];
     }
 
     /**
      * @notice Whether `minter` is approved to mint tokens for `user`
      */
-    function getMinterApproval(address minter, address user) external view override returns (bool) {
+    function getMinterApproval(address minter, address user) external override returns (bool) {
         return _allowedMinter[minter][user];
     }
 
@@ -200,7 +200,7 @@
     /**
      * @notice Whether `minter` is approved to mint tokens for `user`
      */
-    function allowed_to_mint_for(address minter, address user) external view override returns (bool) {
+    function allowed_to_mint_for(address minter, address user) external override returns (bool) {
         return _allowedMinter[minter][user];
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/BalancerTokenAdmin.sol liquidity-mining/contracts/BalancerTokenAdmin.sol
--- liquidity-mining/contracts/BalancerTokenAdmin.sol	2022-06-22 10:15:28.000000000 -0700
+++ liquidity-mining/contracts/BalancerTokenAdmin.sol	2022-09-20 00:31:32.000000000 -0700
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // solhint-disable not-rely-on-time
 
@@ -60,7 +60,7 @@
     /**
      * @dev Returns the Balancer token.
      */
-    function getBalancerToken() external view override returns (IBalancerToken) {
+    function getBalancerToken() external override returns (IBalancerToken) {
         return _balancerToken;
     }
 
@@ -167,42 +167,42 @@
     /**
      * @notice Returns the current epoch number.
      */
-    function getMiningEpoch() external view returns (uint256) {
+    function getMiningEpoch() external returns (uint256) {
         return _miningEpoch;
     }
 
     /**
      * @notice Returns the start timestamp of the current epoch.
      */
-    function getStartEpochTime() external view returns (uint256) {
+    function getStartEpochTime() external returns (uint256) {
         return _startEpochTime;
     }
 
     /**
      * @notice Returns the start timestamp of the next epoch.
      */
-    function getFutureEpochTime() external view returns (uint256) {
+    function getFutureEpochTime() external returns (uint256) {
         return _startEpochTime.add(RATE_REDUCTION_TIME);
     }
 
     /**
      * @notice Returns the available supply at the beginning of the current epoch.
      */
-    function getStartEpochSupply() external view returns (uint256) {
+    function getStartEpochSupply() external returns (uint256) {
         return _startEpochSupply;
     }
 
     /**
      * @notice Returns the current inflation rate of BAL per second
      */
-    function getInflationRate() external view returns (uint256) {
+    function getInflationRate() external returns (uint256) {
         return _rate;
     }
 
     /**
      * @notice Maximum allowable number of tokens in existence (claimed or unclaimed)
      */
-    function getAvailableSupply() external view returns (uint256) {
+    function getAvailableSupply() external returns (uint256) {
         return _availableSupply();
     }
 
@@ -238,7 +238,7 @@
      * @param end End of the time interval (timestamp)
      * @return Tokens mintable from `start` till `end`
      */
-    function mintableInTimeframe(uint256 start, uint256 end) external view returns (uint256) {
+    function mintableInTimeframe(uint256 start, uint256 end) external returns (uint256) {
         return _mintableInTimeframe(start, end);
     }
 
@@ -247,7 +247,7 @@
     /**
      * @notice Maximum allowable number of tokens in existence (claimed or unclaimed)
      */
-    function _availableSupply() internal view returns (uint256) {
+    function _availableSupply() internal returns (uint256) {
         uint256 newSupplyFromCurrentEpoch = (block.timestamp.sub(_startEpochTime)).mul(_rate);
         return _startEpochSupply.add(newSupplyFromCurrentEpoch);
     }
@@ -284,7 +284,7 @@
      * @param end End of the time interval (timestamp)
      * @return Tokens mintable from `start` till `end`
      */
-    function _mintableInTimeframe(uint256 start, uint256 end) internal view returns (uint256) {
+    function _mintableInTimeframe(uint256 start, uint256 end) internal returns (uint256) {
         require(start <= end, "start > end");
 
         uint256 currentEpochTime = _startEpochTime;
@@ -336,11 +336,11 @@
     // They are included for ABI compatibility with snake_casing as used in vyper contracts.
     // solhint-disable func-name-mixedcase
 
-    function rate() external view override returns (uint256) {
+    function rate() external override returns (uint256) {
         return _rate;
     }
 
-    function available_supply() external view returns (uint256) {
+    function available_supply() external returns (uint256) {
         return _availableSupply();
     }
 
@@ -376,7 +376,7 @@
      * @param end End of the time interval (timestamp)
      * @return Tokens mintable from `start` till `end`
      */
-    function mintable_in_timeframe(uint256 start, uint256 end) external view returns (uint256) {
+    function mintable_in_timeframe(uint256 start, uint256 end) external returns (uint256) {
         return _mintableInTimeframe(start, end);
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/SmartWalletChecker.sol liquidity-mining/contracts/SmartWalletChecker.sol
--- liquidity-mining/contracts/SmartWalletChecker.sol	2022-06-22 10:15:28.000000000 -0700
+++ liquidity-mining/contracts/SmartWalletChecker.sol	2022-09-20 00:31:32.000000000 -0700
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
 
 contract SmartWalletChecker is ISmartWalletChecker, SingletonAuthentication {
     using EnumerableSet for EnumerableSet.AddressSet;
@@ -35,15 +35,15 @@
         }
     }
 
-    function check(address contractAddress) external view override returns (bool) {
+    function check(address contractAddress) external override returns (bool) {
         return _allowlistedAddresses.contains(contractAddress);
     }
 
-    function getAllowlistedAddress(uint256 index) external view returns (address) {
+    function getAllowlistedAddress(uint256 index) external returns (address) {
         return _allowlistedAddresses.at(index);
     }
 
-    function getAllowlistedAddressesLength() external view returns (uint256) {
+    function getAllowlistedAddressesLength() external returns (uint256) {
         return _allowlistedAddresses.length();
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/VotingEscrowDelegationProxy.sol liquidity-mining/contracts/VotingEscrowDelegationProxy.sol
--- liquidity-mining/contracts/VotingEscrowDelegationProxy.sol	2022-06-22 10:15:28.000000000 -0700
+++ liquidity-mining/contracts/VotingEscrowDelegationProxy.sol	2022-09-20 00:31:32.000000000 -0700
@@ -14,10 +14,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IVeDelegation.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IVeDelegation.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
 
 contract VotingEscrowDelegationProxy is SingletonAuthentication {
     IERC20 private immutable _votingEscrow;
@@ -37,14 +37,14 @@
     /**
      * @notice Returns the current delegation implementation contract.
      */
-    function getDelegationImplementation() external view returns (IVeDelegation) {
+    function getDelegationImplementation() external returns (IVeDelegation) {
         return _delegation;
     }
 
     /**
      * @notice Returns the Voting Escrow (veBAL) contract.
      */
-    function getVotingEscrow() external view returns (IERC20) {
+    function getVotingEscrow() external returns (IERC20) {
         return _votingEscrow;
     }
 
@@ -53,7 +53,7 @@
      * @param user The user to query the adjusted veBAL balance of
      * @return veBAL balance
      */
-    function adjustedBalanceOf(address user) external view returns (uint256) {
+    function adjustedBalanceOf(address user) external returns (uint256) {
         return _adjustedBalanceOf(user);
     }
 
@@ -63,13 +63,13 @@
      * @return veBAL balance
      */
     // solhint-disable-next-line func-name-mixedcase
-    function adjusted_balance_of(address user) external view returns (uint256) {
+    function adjusted_balance_of(address user) external returns (uint256) {
         return _adjustedBalanceOf(user);
     }
 
     // Internal functions
 
-    function _adjustedBalanceOf(address user) internal view returns (uint256) {
+    function _adjustedBalanceOf(address user) internal returns (uint256) {
         IVeDelegation implementation = _delegation;
         if (implementation == IVeDelegation(0)) {
             return IERC20(_votingEscrow).balanceOf(user);
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/admin/AuthorizerAdaptor.sol liquidity-mining/contracts/admin/AuthorizerAdaptor.sol
--- liquidity-mining/contracts/admin/AuthorizerAdaptor.sol	2022-06-22 10:15:28.000000000 -0700
+++ liquidity-mining/contracts/admin/AuthorizerAdaptor.sol	2022-09-20 00:31:32.000000000 -0700
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 /**
  * @title Authorizer Adaptor
@@ -46,14 +46,14 @@
     /**
      * @notice Returns the Balancer Vault
      */
-    function getVault() public view override returns (IVault) {
+    function getVault() public override returns (IVault) {
         return _vault;
     }
 
     /**
      * @notice Returns the Authorizer
      */
-    function getAuthorizer() public view override returns (IAuthorizer) {
+    function getAuthorizer() public override returns (IAuthorizer) {
         return getVault().getAuthorizer();
     }
 
@@ -61,7 +61,7 @@
         bytes32 actionId,
         address account,
         address where
-    ) internal view returns (bool) {
+    ) internal returns (bool) {
         return getAuthorizer().canPerform(actionId, account, where);
     }
 
@@ -74,7 +74,7 @@
      * @param selector - The 4 byte selector of the function to be called using `performAction`
      * @return The associated action ID
      */
-    function getActionId(bytes4 selector) public view override returns (bytes32) {
+    function getActionId(bytes4 selector) public override returns (bytes32) {
         return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol
--- liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol	2022-06-22 10:15:28.000000000 -0700
+++ liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol	2022-09-20 00:31:32.000000000 -0700
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
+import "../../interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
 
 /**
  * @title ChildChainGaugeTokenAdder
@@ -45,7 +45,7 @@
     /**
      * @notice Returns the address of the Authorizer adaptor contract.
      */
-    function getAuthorizerAdaptor() external view returns (IAuthorizerAdaptor) {
+    function getAuthorizerAdaptor() external returns (IAuthorizerAdaptor) {
         return _authorizerAdaptor;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/admin/DistributionScheduler.sol liquidity-mining/contracts/admin/DistributionScheduler.sol
--- liquidity-mining/contracts/admin/DistributionScheduler.sol	2022-09-20 00:25:58.000000000 -0700
+++ liquidity-mining/contracts/admin/DistributionScheduler.sol	2022-09-20 00:31:32.000000000 -0700
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
+import "../../interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 // solhint-disable not-rely-on-time
 
@@ -55,7 +55,7 @@
         IRewardTokenDistributor gauge,
         IERC20 token,
         uint256 timestamp
-    ) external view returns (RewardNode memory) {
+    ) external returns (RewardNode memory) {
         return _rewardsLists[_getRewardsListId(gauge, token)][uint32(timestamp)];
     }
 
@@ -64,7 +64,7 @@
      * @param gauge - The gauge which is to distribute the reward token.
      * @param token - The token which is to be distributed among gauge depositors.
      */
-    function getPendingRewards(IRewardTokenDistributor gauge, IERC20 token) public view returns (uint256) {
+    function getPendingRewards(IRewardTokenDistributor gauge, IERC20 token) public returns (uint256) {
         return getPendingRewardsAt(gauge, token, block.timestamp);
     }
 
@@ -78,7 +78,7 @@
         IRewardTokenDistributor gauge,
         IERC20 token,
         uint256 timestamp
-    ) public view returns (uint256) {
+    ) public returns (uint256) {
         mapping(uint32 => RewardNode) storage rewardsList = _rewardsLists[_getRewardsListId(gauge, token)];
 
         (, uint256 amount) = _getPendingRewards(rewardsList, timestamp);
@@ -172,7 +172,7 @@
      */
     function _getPendingRewards(mapping(uint32 => RewardNode) storage rewardsList, uint256 targetKey)
         internal
-        view
+       
         returns (uint32, uint256)
     {
         uint32 currentNodeKey = rewardsList[_HEAD].nextTimestamp;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/admin/GaugeAdder.sol liquidity-mining/contracts/admin/GaugeAdder.sol
--- liquidity-mining/contracts/admin/GaugeAdder.sol	2022-09-20 00:25:58.000000000 -0700
+++ liquidity-mining/contracts/admin/GaugeAdder.sol	2022-09-20 00:31:32.000000000 -0700
@@ -14,14 +14,14 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeAdder.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeAdder.sol";
+import "../../interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
 
 contract GaugeAdder is IGaugeAdder, SingletonAuthentication, ReentrancyGuard {
     using EnumerableSet for EnumerableSet.AddressSet;
@@ -51,14 +51,14 @@
     /**
      * @notice Returns the address of the Authorizer adaptor contract.
      */
-    function getAuthorizerAdaptor() external view returns (IAuthorizerAdaptor) {
+    function getAuthorizerAdaptor() external returns (IAuthorizerAdaptor) {
         return _authorizerAdaptor;
     }
 
     /**
      * @notice Returns the address of the Gauge Controller
      */
-    function getGaugeController() external view override returns (IGaugeController) {
+    function getGaugeController() external override returns (IGaugeController) {
         return _gaugeController;
     }
 
@@ -69,7 +69,7 @@
      * This function provides global information by using which gauge has been added to the Gauge Controller
      * to represent the canonical gauge for a given pool address.
      */
-    function getPoolGauge(IERC20 pool) public view override returns (ILiquidityGauge) {
+    function getPoolGauge(IERC20 pool) public override returns (ILiquidityGauge) {
         ILiquidityGauge gauge = _poolGauge[pool];
         if (gauge == ILiquidityGauge(0) && _previousGaugeAdder != IGaugeAdder(0)) {
             // It's possible that a gauge for this pool was added by a previous GaugeAdder,
@@ -82,21 +82,21 @@
     /**
      * @notice Returns the `index`'th factory for gauge type `gaugeType`
      */
-    function getFactoryForGaugeType(GaugeType gaugeType, uint256 index) external view override returns (address) {
+    function getFactoryForGaugeType(GaugeType gaugeType, uint256 index) external override returns (address) {
         return _gaugeFactoriesByType[gaugeType].at(index);
     }
 
     /**
      * @notice Returns the number of factories for gauge type `gaugeType`
      */
-    function getFactoryForGaugeTypeCount(GaugeType gaugeType) external view override returns (uint256) {
+    function getFactoryForGaugeTypeCount(GaugeType gaugeType) external override returns (uint256) {
         return _gaugeFactoriesByType[gaugeType].length();
     }
 
     /**
      * @notice Returns whether `gauge` has been deployed by one of the listed factories for the gauge type `gaugeType`
      */
-    function isGaugeFromValidFactory(address gauge, GaugeType gaugeType) public view override returns (bool) {
+    function isGaugeFromValidFactory(address gauge, GaugeType gaugeType) public override returns (bool) {
         EnumerableSet.AddressSet storage gaugeFactories = _gaugeFactoriesByType[gaugeType];
         uint256 gaugeFactoriesLength = gaugeFactories.length();
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/fee-distribution/FeeDistributor.sol liquidity-mining/contracts/fee-distribution/FeeDistributor.sol
--- liquidity-mining/contracts/fee-distribution/FeeDistributor.sol	2022-09-20 00:25:58.000000000 -0700
+++ liquidity-mining/contracts/fee-distribution/FeeDistributor.sol	2022-09-20 00:31:32.000000000 -0700
@@ -15,16 +15,16 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IFeeDistributor.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IVotingEscrow.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/OptionalOnlyCaller.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
+import "../../interfaces/contracts/liquidity-mining/IFeeDistributor.sol";
+import "../../interfaces/contracts/liquidity-mining/IVotingEscrow.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/OptionalOnlyCaller.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeMath.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // solhint-disable not-rely-on-time
 
@@ -93,14 +93,14 @@
     /**
      * @notice Returns the VotingEscrow (veBAL) token contract
      */
-    function getVotingEscrow() external view override returns (IVotingEscrow) {
+    function getVotingEscrow() external override returns (IVotingEscrow) {
         return _votingEscrow;
     }
 
     /**
      * @notice Returns the global time cursor representing the most earliest uncheckpointed week.
      */
-    function getTimeCursor() external view override returns (uint256) {
+    function getTimeCursor() external override returns (uint256) {
         return _timeCursor;
     }
 
@@ -108,7 +108,7 @@
      * @notice Returns the user-level time cursor representing the most earliest uncheckpointed week.
      * @param user - The address of the user to query.
      */
-    function getUserTimeCursor(address user) external view override returns (uint256) {
+    function getUserTimeCursor(address user) external override returns (uint256) {
         return _userState[user].timeCursor;
     }
 
@@ -116,7 +116,7 @@
      * @notice Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed.
      * @param token - The ERC20 token address to query.
      */
-    function getTokenTimeCursor(IERC20 token) external view override returns (uint256) {
+    function getTokenTimeCursor(IERC20 token) external override returns (uint256) {
         return _tokenState[token].timeCursor;
     }
 
@@ -125,7 +125,7 @@
      * @param user - The address of the user to query.
      * @param token - The ERC20 token address to query.
      */
-    function getUserTokenTimeCursor(address user, IERC20 token) external view override returns (uint256) {
+    function getUserTokenTimeCursor(address user, IERC20 token) external override returns (uint256) {
         return _getUserTokenTimeCursor(user, token);
     }
 
@@ -136,7 +136,7 @@
      * @param user - The address of the user of which to read the cached balance of.
      * @param timestamp - The timestamp at which to read the `user`'s cached balance at.
      */
-    function getUserBalanceAtTimestamp(address user, uint256 timestamp) external view override returns (uint256) {
+    function getUserBalanceAtTimestamp(address user, uint256 timestamp) external override returns (uint256) {
         return _userBalanceAtTimestamp[user][timestamp];
     }
 
@@ -146,14 +146,14 @@
      * This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.
      * @param timestamp - The timestamp at which to read the cached total supply at.
      */
-    function getTotalSupplyAtTimestamp(uint256 timestamp) external view override returns (uint256) {
+    function getTotalSupplyAtTimestamp(uint256 timestamp) external override returns (uint256) {
         return _veSupplyCache[timestamp];
     }
 
     /**
      * @notice Returns the FeeDistributor's cached balance of `token`.
      */
-    function getTokenLastBalance(IERC20 token) external view override returns (uint256) {
+    function getTokenLastBalance(IERC20 token) external override returns (uint256) {
         return _tokenState[token].cachedBalance;
     }
 
@@ -162,7 +162,7 @@
      * @param token - The ERC20 token address to query.
      * @param timestamp - The timestamp corresponding to the beginning of the week of interest.
      */
-    function getTokensDistributedInWeek(IERC20 token, uint256 timestamp) external view override returns (uint256) {
+    function getTokensDistributedInWeek(IERC20 token, uint256 timestamp) external override returns (uint256) {
         return _tokensPerWeek[token][timestamp];
     }
 
@@ -580,7 +580,7 @@
      * @dev Wrapper around `_userTokenTimeCursor` which returns the start timestamp for `token`
      * if `user` has not attempted to interact with it previously.
      */
-    function _getUserTokenTimeCursor(address user, IERC20 token) internal view returns (uint256) {
+    function _getUserTokenTimeCursor(address user, IERC20 token) internal returns (uint256) {
         uint256 userTimeCursor = _userTokenTimeCursor[user][token];
         if (userTimeCursor > 0) return userTimeCursor;
         // This is the first time that the user has interacted with this token.
@@ -596,7 +596,7 @@
         uint256 timestamp,
         uint256 minUserEpoch,
         uint256 maxUserEpoch
-    ) internal view returns (uint256) {
+    ) internal returns (uint256) {
         uint256 min = minUserEpoch;
         uint256 max = maxUserEpoch;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/BaseGaugeFactory.sol liquidity-mining/contracts/gauges/BaseGaugeFactory.sol
--- liquidity-mining/contracts/gauges/BaseGaugeFactory.sol	2022-09-20 00:25:58.000000000 -0700
+++ liquidity-mining/contracts/gauges/BaseGaugeFactory.sol	2022-09-20 00:31:32.000000000 -0700
@@ -33,14 +33,14 @@
     /**
      * @notice Returns the address of the implementation used for gauge deployments.
      */
-    function getGaugeImplementation() public view returns (ILiquidityGauge) {
+    function getGaugeImplementation() public returns (ILiquidityGauge) {
         return _gaugeImplementation;
     }
 
     /**
      * @notice Returns true if `gauge` was created by this factory.
      */
-    function isGaugeFromFactory(address gauge) external view override returns (bool) {
+    function isGaugeFromFactory(address gauge) external override returns (bool) {
         return _isGaugeFromFactory[gauge];
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol
--- liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol	2022-06-22 10:15:28.000000000 -0700
+++ liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol	2022-09-20 00:31:32.000000000 -0700
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainStreamer.sol";
+import "../../interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainStreamer.sol";
 
 /**
  * @title ChildChainGaugeRewardHelper
@@ -29,7 +29,7 @@
 
     /**
      * @notice Returns the amount of ERC20 token `token` on RewardsOnlyGauge `gauge` claimable by address `user`.
-     * @dev This function cannot be marked `view` as it updates the gauge's state (not possible in a view context).
+     * @dev This function cannot be marked `view` as it updates the gauge's state (not possible in acontext).
      * Offchain users attempting to read from this function should manually perform a static call or modify the abi.
      * @param gauge - The address of the RewardsOnlyGauge for which to query.
      * @param user - The address of the user for which to query.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol
--- liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol	2022-09-20 00:25:58.000000000 -0700
+++ liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol	2022-09-20 00:31:32.000000000 -0700
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
+import "../../interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
 
 contract ChildChainLiquidityGaugeFactory is IChildChainLiquidityGaugeFactory {
     // RewardsOnlyGauge expects the claim function selector to be left padded with zeros.
@@ -42,56 +42,56 @@
     /**
      * @notice Returns the address of the implementation used for gauge deployments.
      */
-    function getGaugeImplementation() external view override returns (ILiquidityGauge) {
+    function getGaugeImplementation() external override returns (ILiquidityGauge) {
         return _gaugeImplementation;
     }
 
     /**
      * @notice Returns the address of the implementation used for streamer deployments.
      */
-    function getChildChainStreamerImplementation() external view override returns (IChildChainStreamer) {
+    function getChildChainStreamerImplementation() external override returns (IChildChainStreamer) {
         return _childChainStreamerImplementation;
     }
 
     /**
      * @notice Returns the address of the gauge belonging to `pool`.
      */
-    function getPoolGauge(address pool) public view override returns (ILiquidityGauge) {
+    function getPoolGauge(address pool) public override returns (ILiquidityGauge) {
         return ILiquidityGauge(_poolGauge[pool]);
     }
 
     /**
      * @notice Returns true if `gauge` was created by this factory.
      */
-    function isGaugeFromFactory(address gauge) external view override returns (bool) {
+    function isGaugeFromFactory(address gauge) external override returns (bool) {
         return _isGaugeFromFactory[gauge];
     }
 
     /**
      * @notice Returns the address of the streamer belonging to `gauge`.
      */
-    function getGaugeStreamer(address gauge) public view override returns (address) {
+    function getGaugeStreamer(address gauge) public override returns (address) {
         return _gaugeStreamer[gauge];
     }
 
     /**
      * @notice Returns true if `streamer` was created by this factory.
      */
-    function isStreamerFromFactory(address streamer) external view override returns (bool) {
+    function isStreamerFromFactory(address streamer) external override returns (bool) {
         return _isStreamerFromFactory[streamer];
     }
 
     /**
      * @notice Returns the address of the pool which `gauge` belongs.
      */
-    function getGaugePool(address gauge) external view override returns (IERC20) {
+    function getGaugePool(address gauge) external override returns (IERC20) {
         return IRewardsOnlyGauge(gauge).lp_token();
     }
 
     /**
      * @notice Returns the address of the streamer belonging to `pool`'s gauge.
      */
-    function getPoolStreamer(address pool) external view override returns (address) {
+    function getPoolStreamer(address pool) external override returns (address) {
         return getGaugeStreamer(address(getPoolGauge(pool)));
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol.orig liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol.orig
--- liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol.orig	1969-12-31 16:00:00.000000000 -0800
+++ liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol.orig	2022-09-20 00:31:32.000000000 -0700
@@ -0,0 +1,126 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+
+contract ChildChainLiquidityGaugeFactory is IChildChainLiquidityGaugeFactory {
+    // RewardsOnlyGauge expects the claim function selector to be left padded with zeros.
+    // We then shift right 28 bytes so that the function selector (top 4 bytes) sits in the lowest 4 bytes.
+    bytes32 private constant _CLAIM_SIG = keccak256("get_reward()") >> (28 * 8);
+
+    ILiquidityGauge private immutable _gaugeImplementation;
+    IChildChainStreamer private immutable _childChainStreamerImplementation;
+
+    mapping(address => bool) private _isGaugeFromFactory;
+    mapping(address => bool) private _isStreamerFromFactory;
+    mapping(address => address) private _poolGauge;
+    mapping(address => address) private _gaugeStreamer;
+
+    constructor(ILiquidityGauge gauge, IChildChainStreamer childChainStreamer) {
+        _gaugeImplementation = gauge;
+        _childChainStreamerImplementation = childChainStreamer;
+    }
+
+    /**
+     * @notice Returns the address of the implementation used for gauge deployments.
+     */
+    function getGaugeImplementation() external view override returns (ILiquidityGauge) {
+        return _gaugeImplementation;
+    }
+
+    /**
+     * @notice Returns the address of the implementation used for streamer deployments.
+     */
+    function getChildChainStreamerImplementation() external view override returns (IChildChainStreamer) {
+        return _childChainStreamerImplementation;
+    }
+
+    /**
+     * @notice Returns the address of the gauge belonging to `pool`.
+     */
+    function getPoolGauge(address pool) public view override returns (ILiquidityGauge) {
+        return ILiquidityGauge(_poolGauge[pool]);
+    }
+
+    /**
+     * @notice Returns true if `gauge` was created by this factory.
+     */
+    function isGaugeFromFactory(address gauge) external view override returns (bool) {
+        return _isGaugeFromFactory[gauge];
+    }
+
+    /**
+     * @notice Returns the address of the streamer belonging to `gauge`.
+     */
+    function getGaugeStreamer(address gauge) public view override returns (address) {
+        return _gaugeStreamer[gauge];
+    }
+
+    /**
+     * @notice Returns true if `streamer` was created by this factory.
+     */
+    function isStreamerFromFactory(address streamer) external view override returns (bool) {
+        return _isStreamerFromFactory[streamer];
+    }
+
+    /**
+     * @notice Returns the address of the pool which `gauge` belongs.
+     */
+    function getGaugePool(address gauge) external view override returns (IERC20) {
+        return IRewardsOnlyGauge(gauge).lp_token();
+    }
+
+    /**
+     * @notice Returns the address of the streamer belonging to `pool`'s gauge.
+     */
+    function getPoolStreamer(address pool) external view override returns (address) {
+        return getGaugeStreamer(address(getPoolGauge(pool)));
+    }
+
+    /**
+     * @notice Deploys a new gauge for a Balancer pool.
+     * @dev As anyone can register arbitrary Balancer pools with the Vault,
+     * it's impossible to prove onchain that `pool` is a "valid" deployment.
+     *
+     * Care must be taken to ensure that gauges deployed from this factory are
+     * suitable before they are added to the GaugeController.
+     *
+     * This factory disallows deploying multiple gauges for a single pool.
+     * @param pool The address of the pool for which to deploy a gauge
+     * @return The address of the deployed gauge
+     */
+    function create(address pool) external returns (address) {
+        require(_poolGauge[pool] == address(0), "Gauge already exists");
+
+        address gauge = Clones.clone(address(_gaugeImplementation));
+        address streamer = Clones.clone(address(_childChainStreamerImplementation));
+
+        IChildChainStreamer(streamer).initialize(gauge);
+        IRewardsOnlyGauge(gauge).initialize(pool, streamer, _CLAIM_SIG);
+
+        _isGaugeFromFactory[gauge] = true;
+        _poolGauge[pool] = gauge;
+        _gaugeStreamer[gauge] = streamer;
+        emit RewardsOnlyGaugeCreated(gauge, pool, streamer);
+
+        return gauge;
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-stable/contracts/StablePoolAmplification.sol pool-stable/contracts/StablePoolAmplification.sol
--- pool-stable/contracts/StablePoolAmplification.sol	2022-09-20 00:25:58.000000000 -0700
+++ pool-stable/contracts/StablePoolAmplification.sol	2022-09-20 10:37:47.000000000 -0700
@@ -75,7 +75,7 @@
 
     // Return the current amp value, which will be an interpolation if there is an ongoing amp update.
     // Also return a flag indicating whether there is an ongoing update.
-    function _getAmplificationParameter() internal view returns (uint256 value, bool isUpdating) {
+    function _getAmplificationParameter() public view returns (uint256 value, bool isUpdating) { // HARNESSED to public
         (uint256 startValue, uint256 endValue, uint256 startTime, uint256 endTime) = _getAmplificationData();
 
         // Note that block.timestamp >= startTime, since startTime is set to the current time when an update starts
