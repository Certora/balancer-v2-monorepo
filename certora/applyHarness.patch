diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/contracts/MerkleOrchard.sol distributors/contracts/MerkleOrchard.sol
--- distributors/contracts/MerkleOrchard.sol	2022-11-21 22:55:10.000000000 -0800
+++ distributors/contracts/MerkleOrchard.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,13 +14,13 @@
 
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../../interfaces/contracts/vault/IVault.sol";
+import "../../../interfaces/contracts/vault/IAsset.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../../solidity-utils/contracts/openzeppelin/MerkleProof.sol";
+import "../../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 pragma solidity ^0.7.0;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/contracts/MerkleRedeem.sol distributors/contracts/MerkleRedeem.sol
--- distributors/contracts/MerkleRedeem.sol	2022-11-21 22:55:10.000000000 -0800
+++ distributors/contracts/MerkleRedeem.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,15 +14,15 @@
 
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../../interfaces/contracts/vault/IVault.sol";
+import "../../../interfaces/contracts/vault/IAsset.sol";
+
+import "../../../solidity-utils/contracts/openzeppelin/MerkleProof.sol";
+import "../../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../../solidity-utils/contracts/openzeppelin/Ownable.sol";
+import "../../../solidity-utils/contracts/math/FixedPoint.sol";
 
 pragma solidity ^0.7.0;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts distributors/contracts/test/MockRewardCallback.sol distributors/contracts/test/MockRewardCallback.sol
--- distributors/contracts/test/MockRewardCallback.sol	2022-11-21 22:55:10.000000000 -0800
+++ distributors/contracts/test/MockRewardCallback.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../interfaces/contracts/distributors/IDistributorCallback.sol";
 
 contract MockRewardCallback is IDistributorCallback {
     event CallbackReceived();
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IArbitrumFeeProvider.sol interfaces/contracts/liquidity-mining/IArbitrumFeeProvider.sol
--- interfaces/contracts/liquidity-mining/IArbitrumFeeProvider.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IArbitrumFeeProvider.sol	2022-11-22 00:28:06.000000000 -0800
@@ -17,7 +17,7 @@
 interface IArbitrumFeeProvider {
     function getArbitrumFees()
         external
-        view
+       
         returns (
             uint256 gasLimit,
             uint256 gasPrice,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol
--- interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol	2022-11-22 00:28:06.000000000 -0800
@@ -21,12 +21,12 @@
     /**
      * @notice Returns the Balancer Vault
      */
-    function getVault() external view returns (IVault);
+    function getVault() external returns (IVault);
 
     /**
      * @notice Returns the Authorizer
      */
-    function getAuthorizer() external view returns (IAuthorizer);
+    function getAuthorizer() external returns (IAuthorizer);
 
     /**
      * @notice Performs an arbitrary function call on a target contract, provided the caller is authorized to do so.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IBalancerMinter.sol interfaces/contracts/liquidity-mining/IBalancerMinter.sol
--- interfaces/contracts/liquidity-mining/IBalancerMinter.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IBalancerMinter.sol	2022-11-22 00:28:06.000000000 -0800
@@ -23,17 +23,17 @@
     /**
      * @notice Returns the address of the Balancer Governance Token
      */
-    function getBalancerToken() external view returns (IERC20);
+    function getBalancerToken() external returns (IERC20);
 
     /**
      * @notice Returns the address of the Balancer Token Admin contract
      */
-    function getBalancerTokenAdmin() external view returns (IBalancerTokenAdmin);
+    function getBalancerTokenAdmin() external returns (IBalancerTokenAdmin);
 
     /**
      * @notice Returns the address of the Gauge Controller
      */
-    function getGaugeController() external view returns (IGaugeController);
+    function getGaugeController() external returns (IGaugeController);
 
     /**
      * @notice Mint everything which belongs to `msg.sender` and send to them
@@ -66,12 +66,12 @@
     /**
      * @notice The total number of tokens minted for `user` from `gauge`
      */
-    function minted(address user, address gauge) external view returns (uint256);
+    function minted(address user, address gauge) external returns (uint256);
 
     /**
      * @notice Whether `minter` is approved to mint tokens for `user`
      */
-    function getMinterApproval(address minter, address user) external view returns (bool);
+    function getMinterApproval(address minter, address user) external returns (bool);
 
     /**
      * @notice Set whether `minter` is approved to mint tokens on your behalf
@@ -99,7 +99,7 @@
     /**
      * @notice Whether `minter` is approved to mint tokens for `user`
      */
-    function allowed_to_mint_for(address minter, address user) external view returns (bool);
+    function allowed_to_mint_for(address minter, address user) external returns (bool);
 
     /**
      * @notice Mint everything which belongs to `msg.sender` across multiple gauges
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IBalancerToken.sol interfaces/contracts/liquidity-mining/IBalancerToken.sol
--- interfaces/contracts/liquidity-mining/IBalancerToken.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IBalancerToken.sol	2022-11-22 00:28:06.000000000 -0800
@@ -19,26 +19,26 @@
 interface IBalancerToken is IERC20 {
     function mint(address to, uint256 amount) external;
 
-    function getRoleMemberCount(bytes32 role) external view returns (uint256);
+    function getRoleMemberCount(bytes32 role) external returns (uint256);
 
-    function getRoleMember(bytes32 role, uint256 index) external view returns (address);
+    function getRoleMember(bytes32 role, uint256 index) external returns (address);
 
-    function hasRole(bytes32 role, address account) external view returns (bool);
+    function hasRole(bytes32 role, address account) external returns (bool);
 
-    function getRoleAdmin(bytes32 role) external view returns (bytes32);
+    function getRoleAdmin(bytes32 role) external returns (bytes32);
 
     function grantRole(bytes32 role, address account) external;
 
     function revokeRole(bytes32 role, address account) external;
 
     // solhint-disable-next-line func-name-mixedcase
-    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
+    function DEFAULT_ADMIN_ROLE() external returns (bytes32);
 
     // solhint-disable-next-line func-name-mixedcase
-    function MINTER_ROLE() external view returns (bytes32);
+    function MINTER_ROLE() external returns (bytes32);
 
     // solhint-disable-next-line func-name-mixedcase
-    function SNAPSHOT_ROLE() external view returns (bytes32);
+    function SNAPSHOT_ROLE() external returns (bytes32);
 
     function snapshot() external;
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol
--- interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol	2022-11-22 00:28:06.000000000 -0800
@@ -20,24 +20,24 @@
 
 interface IBalancerTokenAdmin is IAuthentication {
     // solhint-disable func-name-mixedcase
-    function INITIAL_RATE() external view returns (uint256);
+    function INITIAL_RATE() external returns (uint256);
 
-    function RATE_REDUCTION_TIME() external view returns (uint256);
+    function RATE_REDUCTION_TIME() external returns (uint256);
 
-    function RATE_REDUCTION_COEFFICIENT() external view returns (uint256);
+    function RATE_REDUCTION_COEFFICIENT() external returns (uint256);
 
-    function RATE_DENOMINATOR() external view returns (uint256);
+    function RATE_DENOMINATOR() external returns (uint256);
 
     // solhint-enable func-name-mixedcase
 
     /**
      * @notice Returns the address of the Balancer Governance Token
      */
-    function getBalancerToken() external view returns (IBalancerToken);
+    function getBalancerToken() external returns (IBalancerToken);
 
     function activate() external;
 
-    function rate() external view returns (uint256);
+    function rate() external returns (uint256);
 
     function startEpochTimeWrite() external returns (uint256);
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol
--- interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -26,35 +26,35 @@
     /**
      * @notice Returns the address of the implementation used for gauge deployments.
      */
-    function getGaugeImplementation() external view returns (ILiquidityGauge);
+    function getGaugeImplementation() external returns (ILiquidityGauge);
 
     /**
      * @notice Returns the address of the implementation used for streamer deployments.
      */
-    function getChildChainStreamerImplementation() external view returns (IChildChainStreamer);
+    function getChildChainStreamerImplementation() external returns (IChildChainStreamer);
 
     /**
      * @notice Returns the address of the gauge belonging to `pool`.
      */
-    function getPoolGauge(address pool) external view returns (ILiquidityGauge);
+    function getPoolGauge(address pool) external returns (ILiquidityGauge);
 
     /**
      * @notice Returns the address of the streamer belonging to `gauge`.
      */
-    function getGaugeStreamer(address gauge) external view returns (address);
+    function getGaugeStreamer(address gauge) external returns (address);
 
     /**
      * @notice Returns true if `streamer` was created by this factory.
      */
-    function isStreamerFromFactory(address streamer) external view returns (bool);
+    function isStreamerFromFactory(address streamer) external returns (bool);
 
     /**
      * @notice Returns the address of the pool which `gauge` belongs.
      */
-    function getGaugePool(address gauge) external view returns (IERC20);
+    function getGaugePool(address gauge) external returns (IERC20);
 
     /**
      * @notice Returns the address of the streamer belonging to `pool`'s gauge.
      */
-    function getPoolStreamer(address pool) external view returns (address);
+    function getPoolStreamer(address pool) external returns (address);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IChildChainStreamer.sol interfaces/contracts/liquidity-mining/IChildChainStreamer.sol
--- interfaces/contracts/liquidity-mining/IChildChainStreamer.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IChildChainStreamer.sol	2022-11-22 00:28:06.000000000 -0800
@@ -25,7 +25,7 @@
 
     function get_reward() external;
 
-    function reward_tokens(uint256 index) external view returns (IERC20);
+    function reward_tokens(uint256 index) external returns (IERC20);
 
     function add_reward(
         IERC20 rewardToken,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IFeeDistributor.sol interfaces/contracts/liquidity-mining/IFeeDistributor.sol
--- interfaces/contracts/liquidity-mining/IFeeDistributor.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IFeeDistributor.sol	2022-11-22 00:28:06.000000000 -0800
@@ -33,31 +33,31 @@
     /**
      * @notice Returns the VotingEscrow (veBAL) token contract
      */
-    function getVotingEscrow() external view returns (IVotingEscrow);
+    function getVotingEscrow() external returns (IVotingEscrow);
 
     /**
      * @notice Returns the global time cursor representing the most earliest uncheckpointed week.
      */
-    function getTimeCursor() external view returns (uint256);
+    function getTimeCursor() external returns (uint256);
 
     /**
      * @notice Returns the user-level time cursor representing the most earliest uncheckpointed week.
      * @param user - The address of the user to query.
      */
-    function getUserTimeCursor(address user) external view returns (uint256);
+    function getUserTimeCursor(address user) external returns (uint256);
 
     /**
      * @notice Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed.
      * @param token - The ERC20 token address to query.
      */
-    function getTokenTimeCursor(IERC20 token) external view returns (uint256);
+    function getTokenTimeCursor(IERC20 token) external returns (uint256);
 
     /**
      * @notice Returns the user-level time cursor storing the timestamp of the latest token distribution claimed.
      * @param user - The address of the user to query.
      * @param token - The ERC20 token address to query.
      */
-    function getUserTokenTimeCursor(address user, IERC20 token) external view returns (uint256);
+    function getUserTokenTimeCursor(address user, IERC20 token) external returns (uint256);
 
     /**
      * @notice Returns the user's cached balance of veBAL as of the provided timestamp.
@@ -66,7 +66,7 @@
      * @param user - The address of the user of which to read the cached balance of.
      * @param timestamp - The timestamp at which to read the `user`'s cached balance at.
      */
-    function getUserBalanceAtTimestamp(address user, uint256 timestamp) external view returns (uint256);
+    function getUserBalanceAtTimestamp(address user, uint256 timestamp) external returns (uint256);
 
     /**
      * @notice Returns the cached total supply of veBAL as of the provided timestamp.
@@ -74,19 +74,19 @@
      * This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.
      * @param timestamp - The timestamp at which to read the cached total supply at.
      */
-    function getTotalSupplyAtTimestamp(uint256 timestamp) external view returns (uint256);
+    function getTotalSupplyAtTimestamp(uint256 timestamp) external returns (uint256);
 
     /**
      * @notice Returns the FeeDistributor's cached balance of `token`.
      */
-    function getTokenLastBalance(IERC20 token) external view returns (uint256);
+    function getTokenLastBalance(IERC20 token) external returns (uint256);
 
     /**
      * @notice Returns the amount of `token` which the FeeDistributor received in the week beginning at `timestamp`.
      * @param token - The ERC20 token address to query.
      * @param timestamp - The timestamp corresponding to the beginning of the week of interest.
      */
-    function getTokensDistributedInWeek(IERC20 token, uint256 timestamp) external view returns (uint256);
+    function getTokensDistributedInWeek(IERC20 token, uint256 timestamp) external returns (uint256);
 
     // Depositing
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IGaugeAdder.sol interfaces/contracts/liquidity-mining/IGaugeAdder.sol
--- interfaces/contracts/liquidity-mining/IGaugeAdder.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IGaugeAdder.sol	2022-11-22 00:28:06.000000000 -0800
@@ -28,7 +28,7 @@
     /**
      * @notice Returns the address of the Gauge Controller
      */
-    function getGaugeController() external view returns (IGaugeController);
+    function getGaugeController() external returns (IGaugeController);
 
     /**
      * @notice Returns the gauge corresponding to a Balancer pool `pool` on Ethereum mainnet.
@@ -37,22 +37,22 @@
      * This function provides global information by using which gauge has been added to the Gauge Controller
      * to represent the canonical gauge for a given pool address.
      */
-    function getPoolGauge(IERC20 pool) external view returns (ILiquidityGauge);
+    function getPoolGauge(IERC20 pool) external returns (ILiquidityGauge);
 
     /**
      * @notice Returns the `index`'th factory for gauge type `gaugeType`
      */
-    function getFactoryForGaugeType(GaugeType gaugeType, uint256 index) external view returns (address);
+    function getFactoryForGaugeType(GaugeType gaugeType, uint256 index) external returns (address);
 
     /**
      * @notice Returns the number of factories for gauge type `gaugeType`
      */
-    function getFactoryForGaugeTypeCount(GaugeType gaugeType) external view returns (uint256);
+    function getFactoryForGaugeTypeCount(GaugeType gaugeType) external returns (uint256);
 
     /**
      * @notice Returns whether `gauge` has been deployed by one of the listed factories for the gauge type `gaugeType`
      */
-    function isGaugeFromValidFactory(address gauge, GaugeType gaugeType) external view returns (bool);
+    function isGaugeFromValidFactory(address gauge, GaugeType gaugeType) external returns (bool);
 
     /**
      * @notice Adds a new gauge to the GaugeController for the "Ethereum" type.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IGaugeController.sol interfaces/contracts/liquidity-mining/IGaugeController.sol
--- interfaces/contracts/liquidity-mining/IGaugeController.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IGaugeController.sol	2022-11-22 00:28:06.000000000 -0800
@@ -26,11 +26,11 @@
 interface IGaugeController {
     function checkpoint_gauge(address gauge) external;
 
-    function gauge_relative_weight(address gauge, uint256 time) external view returns (uint256);
+    function gauge_relative_weight(address gauge, uint256 time) external returns (uint256);
 
-    function voting_escrow() external view returns (IVotingEscrow);
+    function voting_escrow() external returns (IVotingEscrow);
 
-    function token() external view returns (IERC20);
+    function token() external returns (IERC20);
 
     function add_type(string calldata name, uint256 weight) external;
 
@@ -38,9 +38,9 @@
 
     function add_gauge(address gauge, int128 gaugeType) external;
 
-    function n_gauge_types() external view returns (int128);
+    function n_gauge_types() external returns (int128);
 
-    function gauge_types(address gauge) external view returns (int128);
+    function gauge_types(address gauge) external returns (int128);
 
-    function admin() external view returns (IAuthorizerAdaptor);
+    function admin() external returns (IAuthorizerAdaptor);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/ILiquidityGauge.sol interfaces/contracts/liquidity-mining/ILiquidityGauge.sol
--- interfaces/contracts/liquidity-mining/ILiquidityGauge.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/ILiquidityGauge.sol	2022-11-22 00:28:06.000000000 -0800
@@ -28,7 +28,7 @@
      * @param user User address.
      * @return uint256 BAL amount to issue for the address.
      */
-    function integrate_fraction(address user) external view returns (uint256);
+    function integrate_fraction(address user) external returns (uint256);
 
     /**
      * @notice Record a checkpoint for a given user.
@@ -40,7 +40,7 @@
     /**
      * @notice Returns true if gauge is killed; false otherwise.
      */
-    function is_killed() external view returns (bool);
+    function is_killed() external returns (bool);
 
     /**
      * @notice Kills the gauge so it cannot mint BAL.
@@ -62,11 +62,11 @@
     /**
      * @notice Gets the relative weight cap for the gauge.
      */
-    function getRelativeWeightCap() external view returns (uint256);
+    function getRelativeWeightCap() external returns (uint256);
 
     /**
      * @notice Returns the gauge's relative weight for a given time, capped to its relative weight cap attribute.
      * @param time Timestamp in the past or present.
      */
-    function getCappedRelativeWeight(uint256 time) external view returns (uint256);
+    function getCappedRelativeWeight(uint256 time) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol
--- interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -21,5 +21,5 @@
     /**
      * @notice Returns true if `gauge` was created by this factory.
      */
-    function isGaugeFromFactory(address gauge) external view returns (bool);
+    function isGaugeFromFactory(address gauge) external returns (bool);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IOptimismGasLimitProvider.sol interfaces/contracts/liquidity-mining/IOptimismGasLimitProvider.sol
--- interfaces/contracts/liquidity-mining/IOptimismGasLimitProvider.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IOptimismGasLimitProvider.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 
 interface IOptimismGasLimitProvider {
-    function getOptimismGasLimit() external view returns (uint32 gasLimit);
+    function getOptimismGasLimit() external returns (uint32 gasLimit);
 
     function setOptimismGasLimit(uint32 gasLimit) external;
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol
--- interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol	2022-11-22 00:28:06.000000000 -0800
@@ -31,9 +31,9 @@
         uint256 integral;
     }
 
-    function reward_tokens(uint256 index) external view returns (IERC20);
+    function reward_tokens(uint256 index) external returns (IERC20);
 
-    function reward_data(IERC20 token) external view returns (Reward memory);
+    function reward_data(IERC20 token) external returns (Reward memory);
 
     function claim_rewards(address user) external;
 
@@ -43,7 +43,7 @@
 
     function deposit_reward_token(IERC20 rewardToken, uint256 amount) external;
 
-    function claimable_reward(address rewardToken, address user) external view returns (uint256);
+    function claimable_reward(address rewardToken, address user) external returns (uint256);
 
     function claimable_reward_write(address rewardToken, address user) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol
--- interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol	2022-11-22 00:28:06.000000000 -0800
@@ -29,9 +29,9 @@
     ) external;
 
     // solhint-disable-next-line func-name-mixedcase
-    function lp_token() external view returns (IERC20);
+    function lp_token() external returns (IERC20);
 
-    function reward_contract() external view returns (IChildChainStreamer);
+    function reward_contract() external returns (IChildChainStreamer);
 
     function set_rewards(
         address childChainStreamer,
@@ -39,5 +39,5 @@
         address[8] calldata rewardTokens
     ) external;
 
-    function last_claim() external view returns (uint256);
+    function last_claim() external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol
--- interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,5 +15,5 @@
 pragma solidity ^0.7.0;
 
 interface ISmartWalletChecker {
-    function check(address contractAddress) external view returns (bool);
+    function check(address contractAddress) external returns (bool);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IStakelessGauge.sol interfaces/contracts/liquidity-mining/IStakelessGauge.sol
--- interfaces/contracts/liquidity-mining/IStakelessGauge.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IStakelessGauge.sol	2022-11-22 00:28:06.000000000 -0800
@@ -19,5 +19,5 @@
 interface IStakelessGauge is ILiquidityGauge {
     function checkpoint() external payable returns (bool);
 
-    function getRecipient() external view returns (address);
+    function getRecipient() external returns (address);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol
--- interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol	2022-11-22 00:28:06.000000000 -0800
@@ -27,7 +27,7 @@
 interface IStakingLiquidityGauge is IRewardTokenDistributor, ILiquidityGauge, IERC20 {
     function initialize(address lpToken, uint256 relativeWeightCap) external;
 
-    function lp_token() external view returns (IERC20);
+    function lp_token() external returns (IERC20);
 
     function deposit(uint256 value, address recipient) external;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IVeDelegation.sol interfaces/contracts/liquidity-mining/IVeDelegation.sol
--- interfaces/contracts/liquidity-mining/IVeDelegation.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IVeDelegation.sol	2022-11-22 00:28:06.000000000 -0800
@@ -20,5 +20,5 @@
 
 interface IVeDelegation {
     // solhint-disable-next-line func-name-mixedcase
-    function adjusted_balance_of(address user) external view returns (uint256);
+    function adjusted_balance_of(address user) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/liquidity-mining/IVotingEscrow.sol interfaces/contracts/liquidity-mining/IVotingEscrow.sol
--- interfaces/contracts/liquidity-mining/IVotingEscrow.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/liquidity-mining/IVotingEscrow.sol	2022-11-22 00:28:06.000000000 -0800
@@ -29,21 +29,21 @@
         uint256 blk; // block
     }
 
-    function epoch() external view returns (uint256);
+    function epoch() external returns (uint256);
 
-    function totalSupply(uint256 timestamp) external view returns (uint256);
+    function totalSupply(uint256 timestamp) external returns (uint256);
 
-    function user_point_epoch(address user) external view returns (uint256);
+    function user_point_epoch(address user) external returns (uint256);
 
-    function point_history(uint256 timestamp) external view returns (Point memory);
+    function point_history(uint256 timestamp) external returns (Point memory);
 
-    function user_point_history(address user, uint256 timestamp) external view returns (Point memory);
+    function user_point_history(address user, uint256 timestamp) external returns (Point memory);
 
     function checkpoint() external;
 
-    function admin() external view returns (IAuthorizerAdaptor);
+    function admin() external returns (IAuthorizerAdaptor);
 
-    function smart_wallet_checker() external view returns (address);
+    function smart_wallet_checker() external returns (address);
 
     function commit_smart_wallet_checker(address newSmartWalletChecker) external;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-linear/IAToken.sol interfaces/contracts/pool-linear/IAToken.sol
--- interfaces/contracts/pool-linear/IAToken.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/pool-linear/IAToken.sol	2022-11-22 00:28:06.000000000 -0800
@@ -19,5 +19,5 @@
      * @dev returns the address of the aToken's underlying asset
      */
     // solhint-disable-next-line func-name-mixedcase
-    function UNDERLYING_ASSET_ADDRESS() external view returns (address);
+    function UNDERLYING_ASSET_ADDRESS() external returns (address);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-linear/IButtonWrapper.sol interfaces/contracts/pool-linear/IButtonWrapper.sol
--- interfaces/contracts/pool-linear/IButtonWrapper.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/pool-linear/IButtonWrapper.sol	2022-11-22 00:28:06.000000000 -0800
@@ -98,23 +98,23 @@
     function withdrawAllTo(address to) external returns (uint256);
 
     //--------------------------------------------------------------------------
-    // ButtonWrapper view methods
+    // ButtonWrappermethods
 
     /// @return The address of the underlying token.
-    function underlying() external view returns (address);
+    function underlying() external returns (address);
 
     /// @return The total underlying tokens held by the wrapper contract.
-    function totalUnderlying() external view returns (uint256);
+    function totalUnderlying() external returns (uint256);
 
     /// @param who The account address.
     /// @return The underlying token balance of the account.
-    function balanceOfUnderlying(address who) external view returns (uint256);
+    function balanceOfUnderlying(address who) external returns (uint256);
 
     /// @param uAmount The amount of underlying tokens.
     /// @return The amount of wrapper tokens exchangeable.
-    function underlyingToWrapper(uint256 uAmount) external view returns (uint256);
+    function underlyingToWrapper(uint256 uAmount) external returns (uint256);
 
     /// @param amount The amount of wrapper tokens.
     /// @return The amount of underlying tokens exchangeable.
-    function wrapperToUnderlying(uint256 amount) external view returns (uint256);
+    function wrapperToUnderlying(uint256 amount) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-linear/ILendingPool.sol interfaces/contracts/pool-linear/ILendingPool.sol
--- interfaces/contracts/pool-linear/ILendingPool.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/pool-linear/ILendingPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -18,5 +18,5 @@
     /**
      * @dev returns a 27 decimal fixed point 'ray' value so a rate of 1 is represented as 1e27
      */
-    function getReserveNormalizedIncome(address asset) external view returns (uint256);
+    function getReserveNormalizedIncome(address asset) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-linear/ILinearPool.sol interfaces/contracts/pool-linear/ILinearPool.sol
--- interfaces/contracts/pool-linear/ILinearPool.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/pool-linear/ILinearPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -22,32 +22,32 @@
     /**
      * @dev Returns the Pool's main token.
      */
-    function getMainToken() external view returns (IERC20);
+    function getMainToken() external returns (IERC20);
 
     /**
      * @dev Returns the Pool's wrapped token.
      */
-    function getWrappedToken() external view returns (IERC20);
+    function getWrappedToken() external returns (IERC20);
 
     /**
      * @dev Returns the index of the Pool's BPT in the Pool tokens array (as returned by IVault.getPoolTokens).
      */
-    function getBptIndex() external view returns (uint256);
+    function getBptIndex() external returns (uint256);
 
     /**
      * @dev Returns the index of the Pool's main token in the Pool tokens array (as returned by IVault.getPoolTokens).
      */
-    function getMainIndex() external view returns (uint256);
+    function getMainIndex() external returns (uint256);
 
     /**
      * @dev Returns the index of the Pool's wrapped token in the Pool tokens array (as returned by
      * IVault.getPoolTokens).
      */
-    function getWrappedIndex() external view returns (uint256);
+    function getWrappedIndex() external returns (uint256);
 
     /**
      * @dev Returns the Pool's targets for the main token balance. These values have had the main token's scaling
      * factor applied to them.
      */
-    function getTargets() external view returns (uint256 lowerTarget, uint256 upperTarget);
+    function getTargets() external returns (uint256 lowerTarget, uint256 upperTarget);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-linear/IStaticAToken.sol interfaces/contracts/pool-linear/IStaticAToken.sol
--- interfaces/contracts/pool-linear/IStaticAToken.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/pool-linear/IStaticAToken.sol	2022-11-22 00:28:06.000000000 -0800
@@ -21,18 +21,18 @@
      * @dev returns the address of the staticAToken's underlying asset
      */
     // solhint-disable-next-line func-name-mixedcase
-    function ASSET() external view returns (address);
+    function ASSET() external returns (address);
 
     /**
      * @dev returns the address of the staticAToken's lending pool
      */
     // solhint-disable-next-line func-name-mixedcase
-    function LENDING_POOL() external view returns (ILendingPool);
+    function LENDING_POOL() external returns (ILendingPool);
 
     /**
      * @dev returns a 27 decimal fixed point 'ray' value so a rate of 1 is represented as 1e27
      */
-    function rate() external view returns (uint256);
+    function rate() external returns (uint256);
 
     function deposit(
         address,
@@ -47,5 +47,5 @@
         bool
     ) external returns (uint256, uint256);
 
-    function staticToDynamicAmount(uint256 amount) external view returns (uint256);
+    function staticToDynamicAmount(uint256 amount) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-utils/IAssetManager.sol interfaces/contracts/pool-utils/IAssetManager.sol
--- interfaces/contracts/pool-utils/IAssetManager.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/pool-utils/IAssetManager.sol	2022-11-22 00:28:06.000000000 -0800
@@ -36,24 +36,24 @@
     /**
      * @notice Returns the asset manager's token
      */
-    function getToken() external view returns (IERC20);
+    function getToken() external returns (IERC20);
 
     /**
      * @return the current assets under management of this asset manager
      */
-    function getAUM(bytes32 poolId) external view returns (uint256);
+    function getAUM(bytes32 poolId) external returns (uint256);
 
     /**
      * @return poolCash - The up-to-date cash balance of the pool
      * @return poolManaged - The up-to-date managed balance of the pool
      */
-    function getPoolBalances(bytes32 poolId) external view returns (uint256 poolCash, uint256 poolManaged);
+    function getPoolBalances(bytes32 poolId) external returns (uint256 poolCash, uint256 poolManaged);
 
     /**
      * @return The difference in tokens between the target investment
      * and the currently invested amount (i.e. the amount that can be invested)
      */
-    function maxInvestableBalance(bytes32 poolId) external view returns (int256);
+    function maxInvestableBalance(bytes32 poolId) external returns (int256);
 
     /**
      * @notice Updates the Vault on the value of the pool's investment returns
@@ -63,7 +63,7 @@
     /**
      * @notice Determines whether the pool should rebalance given the provided balances
      */
-    function shouldRebalance(uint256 cash, uint256 managed) external view returns (bool);
+    function shouldRebalance(uint256 cash, uint256 managed) external returns (bool);
 
     /**
      * @notice Rebalances funds between the pool and the asset manager to maintain target investment percentage.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-utils/IBasePoolFactory.sol interfaces/contracts/pool-utils/IBasePoolFactory.sol
--- interfaces/contracts/pool-utils/IBasePoolFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/pool-utils/IBasePoolFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -21,12 +21,12 @@
     /**
      * @dev Returns true if `pool` was created by this factory.
      */
-    function isPoolFromFactory(address pool) external view returns (bool);
+    function isPoolFromFactory(address pool) external returns (bool);
 
     /**
      * @dev Check whether the derived factory has been disabled.
      */
-    function isDisabled() external view returns (bool);
+    function isDisabled() external returns (bool);
 
     /**
      * @dev Disable the factory, preventing the creation of more pools. Already existing pools are unaffected.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol
--- interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "./IBasePoolFactory.sol";
+import "./IBasePoolSplitCodeFactory.sol";
 
-interface ILastCreatedPoolFactory is IBasePoolFactory {
+interface ILastCreatedPoolFactory is IBasePoolSplitCodeFactory {
     /**
      * @dev Returns the address of the last Pool created by this factory.
      *
      * This is typically only useful in complex Pool deployment schemes, where multiple subsystems need to know about
      * each other. Note that this value will only be updated once construction of the last created Pool finishes.
      */
-    function getLastCreatedPool() external view returns (address);
+    function getLastCreatedPool() external returns (address);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-utils/IRateProvider.sol interfaces/contracts/pool-utils/IRateProvider.sol
--- interfaces/contracts/pool-utils/IRateProvider.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/pool-utils/IRateProvider.sol	2022-11-22 00:28:06.000000000 -0800
@@ -19,5 +19,5 @@
      * @dev Returns an 18 decimal fixed point number that is the exchange rate of the token to some other underlying
      * token. The meaning of this rate depends on the context.
      */
-    function getRate() external view returns (uint256);
+    function getRate() external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/pool-utils/IRecoveryMode.sol interfaces/contracts/pool-utils/IRecoveryMode.sol
--- interfaces/contracts/pool-utils/IRecoveryMode.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/pool-utils/IRecoveryMode.sol	2022-11-22 00:28:06.000000000 -0800
@@ -37,5 +37,5 @@
     /**
      * @notice Returns true if the Pool is in Recovery Mode.
      */
-    function inRecoveryMode() external view returns (bool);
+    function inRecoveryMode() external returns (bool);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/helpers/IAuthentication.sol interfaces/contracts/solidity-utils/helpers/IAuthentication.sol
--- interfaces/contracts/solidity-utils/helpers/IAuthentication.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/solidity-utils/helpers/IAuthentication.sol	2022-11-22 00:28:06.000000000 -0800
@@ -18,5 +18,5 @@
     /**
      * @dev Returns the action identifier associated with the external function described by `selector`.
      */
-    function getActionId(bytes4 selector) external view returns (bytes32);
+    function getActionId(bytes4 selector) external returns (bytes32);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol
--- interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol	2022-11-22 00:28:06.000000000 -0800
@@ -39,5 +39,5 @@
     /**
      * @dev Returns true if caller verification is enabled for the given user, false otherwise.
      */
-    function isOnlyCallerEnabled(address user) external view returns (bool);
+    function isOnlyCallerEnabled(address user) external returns (bool);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol
--- interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol	2022-11-22 00:28:06.000000000 -0800
@@ -21,10 +21,10 @@
     /**
      * @dev Returns the EIP712 domain separator.
      */
-    function getDomainSeparator() external view returns (bytes32);
+    function getDomainSeparator() external returns (bytes32);
 
     /**
      * @dev Returns the next nonce used by an address to sign messages.
      */
-    function getNextNonce(address user) external view returns (uint256);
+    function getNextNonce(address user) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol
--- interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol	2022-11-22 00:28:06.000000000 -0800
@@ -28,7 +28,6 @@
      */
     function getPausedState()
         external
-        view
         returns (
             bool paused,
             uint256 pauseWindowEndTime,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/misc/IERC4626.sol interfaces/contracts/solidity-utils/misc/IERC4626.sol
--- interfaces/contracts/solidity-utils/misc/IERC4626.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/solidity-utils/misc/IERC4626.sol	2022-11-22 00:28:06.000000000 -0800
@@ -51,22 +51,22 @@
     /**
      * @dev The address of the underlying token that the Vault uses for accounting, depositing, and withdrawing.
      */
-    function asset() external view returns (address);
+    function asset() external returns (address);
 
     /**
      * @dev Total amount of the underlying asset that is “managed” by Vault.
      */
-    function totalAssets() external view returns (uint256);
+    function totalAssets() external returns (uint256);
 
     /**
      * @dev The amount of `assets` that the Vault would exchange for the amount
      *      of `shares` provided, in an ideal scenario where all the conditions are met.
      */
-    function convertToAssets(uint256 shares) external view returns (uint256 assets);
+    function convertToAssets(uint256 shares) external returns (uint256 assets);
 
     /**
      * @dev The amount of `shares` that the Vault would exchange for the amount
      *      of `assets` provided, in an ideal scenario where all the conditions are met.
      */
-    function convertToShares(uint256 assets) external view returns (uint256 shares);
+    function convertToShares(uint256 assets) external returns (uint256 shares);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol
--- interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,5 +15,5 @@
      * @param hash      Hash of the data to be signed
      * @param signature Signature byte array associated with _data
      */
-    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);
+    function isValidSignature(bytes32 hash, bytes memory signature) external returns (bytes4 magicValue);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol
--- interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol	2022-11-22 00:28:06.000000000 -0800
@@ -9,12 +9,12 @@
     /**
      * @dev Returns the amount of tokens in existence.
      */
-    function totalSupply() external view returns (uint256);
+    function totalSupply() external returns (uint256);
 
     /**
      * @dev Returns the amount of tokens owned by `account`.
      */
-    function balanceOf(address account) external view returns (uint256);
+    function balanceOf(address account) external returns (uint256);
 
     /**
      * @dev Moves `amount` tokens from the caller's account to `recipient`.
@@ -32,7 +32,7 @@
      *
      * This value changes when {approve} or {transferFrom} are called.
      */
-    function allowance(address owner, address spender) external view returns (uint256);
+    function allowance(address owner, address spender) external returns (uint256);
 
     /**
      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol
--- interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol	2022-11-22 00:28:06.000000000 -0800
@@ -49,11 +49,11 @@
      * Every successful call to {permit} increases ``owner``'s nonce by one. This
      * prevents a signature from being used multiple times.
      */
-    function nonces(address owner) external view returns (uint256);
+    function nonces(address owner) external returns (uint256);
 
     /**
      * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.
      */
     // solhint-disable-next-line func-name-mixedcase
-    function DOMAIN_SEPARATOR() external view returns (bytes32);
+    function DOMAIN_SEPARATOR() external returns (bytes32);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IBALTokenHolder.sol interfaces/contracts/standalone-utils/IBALTokenHolder.sol
--- interfaces/contracts/standalone-utils/IBALTokenHolder.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/standalone-utils/IBALTokenHolder.sol	2022-11-22 00:28:06.000000000 -0800
@@ -18,7 +18,7 @@
 import "../solidity-utils/openzeppelin/IERC20.sol";
 
 interface IBALTokenHolder is IAuthentication {
-    function getName() external view returns (string memory);
+    function getName() external returns (string memory);
 
     function withdrawFunds(address recipient, uint256 amount) external;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol
--- interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -20,11 +20,11 @@
 import "./IBALTokenHolder.sol";
 
 interface IBALTokenHolderFactory {
-    function getBalancerToken() external view returns (IBalancerToken);
+    function getBalancerToken() external returns (IBalancerToken);
 
-    function getVault() external view returns (IVault);
+    function getVault() external returns (IVault);
 
-    function isHolderFromFactory(address holder) external view returns (bool);
+    function isHolderFromFactory(address holder) external returns (bool);
 
     function create(string memory name) external returns (IBALTokenHolder);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IBalancerRelayer.sol interfaces/contracts/standalone-utils/IBalancerRelayer.sol
--- interfaces/contracts/standalone-utils/IBalancerRelayer.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/standalone-utils/IBalancerRelayer.sol	2022-11-22 00:28:06.000000000 -0800
@@ -22,9 +22,9 @@
  * @notice Allows safe multicall execution of a relayer's functions
  */
 interface IBalancerRelayer {
-    function getLibrary() external view returns (address);
+    function getLibrary() external returns (address);
 
-    function getVault() external view returns (IVault);
+    function getVault() external returns (IVault);
 
     function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol
--- interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol	2022-11-22 00:28:06.000000000 -0800
@@ -51,12 +51,12 @@
     /**
      * @dev Returns true if `feeType` has been registered and can be queried.
      */
-    function isValidFeeType(uint256 feeType) external view returns (bool);
+    function isValidFeeType(uint256 feeType) external returns (bool);
 
     /**
      * @dev Returns true if `value` is a valid percentage value for `feeType`.
      */
-    function isValidFeeTypePercentage(uint256 feeType, uint256 value) external view returns (bool);
+    function isValidFeeTypePercentage(uint256 feeType, uint256 value) external returns (bool);
 
     /**
      * @dev Sets the percentage value for `feeType` to `newValue`.
@@ -73,17 +73,17 @@
      * @dev Returns the current percentage value for `feeType`. This is the preferred mechanism for querying these -
      * whenever possible, use this fucntion instead of e.g. querying the ProtocolFeesCollector.
      */
-    function getFeeTypePercentage(uint256 feeType) external view returns (uint256);
+    function getFeeTypePercentage(uint256 feeType) external returns (uint256);
 
     /**
      * @dev Returns `feeType`'s maximum value.
      */
-    function getFeeTypeMaximumPercentage(uint256 feeType) external view returns (uint256);
+    function getFeeTypeMaximumPercentage(uint256 feeType) external returns (uint256);
 
     /**
      * @dev Returns `feeType`'s name.
      */
-    function getFeeTypeName(uint256 feeType) external view returns (string memory);
+    function getFeeTypeName(uint256 feeType) external returns (string memory);
 }
 
 library ProtocolFeeType {
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol
--- interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol	2022-11-22 00:28:06.000000000 -0800
@@ -30,28 +30,28 @@
     /**
      * @notice Returns the address of the Protocol Fee Collector.
      */
-    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);
+    function getProtocolFeesCollector() external returns (IProtocolFeesCollector);
 
     /**
      * @notice Returns whether the provided token may be withdrawn from the Protocol Fee Collector
      */
-    function isWithdrawableToken(IERC20 token) external view returns (bool);
+    function isWithdrawableToken(IERC20 token) external returns (bool);
 
     /**
      * @notice Returns whether the provided array of tokens may be withdrawn from the Protocol Fee Collector
      * @dev Returns false if any token is denylisted.
      */
-    function isWithdrawableTokens(IERC20[] calldata tokens) external view returns (bool);
+    function isWithdrawableTokens(IERC20[] calldata tokens) external returns (bool);
 
     /**
      * @notice Returns the denylisted token at the given `index`.
      */
-    function getDenylistedToken(uint256 index) external view returns (IERC20);
+    function getDenylistedToken(uint256 index) external returns (IERC20);
 
     /**
      * @notice Returns the number of denylisted tokens.
      */
-    function getDenylistedTokensLength() external view returns (uint256);
+    function getDenylistedTokensLength() external returns (uint256);
 
     /**
      * @notice Withdraws fees from the Protocol Fee Collector.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IStaticATokenLM.sol interfaces/contracts/standalone-utils/IStaticATokenLM.sol
--- interfaces/contracts/standalone-utils/IStaticATokenLM.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/standalone-utils/IStaticATokenLM.sol	2022-11-22 00:28:06.000000000 -0800
@@ -140,7 +140,7 @@
      * @param account The address of the user
      * @return uint256 The aToken balance
      **/
-    function dynamicBalanceOf(address account) external view returns (uint256);
+    function dynamicBalanceOf(address account) external returns (uint256);
 
     /**
      * @notice Converts a static amount (scaled balance on aToken) to the aToken/underlying value,
@@ -148,7 +148,7 @@
      * @param amount The amount to convert from
      * @return uint256 The dynamic amount
      **/
-    function staticToDynamicAmount(uint256 amount) external view returns (uint256);
+    function staticToDynamicAmount(uint256 amount) external returns (uint256);
 
     /**
      * @notice Converts an aToken or underlying amount to the what it is denominated on the aToken as
@@ -156,20 +156,20 @@
      * @param amount The amount to convert from
      * @return uint256 The static (scaled) amount
      **/
-    function dynamicToStaticAmount(uint256 amount) external view returns (uint256);
+    function dynamicToStaticAmount(uint256 amount) external returns (uint256);
 
     /**
      * @notice Returns the Aave liquidity index of the underlying aToken, denominated rate here
      * as it can be considered as an ever-increasing exchange rate
      * @return The liquidity index
      **/
-    function rate() external view returns (uint256);
+    function rate() external returns (uint256);
 
     /**
      * @notice Function to return a dynamic domain separator, in order to be compatible with forks changing chainId
      * @return bytes32 The domain separator
      **/
-    function getDomainSeparator() external view returns (bytes32);
+    function getDomainSeparator() external returns (bytes32);
 
     /**
      * @notice Claims rewards from `INCENTIVES_CONTROLLER` and updates internal accounting of rewards.
@@ -206,29 +206,29 @@
      * @notice Get the total claimable rewards of the contract.
      * @return The current balance + pending rewards from the `_incentivesController`
      */
-    function getTotalClaimableRewards() external view returns (uint256);
+    function getTotalClaimableRewards() external returns (uint256);
 
     /**
      * @notice Get the total claimable rewards for a user in WAD
      * @param user The address of the user
      * @return The claimable amount of rewards in WAD
      */
-    function getClaimableRewards(address user) external view returns (uint256);
+    function getClaimableRewards(address user) external returns (uint256);
 
     /**
      * @notice The unclaimed rewards for a user in WAD
      * @param user The address of the user
      * @return The unclaimed amount of rewards in WAD
      */
-    function getUnclaimedRewards(address user) external view returns (uint256);
+    function getUnclaimedRewards(address user) external returns (uint256);
 
-    function getAccRewardsPerToken() external view returns (uint256);
+    function getAccRewardsPerToken() external returns (uint256);
 
-    function getLifetimeRewardsClaimed() external view returns (uint256);
+    function getLifetimeRewardsClaimed() external returns (uint256);
 
-    function getLifetimeRewards() external view returns (uint256);
+    function getLifetimeRewards() external returns (uint256);
 
-    function getLastRewardBlock() external view returns (uint256);
+    function getLastRewardBlock() external returns (uint256);
 
     // solhint-disable-next-line func-name-mixedcase
     function LENDING_POOL() external returns (address);
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/standalone-utils/IwstETH.sol interfaces/contracts/standalone-utils/IwstETH.sol
--- interfaces/contracts/standalone-utils/IwstETH.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/standalone-utils/IwstETH.sol	2022-11-22 00:28:06.000000000 -0800
@@ -69,24 +69,24 @@
      * @param _stETHAmount amount of stETH
      * @return Amount of wstETH for a given stETH amount
      */
-    function getWstETHByStETH(uint256 _stETHAmount) external view returns (uint256);
+    function getWstETHByStETH(uint256 _stETHAmount) external returns (uint256);
 
     /**
      * @notice Get amount of stETH for a given amount of wstETH
      * @param _wstETHAmount amount of wstETH
      * @return Amount of stETH for a given wstETH amount
      */
-    function getStETHByWstETH(uint256 _wstETHAmount) external view returns (uint256);
+    function getStETHByWstETH(uint256 _wstETHAmount) external returns (uint256);
 
     /**
      * @notice Get amount of wstETH for a one stETH
      * @return Amount of stETH for 1 wstETH
      */
-    function stEthPerToken() external view returns (uint256);
+    function stEthPerToken() external returns (uint256);
 
     /**
      * @notice Get amount of stETH for a one wstETH
      * @return Amount of wstETH for a 1 stETH
      */
-    function tokensPerStEth() external view returns (uint256);
+    function tokensPerStEth() external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/vault/IAuthorizer.sol interfaces/contracts/vault/IAuthorizer.sol
--- interfaces/contracts/vault/IAuthorizer.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/vault/IAuthorizer.sol	2022-11-22 00:28:06.000000000 -0800
@@ -22,5 +22,5 @@
         bytes32 actionId,
         address account,
         address where
-    ) external view returns (bool);
+    ) external returns (bool);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/vault/IBasePool.sol interfaces/contracts/vault/IBasePool.sol
--- interfaces/contracts/vault/IBasePool.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/vault/IBasePool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -90,19 +90,19 @@
     /**
      * @dev Returns this Pool's ID, used when interacting with the Vault (to e.g. join the Pool or swap with it).
      */
-    function getPoolId() external view returns (bytes32);
+    function getPoolId() external returns (bytes32);
 
     /**
      * @dev Returns the current swap fee percentage as a 18 decimal fixed point number, so e.g. 1e17 corresponds to a
      * 10% swap fee.
      */
-    function getSwapFeePercentage() external view returns (uint256);
+    function getSwapFeePercentage() external returns (uint256);
 
     /**
      * @dev Returns the scaling factors of each of the Pool's tokens. This is an implementation detail that is typically
      * not relevant for outside parties, but which might be useful for some types of Pools.
      */
-    function getScalingFactors() external view returns (uint256[] memory);
+    function getScalingFactors() external returns (uint256[] memory);
 
     function queryJoin(
         bytes32 poolId,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/vault/IBasicAuthorizer.sol interfaces/contracts/vault/IBasicAuthorizer.sol
--- interfaces/contracts/vault/IBasicAuthorizer.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/vault/IBasicAuthorizer.sol	2022-11-22 00:28:06.000000000 -0800
@@ -18,9 +18,9 @@
     // solhint-disable-next-line func-name-mixedcase
     function DEFAULT_ADMIN_ROLE() external returns (bytes32);
 
-    function getRoleAdmin(bytes32 role) external view returns (bytes32);
+    function getRoleAdmin(bytes32 role) external returns (bytes32);
 
-    function getRoleMember(bytes32 role, uint256 index) external view returns (address);
+    function getRoleMember(bytes32 role, uint256 index) external returns (address);
 
-    function getRoleMemberCount(bytes32 role) external view returns (uint256);
+    function getRoleMemberCount(bytes32 role) external returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/vault/IProtocolFeesCollector.sol interfaces/contracts/vault/IProtocolFeesCollector.sol
--- interfaces/contracts/vault/IProtocolFeesCollector.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/vault/IProtocolFeesCollector.sol	2022-11-22 00:28:06.000000000 -0800
@@ -34,13 +34,13 @@
 
     function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;
 
-    function getSwapFeePercentage() external view returns (uint256);
+    function getSwapFeePercentage() external returns (uint256);
 
-    function getFlashLoanFeePercentage() external view returns (uint256);
+    function getFlashLoanFeePercentage() external returns (uint256);
 
-    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);
+    function getCollectedFeeAmounts(IERC20[] memory tokens) external returns (uint256[] memory feeAmounts);
 
-    function getAuthorizer() external view returns (IAuthorizer);
+    function getAuthorizer() external returns (IAuthorizer);
 
-    function vault() external view returns (IVault);
+    function vault() external returns (IVault);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts interfaces/contracts/vault/IVault.sol interfaces/contracts/vault/IVault.sol
--- interfaces/contracts/vault/IVault.sol	2022-11-21 22:55:10.000000000 -0800
+++ interfaces/contracts/vault/IVault.sol	2022-11-22 00:28:06.000000000 -0800
@@ -43,9 +43,9 @@
     // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.
     // while execution control is transferred to a token contract during a swap) will result in a revert. View
     // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.
-    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.
+    // Contracts callingfunctions in the Vault must make sure the Vault has not already been entered.
     //
-    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.
+    // -functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.
 
     // Authorizer
     //
@@ -56,7 +56,7 @@
     /**
      * @dev Returns the Vault's Authorizer.
      */
-    function getAuthorizer() external view returns (IAuthorizer);
+    function getAuthorizer() external returns (IAuthorizer);
 
     /**
      * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.
@@ -87,7 +87,7 @@
     /**
      * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.
      */
-    function hasApprovedRelayer(address user, address relayer) external view returns (bool);
+    function hasApprovedRelayer(address user, address relayer) external returns (bool);
 
     /**
      * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.
@@ -118,7 +118,7 @@
     /**
      * @dev Returns `user`'s Internal Balance for a set of tokens.
      */
-    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);
+    function getInternalBalance(address user, IERC20[] memory tokens) external returns (uint256[] memory);
 
     /**
      * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)
@@ -237,7 +237,7 @@
     /**
      * @dev Returns a Pool's contract address and specialization setting.
      */
-    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);
+    function getPool(bytes32 poolId) external returns (address, PoolSpecialization);
 
     /**
      * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.
@@ -309,7 +309,7 @@
      */
     function getPoolTokenInfo(bytes32 poolId, IERC20 token)
         external
-        view
+       
         returns (
             uint256 cash,
             uint256 managed,
@@ -333,7 +333,7 @@
      */
     function getPoolTokens(bytes32 poolId)
         external
-        view
+       
         returns (
             IERC20[] memory tokens,
             uint256[] memory balances,
@@ -745,7 +745,7 @@
     /**
      * @dev Returns the current protocol fee module.
      */
-    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);
+    function getProtocolFeesCollector() external returns (IProtocolFeesCollector);
 
     /**
      * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an
@@ -767,6 +767,6 @@
     /**
      * @dev Returns the Vault's WETH instance.
      */
-    function WETH() external view returns (IWETH);
+    function WETH() external returns (IWETH);
     // solhint-disable-previous-line func-name-mixedcase
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/BalancerMinter.sol liquidity-mining/contracts/BalancerMinter.sol
--- liquidity-mining/contracts/BalancerMinter.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/BalancerMinter.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,15 +14,15 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeController.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeController.sol";
+import "../../interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeMath.sol";
+import "../../solidity-utils/contracts/openzeppelin/EIP712.sol";
+import "../../solidity-utils/contracts/helpers/EOASignaturesValidator.sol";
 
 contract BalancerMinter is IBalancerMinter, ReentrancyGuard, EOASignaturesValidator {
     using SafeMath for uint256;
@@ -52,21 +52,21 @@
     /**
      * @notice Returns the address of the Balancer Governance Token
      */
-    function getBalancerToken() external view override returns (IERC20) {
+    function getBalancerToken() external override returns (IERC20) {
         return _token;
     }
 
     /**
      * @notice Returns the address of the Balancer Token Admin contract
      */
-    function getBalancerTokenAdmin() external view override returns (IBalancerTokenAdmin) {
+    function getBalancerTokenAdmin() external override returns (IBalancerTokenAdmin) {
         return _tokenAdmin;
     }
 
     /**
      * @notice Returns the address of the Gauge Controller
      */
-    function getGaugeController() external view override returns (IGaugeController) {
+    function getGaugeController() external override returns (IGaugeController) {
         return _gaugeController;
     }
 
@@ -111,14 +111,14 @@
     /**
      * @notice The total number of tokens minted for `user` from `gauge`
      */
-    function minted(address user, address gauge) external view override returns (uint256) {
+    function minted(address user, address gauge) external override returns (uint256) {
         return _minted[user][gauge];
     }
 
     /**
      * @notice Whether `minter` is approved to mint tokens for `user`
      */
-    function getMinterApproval(address minter, address user) external view override returns (bool) {
+    function getMinterApproval(address minter, address user) external override returns (bool) {
         return _allowedMinter[minter][user];
     }
 
@@ -200,7 +200,7 @@
     /**
      * @notice Whether `minter` is approved to mint tokens for `user`
      */
-    function allowed_to_mint_for(address minter, address user) external view override returns (bool) {
+    function allowed_to_mint_for(address minter, address user) external override returns (bool) {
         return _allowedMinter[minter][user];
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/BalancerTokenAdmin.sol liquidity-mining/contracts/BalancerTokenAdmin.sol
--- liquidity-mining/contracts/BalancerTokenAdmin.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/BalancerTokenAdmin.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // solhint-disable not-rely-on-time
 
@@ -60,7 +60,7 @@
     /**
      * @dev Returns the Balancer token.
      */
-    function getBalancerToken() external view override returns (IBalancerToken) {
+    function getBalancerToken() external override returns (IBalancerToken) {
         return _balancerToken;
     }
 
@@ -167,42 +167,42 @@
     /**
      * @notice Returns the current epoch number.
      */
-    function getMiningEpoch() external view returns (uint256) {
+    function getMiningEpoch() external returns (uint256) {
         return _miningEpoch;
     }
 
     /**
      * @notice Returns the start timestamp of the current epoch.
      */
-    function getStartEpochTime() external view returns (uint256) {
+    function getStartEpochTime() external returns (uint256) {
         return _startEpochTime;
     }
 
     /**
      * @notice Returns the start timestamp of the next epoch.
      */
-    function getFutureEpochTime() external view returns (uint256) {
+    function getFutureEpochTime() external returns (uint256) {
         return _startEpochTime.add(RATE_REDUCTION_TIME);
     }
 
     /**
      * @notice Returns the available supply at the beginning of the current epoch.
      */
-    function getStartEpochSupply() external view returns (uint256) {
+    function getStartEpochSupply() external returns (uint256) {
         return _startEpochSupply;
     }
 
     /**
      * @notice Returns the current inflation rate of BAL per second
      */
-    function getInflationRate() external view returns (uint256) {
+    function getInflationRate() external returns (uint256) {
         return _rate;
     }
 
     /**
      * @notice Maximum allowable number of tokens in existence (claimed or unclaimed)
      */
-    function getAvailableSupply() external view returns (uint256) {
+    function getAvailableSupply() external returns (uint256) {
         return _availableSupply();
     }
 
@@ -238,7 +238,7 @@
      * @param end End of the time interval (timestamp)
      * @return Tokens mintable from `start` till `end`
      */
-    function mintableInTimeframe(uint256 start, uint256 end) external view returns (uint256) {
+    function mintableInTimeframe(uint256 start, uint256 end) external returns (uint256) {
         return _mintableInTimeframe(start, end);
     }
 
@@ -247,7 +247,7 @@
     /**
      * @notice Maximum allowable number of tokens in existence (claimed or unclaimed)
      */
-    function _availableSupply() internal view returns (uint256) {
+    function _availableSupply() internal returns (uint256) {
         uint256 newSupplyFromCurrentEpoch = (block.timestamp.sub(_startEpochTime)).mul(_rate);
         return _startEpochSupply.add(newSupplyFromCurrentEpoch);
     }
@@ -284,7 +284,7 @@
      * @param end End of the time interval (timestamp)
      * @return Tokens mintable from `start` till `end`
      */
-    function _mintableInTimeframe(uint256 start, uint256 end) internal view returns (uint256) {
+    function _mintableInTimeframe(uint256 start, uint256 end) internal returns (uint256) {
         require(start <= end, "start > end");
 
         uint256 currentEpochTime = _startEpochTime;
@@ -336,11 +336,11 @@
     // They are included for ABI compatibility with snake_casing as used in vyper contracts.
     // solhint-disable func-name-mixedcase
 
-    function rate() external view override returns (uint256) {
+    function rate() external override returns (uint256) {
         return _rate;
     }
 
-    function available_supply() external view returns (uint256) {
+    function available_supply() external returns (uint256) {
         return _availableSupply();
     }
 
@@ -376,7 +376,7 @@
      * @param end End of the time interval (timestamp)
      * @return Tokens mintable from `start` till `end`
      */
-    function mintable_in_timeframe(uint256 start, uint256 end) external view returns (uint256) {
+    function mintable_in_timeframe(uint256 start, uint256 end) external returns (uint256) {
         return _mintableInTimeframe(start, end);
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/SmartWalletChecker.sol liquidity-mining/contracts/SmartWalletChecker.sol
--- liquidity-mining/contracts/SmartWalletChecker.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/SmartWalletChecker.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
 
 contract SmartWalletChecker is ISmartWalletChecker, SingletonAuthentication {
     using EnumerableSet for EnumerableSet.AddressSet;
@@ -35,15 +35,15 @@
         }
     }
 
-    function check(address contractAddress) external view override returns (bool) {
+    function check(address contractAddress) external override returns (bool) {
         return _allowlistedAddresses.contains(contractAddress);
     }
 
-    function getAllowlistedAddress(uint256 index) external view returns (address) {
+    function getAllowlistedAddress(uint256 index) external returns (address) {
         return _allowlistedAddresses.at(index);
     }
 
-    function getAllowlistedAddressesLength() external view returns (uint256) {
+    function getAllowlistedAddressesLength() external returns (uint256) {
         return _allowlistedAddresses.length();
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/VotingEscrowDelegationProxy.sol liquidity-mining/contracts/VotingEscrowDelegationProxy.sol
--- liquidity-mining/contracts/VotingEscrowDelegationProxy.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/VotingEscrowDelegationProxy.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,10 +14,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IVeDelegation.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IVeDelegation.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
 
 contract VotingEscrowDelegationProxy is SingletonAuthentication {
     IERC20 private immutable _votingEscrow;
@@ -37,14 +37,14 @@
     /**
      * @notice Returns the current delegation implementation contract.
      */
-    function getDelegationImplementation() external view returns (IVeDelegation) {
+    function getDelegationImplementation() external returns (IVeDelegation) {
         return _delegation;
     }
 
     /**
      * @notice Returns the Voting Escrow (veBAL) contract.
      */
-    function getVotingEscrow() external view returns (IERC20) {
+    function getVotingEscrow() external returns (IERC20) {
         return _votingEscrow;
     }
 
@@ -53,7 +53,7 @@
      * @param user The user to query the adjusted veBAL balance of
      * @return veBAL balance
      */
-    function adjustedBalanceOf(address user) external view returns (uint256) {
+    function adjustedBalanceOf(address user) external returns (uint256) {
         return _adjustedBalanceOf(user);
     }
 
@@ -63,13 +63,13 @@
      * @return veBAL balance
      */
     // solhint-disable-next-line func-name-mixedcase
-    function adjusted_balance_of(address user) external view returns (uint256) {
+    function adjusted_balance_of(address user) external returns (uint256) {
         return _adjustedBalanceOf(user);
     }
 
     // Internal functions
 
-    function _adjustedBalanceOf(address user) internal view returns (uint256) {
+    function _adjustedBalanceOf(address user) internal returns (uint256) {
         IVeDelegation implementation = _delegation;
         if (implementation == IVeDelegation(0)) {
             return IERC20(_votingEscrow).balanceOf(user);
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/admin/AuthorizerAdaptor.sol liquidity-mining/contracts/admin/AuthorizerAdaptor.sol
--- liquidity-mining/contracts/admin/AuthorizerAdaptor.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/admin/AuthorizerAdaptor.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 /**
  * @title Authorizer Adaptor
@@ -46,14 +46,14 @@
     /**
      * @notice Returns the Balancer Vault
      */
-    function getVault() public view override returns (IVault) {
+    function getVault() public override returns (IVault) {
         return _vault;
     }
 
     /**
      * @notice Returns the Authorizer
      */
-    function getAuthorizer() public view override returns (IAuthorizer) {
+    function getAuthorizer() public override returns (IAuthorizer) {
         return getVault().getAuthorizer();
     }
 
@@ -61,7 +61,7 @@
         bytes32 actionId,
         address account,
         address where
-    ) internal view returns (bool) {
+    ) internal returns (bool) {
         return getAuthorizer().canPerform(actionId, account, where);
     }
 
@@ -74,7 +74,7 @@
      * @param selector - The 4 byte selector of the function to be called using `performAction`
      * @return The associated action ID
      */
-    function getActionId(bytes4 selector) public view override returns (bytes32) {
+    function getActionId(bytes4 selector) public override returns (bytes32) {
         return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol
--- liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
+import "../../interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
 
 /**
  * @title ChildChainGaugeTokenAdder
@@ -45,7 +45,7 @@
     /**
      * @notice Returns the address of the Authorizer adaptor contract.
      */
-    function getAuthorizerAdaptor() external view returns (IAuthorizerAdaptor) {
+    function getAuthorizerAdaptor() external returns (IAuthorizerAdaptor) {
         return _authorizerAdaptor;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/admin/DistributionScheduler.sol liquidity-mining/contracts/admin/DistributionScheduler.sol
--- liquidity-mining/contracts/admin/DistributionScheduler.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/admin/DistributionScheduler.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
+import "../../interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 // solhint-disable not-rely-on-time
 
@@ -55,7 +55,7 @@
         IRewardTokenDistributor gauge,
         IERC20 token,
         uint256 timestamp
-    ) external view returns (RewardNode memory) {
+    ) external returns (RewardNode memory) {
         return _rewardsLists[_getRewardsListId(gauge, token)][uint32(timestamp)];
     }
 
@@ -64,7 +64,7 @@
      * @param gauge - The gauge which is to distribute the reward token.
      * @param token - The token which is to be distributed among gauge depositors.
      */
-    function getPendingRewards(IRewardTokenDistributor gauge, IERC20 token) public view returns (uint256) {
+    function getPendingRewards(IRewardTokenDistributor gauge, IERC20 token) public returns (uint256) {
         return getPendingRewardsAt(gauge, token, block.timestamp);
     }
 
@@ -78,7 +78,7 @@
         IRewardTokenDistributor gauge,
         IERC20 token,
         uint256 timestamp
-    ) public view returns (uint256) {
+    ) public returns (uint256) {
         mapping(uint32 => RewardNode) storage rewardsList = _rewardsLists[_getRewardsListId(gauge, token)];
 
         (, uint256 amount) = _getPendingRewards(rewardsList, timestamp);
@@ -172,7 +172,7 @@
      */
     function _getPendingRewards(mapping(uint32 => RewardNode) storage rewardsList, uint256 targetKey)
         internal
-        view
+       
         returns (uint32, uint256)
     {
         uint32 currentNodeKey = rewardsList[_HEAD].nextTimestamp;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/admin/GaugeAdder.sol liquidity-mining/contracts/admin/GaugeAdder.sol
--- liquidity-mining/contracts/admin/GaugeAdder.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/admin/GaugeAdder.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,14 +14,14 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeAdder.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeAdder.sol";
+import "../../interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
 
 contract GaugeAdder is IGaugeAdder, SingletonAuthentication, ReentrancyGuard {
     using EnumerableSet for EnumerableSet.AddressSet;
@@ -51,14 +51,14 @@
     /**
      * @notice Returns the address of the Authorizer adaptor contract.
      */
-    function getAuthorizerAdaptor() external view returns (IAuthorizerAdaptor) {
+    function getAuthorizerAdaptor() external returns (IAuthorizerAdaptor) {
         return _authorizerAdaptor;
     }
 
     /**
      * @notice Returns the address of the Gauge Controller
      */
-    function getGaugeController() external view override returns (IGaugeController) {
+    function getGaugeController() external override returns (IGaugeController) {
         return _gaugeController;
     }
 
@@ -69,7 +69,7 @@
      * This function provides global information by using which gauge has been added to the Gauge Controller
      * to represent the canonical gauge for a given pool address.
      */
-    function getPoolGauge(IERC20 pool) public view override returns (ILiquidityGauge) {
+    function getPoolGauge(IERC20 pool) public override returns (ILiquidityGauge) {
         ILiquidityGauge gauge = _poolGauge[pool];
         if (gauge == ILiquidityGauge(0) && _previousGaugeAdder != IGaugeAdder(0)) {
             // It's possible that a gauge for this pool was added by a previous GaugeAdder,
@@ -82,21 +82,21 @@
     /**
      * @notice Returns the `index`'th factory for gauge type `gaugeType`
      */
-    function getFactoryForGaugeType(GaugeType gaugeType, uint256 index) external view override returns (address) {
+    function getFactoryForGaugeType(GaugeType gaugeType, uint256 index) external override returns (address) {
         return _gaugeFactoriesByType[gaugeType].at(index);
     }
 
     /**
      * @notice Returns the number of factories for gauge type `gaugeType`
      */
-    function getFactoryForGaugeTypeCount(GaugeType gaugeType) external view override returns (uint256) {
+    function getFactoryForGaugeTypeCount(GaugeType gaugeType) external override returns (uint256) {
         return _gaugeFactoriesByType[gaugeType].length();
     }
 
     /**
      * @notice Returns whether `gauge` has been deployed by one of the listed factories for the gauge type `gaugeType`
      */
-    function isGaugeFromValidFactory(address gauge, GaugeType gaugeType) public view override returns (bool) {
+    function isGaugeFromValidFactory(address gauge, GaugeType gaugeType) public override returns (bool) {
         EnumerableSet.AddressSet storage gaugeFactories = _gaugeFactoriesByType[gaugeType];
         uint256 gaugeFactoriesLength = gaugeFactories.length();
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/fee-distribution/FeeDistributor.sol liquidity-mining/contracts/fee-distribution/FeeDistributor.sol
--- liquidity-mining/contracts/fee-distribution/FeeDistributor.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/fee-distribution/FeeDistributor.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,16 +15,16 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IFeeDistributor.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IVotingEscrow.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/OptionalOnlyCaller.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
+import "../../interfaces/contracts/liquidity-mining/IFeeDistributor.sol";
+import "../../interfaces/contracts/liquidity-mining/IVotingEscrow.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/OptionalOnlyCaller.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeMath.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // solhint-disable not-rely-on-time
 
@@ -93,14 +93,14 @@
     /**
      * @notice Returns the VotingEscrow (veBAL) token contract
      */
-    function getVotingEscrow() external view override returns (IVotingEscrow) {
+    function getVotingEscrow() external override returns (IVotingEscrow) {
         return _votingEscrow;
     }
 
     /**
      * @notice Returns the global time cursor representing the most earliest uncheckpointed week.
      */
-    function getTimeCursor() external view override returns (uint256) {
+    function getTimeCursor() external override returns (uint256) {
         return _timeCursor;
     }
 
@@ -108,7 +108,7 @@
      * @notice Returns the user-level time cursor representing the most earliest uncheckpointed week.
      * @param user - The address of the user to query.
      */
-    function getUserTimeCursor(address user) external view override returns (uint256) {
+    function getUserTimeCursor(address user) external override returns (uint256) {
         return _userState[user].timeCursor;
     }
 
@@ -116,7 +116,7 @@
      * @notice Returns the token-level time cursor storing the timestamp at up to which tokens have been distributed.
      * @param token - The ERC20 token address to query.
      */
-    function getTokenTimeCursor(IERC20 token) external view override returns (uint256) {
+    function getTokenTimeCursor(IERC20 token) external override returns (uint256) {
         return _tokenState[token].timeCursor;
     }
 
@@ -125,7 +125,7 @@
      * @param user - The address of the user to query.
      * @param token - The ERC20 token address to query.
      */
-    function getUserTokenTimeCursor(address user, IERC20 token) external view override returns (uint256) {
+    function getUserTokenTimeCursor(address user, IERC20 token) external override returns (uint256) {
         return _getUserTokenTimeCursor(user, token);
     }
 
@@ -136,7 +136,7 @@
      * @param user - The address of the user of which to read the cached balance of.
      * @param timestamp - The timestamp at which to read the `user`'s cached balance at.
      */
-    function getUserBalanceAtTimestamp(address user, uint256 timestamp) external view override returns (uint256) {
+    function getUserBalanceAtTimestamp(address user, uint256 timestamp) external override returns (uint256) {
         return _userBalanceAtTimestamp[user][timestamp];
     }
 
@@ -146,14 +146,14 @@
      * This function requires the contract to have been checkpointed past `timestamp` so that the supply is cached.
      * @param timestamp - The timestamp at which to read the cached total supply at.
      */
-    function getTotalSupplyAtTimestamp(uint256 timestamp) external view override returns (uint256) {
+    function getTotalSupplyAtTimestamp(uint256 timestamp) external override returns (uint256) {
         return _veSupplyCache[timestamp];
     }
 
     /**
      * @notice Returns the FeeDistributor's cached balance of `token`.
      */
-    function getTokenLastBalance(IERC20 token) external view override returns (uint256) {
+    function getTokenLastBalance(IERC20 token) external override returns (uint256) {
         return _tokenState[token].cachedBalance;
     }
 
@@ -162,7 +162,7 @@
      * @param token - The ERC20 token address to query.
      * @param timestamp - The timestamp corresponding to the beginning of the week of interest.
      */
-    function getTokensDistributedInWeek(IERC20 token, uint256 timestamp) external view override returns (uint256) {
+    function getTokensDistributedInWeek(IERC20 token, uint256 timestamp) external override returns (uint256) {
         return _tokensPerWeek[token][timestamp];
     }
 
@@ -580,7 +580,7 @@
      * @dev Wrapper around `_userTokenTimeCursor` which returns the start timestamp for `token`
      * if `user` has not attempted to interact with it previously.
      */
-    function _getUserTokenTimeCursor(address user, IERC20 token) internal view returns (uint256) {
+    function _getUserTokenTimeCursor(address user, IERC20 token) internal returns (uint256) {
         uint256 userTimeCursor = _userTokenTimeCursor[user][token];
         if (userTimeCursor > 0) return userTimeCursor;
         // This is the first time that the user has interacted with this token.
@@ -596,7 +596,7 @@
         uint256 timestamp,
         uint256 minUserEpoch,
         uint256 maxUserEpoch
-    ) internal view returns (uint256) {
+    ) internal returns (uint256) {
         uint256 min = minUserEpoch;
         uint256 max = maxUserEpoch;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/BaseGaugeFactory.sol liquidity-mining/contracts/gauges/BaseGaugeFactory.sol
--- liquidity-mining/contracts/gauges/BaseGaugeFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/gauges/BaseGaugeFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -33,14 +33,14 @@
     /**
      * @notice Returns the address of the implementation used for gauge deployments.
      */
-    function getGaugeImplementation() public view returns (ILiquidityGauge) {
+    function getGaugeImplementation() public returns (ILiquidityGauge) {
         return _gaugeImplementation;
     }
 
     /**
      * @notice Returns true if `gauge` was created by this factory.
      */
-    function isGaugeFromFactory(address gauge) external view override returns (bool) {
+    function isGaugeFromFactory(address gauge) external override returns (bool) {
         return _isGaugeFromFactory[gauge];
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol
--- liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainStreamer.sol";
+import "../../interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainStreamer.sol";
 
 /**
  * @title ChildChainGaugeRewardHelper
@@ -29,7 +29,7 @@
 
     /**
      * @notice Returns the amount of ERC20 token `token` on RewardsOnlyGauge `gauge` claimable by address `user`.
-     * @dev This function cannot be marked `view` as it updates the gauge's state (not possible in a view context).
+     * @dev This function cannot be marked `view` as it updates the gauge's state (not possible in acontext).
      * Offchain users attempting to read from this function should manually perform a static call or modify the abi.
      * @param gauge - The address of the RewardsOnlyGauge for which to query.
      * @param user - The address of the user for which to query.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol
--- liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
+import "../../interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
 
 contract ChildChainLiquidityGaugeFactory is IChildChainLiquidityGaugeFactory {
     // RewardsOnlyGauge expects the claim function selector to be left padded with zeros.
@@ -42,56 +42,56 @@
     /**
      * @notice Returns the address of the implementation used for gauge deployments.
      */
-    function getGaugeImplementation() external view override returns (ILiquidityGauge) {
+    function getGaugeImplementation() external override returns (ILiquidityGauge) {
         return _gaugeImplementation;
     }
 
     /**
      * @notice Returns the address of the implementation used for streamer deployments.
      */
-    function getChildChainStreamerImplementation() external view override returns (IChildChainStreamer) {
+    function getChildChainStreamerImplementation() external override returns (IChildChainStreamer) {
         return _childChainStreamerImplementation;
     }
 
     /**
      * @notice Returns the address of the gauge belonging to `pool`.
      */
-    function getPoolGauge(address pool) public view override returns (ILiquidityGauge) {
+    function getPoolGauge(address pool) public override returns (ILiquidityGauge) {
         return ILiquidityGauge(_poolGauge[pool]);
     }
 
     /**
      * @notice Returns true if `gauge` was created by this factory.
      */
-    function isGaugeFromFactory(address gauge) external view override returns (bool) {
+    function isGaugeFromFactory(address gauge) external override returns (bool) {
         return _isGaugeFromFactory[gauge];
     }
 
     /**
      * @notice Returns the address of the streamer belonging to `gauge`.
      */
-    function getGaugeStreamer(address gauge) public view override returns (address) {
+    function getGaugeStreamer(address gauge) public override returns (address) {
         return _gaugeStreamer[gauge];
     }
 
     /**
      * @notice Returns true if `streamer` was created by this factory.
      */
-    function isStreamerFromFactory(address streamer) external view override returns (bool) {
+    function isStreamerFromFactory(address streamer) external override returns (bool) {
         return _isStreamerFromFactory[streamer];
     }
 
     /**
      * @notice Returns the address of the pool which `gauge` belongs.
      */
-    function getGaugePool(address gauge) external view override returns (IERC20) {
+    function getGaugePool(address gauge) external override returns (IERC20) {
         return IRewardsOnlyGauge(gauge).lp_token();
     }
 
     /**
      * @notice Returns the address of the streamer belonging to `pool`'s gauge.
      */
-    function getPoolStreamer(address pool) external view override returns (address) {
+    function getPoolStreamer(address pool) external override returns (address) {
         return getGaugeStreamer(address(getPoolGauge(pool)));
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol.orig liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol.orig
--- liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol.orig	1969-12-31 16:00:00.000000000 -0800
+++ liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol.orig	2022-11-22 00:28:06.000000000 -0800
@@ -0,0 +1,126 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+
+contract ChildChainLiquidityGaugeFactory is IChildChainLiquidityGaugeFactory {
+    // RewardsOnlyGauge expects the claim function selector to be left padded with zeros.
+    // We then shift right 28 bytes so that the function selector (top 4 bytes) sits in the lowest 4 bytes.
+    bytes32 private constant _CLAIM_SIG = keccak256("get_reward()") >> (28 * 8);
+
+    ILiquidityGauge private immutable _gaugeImplementation;
+    IChildChainStreamer private immutable _childChainStreamerImplementation;
+
+    mapping(address => bool) private _isGaugeFromFactory;
+    mapping(address => bool) private _isStreamerFromFactory;
+    mapping(address => address) private _poolGauge;
+    mapping(address => address) private _gaugeStreamer;
+
+    constructor(ILiquidityGauge gauge, IChildChainStreamer childChainStreamer) {
+        _gaugeImplementation = gauge;
+        _childChainStreamerImplementation = childChainStreamer;
+    }
+
+    /**
+     * @notice Returns the address of the implementation used for gauge deployments.
+     */
+    function getGaugeImplementation() external view override returns (ILiquidityGauge) {
+        return _gaugeImplementation;
+    }
+
+    /**
+     * @notice Returns the address of the implementation used for streamer deployments.
+     */
+    function getChildChainStreamerImplementation() external view override returns (IChildChainStreamer) {
+        return _childChainStreamerImplementation;
+    }
+
+    /**
+     * @notice Returns the address of the gauge belonging to `pool`.
+     */
+    function getPoolGauge(address pool) public view override returns (ILiquidityGauge) {
+        return ILiquidityGauge(_poolGauge[pool]);
+    }
+
+    /**
+     * @notice Returns true if `gauge` was created by this factory.
+     */
+    function isGaugeFromFactory(address gauge) external view override returns (bool) {
+        return _isGaugeFromFactory[gauge];
+    }
+
+    /**
+     * @notice Returns the address of the streamer belonging to `gauge`.
+     */
+    function getGaugeStreamer(address gauge) public view override returns (address) {
+        return _gaugeStreamer[gauge];
+    }
+
+    /**
+     * @notice Returns true if `streamer` was created by this factory.
+     */
+    function isStreamerFromFactory(address streamer) external view override returns (bool) {
+        return _isStreamerFromFactory[streamer];
+    }
+
+    /**
+     * @notice Returns the address of the pool which `gauge` belongs.
+     */
+    function getGaugePool(address gauge) external view override returns (IERC20) {
+        return IRewardsOnlyGauge(gauge).lp_token();
+    }
+
+    /**
+     * @notice Returns the address of the streamer belonging to `pool`'s gauge.
+     */
+    function getPoolStreamer(address pool) external view override returns (address) {
+        return getGaugeStreamer(address(getPoolGauge(pool)));
+    }
+
+    /**
+     * @notice Deploys a new gauge for a Balancer pool.
+     * @dev As anyone can register arbitrary Balancer pools with the Vault,
+     * it's impossible to prove onchain that `pool` is a "valid" deployment.
+     *
+     * Care must be taken to ensure that gauges deployed from this factory are
+     * suitable before they are added to the GaugeController.
+     *
+     * This factory disallows deploying multiple gauges for a single pool.
+     * @param pool The address of the pool for which to deploy a gauge
+     * @return The address of the deployed gauge
+     */
+    function create(address pool) external returns (address) {
+        require(_poolGauge[pool] == address(0), "Gauge already exists");
+
+        address gauge = Clones.clone(address(_gaugeImplementation));
+        address streamer = Clones.clone(address(_childChainStreamerImplementation));
+
+        IChildChainStreamer(streamer).initialize(gauge);
+        IRewardsOnlyGauge(gauge).initialize(pool, streamer, _CLAIM_SIG);
+
+        _isGaugeFromFactory[gauge] = true;
+        _poolGauge[pool] = gauge;
+        _gaugeStreamer[gauge] = streamer;
+        emit RewardsOnlyGaugeCreated(gauge, pool, streamer);
+
+        return gauge;
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/StakelessGauge.sol liquidity-mining/contracts/gauges/StakelessGauge.sol
--- liquidity-mining/contracts/gauges/StakelessGauge.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/gauges/StakelessGauge.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,18 +14,15 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeController.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakelessGauge.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeController.sol";
+import "../../interfaces/contracts/liquidity-mining/IStakelessGauge.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 abstract contract StakelessGauge is IStakelessGauge, ReentrancyGuard {
-    uint256 public constant MAX_RELATIVE_WEIGHT_CAP = 1e18;
-
     IERC20 internal immutable _balToken;
     IBalancerTokenAdmin private immutable _tokenAdmin;
     IBalancerMinter private immutable _minter;
@@ -142,7 +139,7 @@
         return true;
     }
 
-    function _currentPeriod() internal view returns (uint256) {
+    function _currentPeriod() internal returns (uint256) {
         // solhint-disable-next-line not-rely-on-time
         return (block.timestamp / 1 weeks) - 1;
     }
@@ -155,12 +152,12 @@
         return true;
     }
 
-    function integrate_fraction(address user) external view override returns (uint256) {
+    function integrate_fraction(address user) external override returns (uint256) {
         require(user == address(this), "Gauge can only mint for itself");
         return _emissions;
     }
 
-    function is_killed() external view override returns (bool) {
+    function is_killed() external override returns (bool) {
         return _isKilled;
     }
 
@@ -185,11 +182,11 @@
         emit RelativeWeightCapChanged(relativeWeightCap);
     }
 
-    function getRelativeWeightCap() external view override returns (uint256) {
+    function getRelativeWeightCap() external override returns (uint256) {
         return _relativeWeightCap;
     }
 
-    function getCappedRelativeWeight(uint256 time) public view override returns (uint256) {
+    function getCappedRelativeWeight(uint256 time) public override returns (uint256) {
         return Math.min(_gaugeController.gauge_relative_weight(address(this), time), _relativeWeightCap);
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol
--- liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol	2022-11-22 00:28:06.000000000 -0800
@@ -39,7 +39,7 @@
         _recipient = recipient;
     }
 
-    function getRecipient() external view override returns (address) {
+    function getRecipient() external override returns (address) {
         return _recipient;
     }
 
@@ -69,7 +69,7 @@
         );
     }
 
-    function getTotalBridgeCost() external view returns (uint256) {
+    function getTotalBridgeCost() external returns (uint256) {
         (uint256 gasLimit, uint256 gasPrice, uint256 maxSubmissionCost) = _factory.getArbitrumFees();
         return _getTotalBridgeCost(gasLimit, gasPrice, maxSubmissionCost);
     }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol
--- liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -48,7 +48,7 @@
      */
     function getArbitrumFees()
         external
-        view
+       
         override
         returns (
             uint256 gasLimit,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol
--- liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 interface IGatewayRouter {
     function outboundTransfer(
@@ -26,5 +26,5 @@
         bytes calldata data
     ) external payable;
 
-    function getGateway(address token) external view returns (address gateway);
+    function getGateway(address token) external returns (address gateway);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol
--- liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol	2022-11-22 00:28:06.000000000 -0800
@@ -34,7 +34,7 @@
         _recipient = recipient;
     }
 
-    function getRecipient() external view override returns (address) {
+    function getRecipient() external override returns (address) {
         return _recipient;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol
--- liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol	2022-11-22 00:28:06.000000000 -0800
@@ -54,15 +54,15 @@
         _recipient = recipient;
     }
 
-    function getRecipient() external view override returns (address) {
+    function getRecipient() external override returns (address) {
         return _recipient;
     }
 
-    function getOptimismBridge() external view returns (IL1StandardBridge) {
+    function getOptimismBridge() external returns (IL1StandardBridge) {
         return _optimismL1StandardBridge;
     }
 
-    function getOptimismBal() external view returns (address) {
+    function getOptimismBal() external returns (address) {
         return _optimismBal;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol
--- liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -42,7 +42,7 @@
     /**
      * @notice Returns the gas limit for the Optimism side of the bridging transaction
      */
-    function getOptimismGasLimit() external view override returns (uint32) {
+    function getOptimismGasLimit() external override returns (uint32) {
         return _gasLimit;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol
--- liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol	2022-11-22 00:28:06.000000000 -0800
@@ -47,15 +47,15 @@
         _recipient = recipient;
     }
 
-    function getRecipient() external view override returns (address) {
+    function getRecipient() external override returns (address) {
         return _recipient;
     }
 
-    function getPolygonBridge() external view returns (IPolygonRootChainManager) {
+    function getPolygonBridge() external returns (IPolygonRootChainManager) {
         return _polygonRootChainManager;
     }
 
-    function getPolygonERC20Predicate() external view returns (address) {
+    function getPolygonERC20Predicate() external returns (address) {
         return _polygonERC20Predicate;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/test/MockBalancerTokenAdmin.sol liquidity-mining/contracts/test/MockBalancerTokenAdmin.sol
--- liquidity-mining/contracts/test/MockBalancerTokenAdmin.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/test/MockBalancerTokenAdmin.sol	2022-11-22 00:28:06.000000000 -0800
@@ -40,11 +40,11 @@
         _rate = INITIAL_RATE;
     }
 
-    function getVault() external view returns (IVault) {
+    function getVault() external returns (IVault) {
         return _vault;
     }
 
-    function getBalancerToken() external view returns (IBalancerToken) {
+    function getBalancerToken() external returns (IBalancerToken) {
         return _balancerToken;
     }
 
@@ -58,7 +58,7 @@
         return _epochWrite();
     }
 
-    function rate() external view returns (uint256) {
+    function rate() external returns (uint256) {
         return _rate;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/test/MockGaugeController.sol liquidity-mining/contracts/test/MockGaugeController.sol
--- liquidity-mining/contracts/test/MockGaugeController.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/test/MockGaugeController.sol	2022-11-22 00:28:06.000000000 -0800
@@ -38,11 +38,11 @@
         admin = authorizerAdaptor;
     }
 
-    function n_gauge_types() external view override returns (int128) {
+    function n_gauge_types() external override returns (int128) {
         return _numGaugeTypes;
     }
 
-    function gauge_types(address gauge) external view override returns (int128) {
+    function gauge_types(address gauge) external override returns (int128) {
         require(_validGauge[gauge], "Gauge doesn't exist on controller");
         return _gaugeType[gauge];
     }
@@ -66,7 +66,7 @@
         // solhint-disable-previous-line no-empty-blocks
     }
 
-    function gauge_relative_weight(address gauge, uint256) external view override returns (uint256) {
+    function gauge_relative_weight(address gauge, uint256) external override returns (uint256) {
         return _weights[gauge];
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/test/MockRewardTokenDistributor.sol liquidity-mining/contracts/test/MockRewardTokenDistributor.sol
--- liquidity-mining/contracts/test/MockRewardTokenDistributor.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/test/MockRewardTokenDistributor.sol	2022-11-22 00:28:06.000000000 -0800
@@ -28,11 +28,11 @@
     IERC20[8] private _rewardTokens;
     mapping(IERC20 => Reward) private _rewardData;
 
-    function reward_tokens(uint256 index) external view override returns (IERC20) {
+    function reward_tokens(uint256 index) external override returns (IERC20) {
         return _rewardTokens[index];
     }
 
-    function reward_data(IERC20 token) external view override returns (Reward memory) {
+    function reward_data(IERC20 token) external override returns (Reward memory) {
         return _rewardData[token];
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/test/TestAccessControl.sol liquidity-mining/contracts/test/TestAccessControl.sol
--- liquidity-mining/contracts/test/TestAccessControl.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/test/TestAccessControl.sol	2022-11-22 00:28:06.000000000 -0800
@@ -85,7 +85,7 @@
     /**
      * @dev Returns `true` if `account` has been granted `role`.
      */
-    function hasRole(bytes32 role, address account) public view returns (bool) {
+    function hasRole(bytes32 role, address account) public returns (bool) {
         return _roles[role].members.contains(account);
     }
 
@@ -93,7 +93,7 @@
      * @dev Returns the number of accounts that have `role`. Can be used
      * together with {getRoleMember} to enumerate all bearers of a role.
      */
-    function getRoleMemberCount(bytes32 role) public view returns (uint256) {
+    function getRoleMemberCount(bytes32 role) public returns (uint256) {
         return _roles[role].members.length();
     }
 
@@ -111,7 +111,7 @@
      * for more information.
      */
     // solhint-enable max-line-length
-    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
+    function getRoleMember(bytes32 role, uint256 index) public returns (address) {
         return _roles[role].members.at(index);
     }
 
@@ -121,7 +121,7 @@
      *
      * To change a role's admin, use {_setRoleAdmin}.
      */
-    function getRoleAdmin(bytes32 role) public view returns (bytes32) {
+    function getRoleAdmin(bytes32 role) public returns (bytes32) {
         return _roles[role].adminRole;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts liquidity-mining/contracts/test/TestFeeDistributor.sol liquidity-mining/contracts/test/TestFeeDistributor.sol
--- liquidity-mining/contracts/test/TestFeeDistributor.sol	2022-11-21 22:55:10.000000000 -0800
+++ liquidity-mining/contracts/test/TestFeeDistributor.sol	2022-11-22 00:28:06.000000000 -0800
@@ -22,7 +22,7 @@
         // solhint-disable-previous-line no-empty-blocks
     }
 
-    function getUserLastEpochCheckpointed(address user) external view returns (uint256) {
+    function getUserLastEpochCheckpointed(address user) external returns (uint256) {
         return _userState[user].lastEpochCheckpointed;
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/LinearMath.sol pool-linear/contracts/LinearMath.sol
--- pool-linear/contracts/LinearMath.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/LinearMath.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // These functions start with an underscore, as if they were part of a contract and not a library. At some point this
 // should be fixed.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/LinearPool.sol pool-linear/contracts/LinearPool.sol
--- pool-linear/contracts/LinearPool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/LinearPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,17 +15,18 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/ILinearPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/pool-linear/LinearPoolUserData.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
+import "../../interfaces/contracts/pool-linear/ILinearPool.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
+
+// import "../../pool-utils/contracts/BasePool.sol";
+import "../../pool-utils/contracts/BasePool.sol";
+import "../../pool-utils/contracts/rates/PriceRateCache.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/BasePool.sol";
-import "@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 import "./LinearMath.sol";
 
@@ -169,7 +170,7 @@
         IERC20 mainToken,
         IERC20 wrappedToken,
         address[] memory assetManagers
-    ) private view returns (address[] memory) {
+    ) private returns (address[] memory) {
         (, , uint256 bptIndex) = _getSortedTokenIndexes(mainToken, wrappedToken, this);
 
         address[] memory extendedAssetManagers = new address[](assetManagers.length + 1);
@@ -189,14 +190,14 @@
     /**
      * @notice Return the main token address as an IERC20.
      */
-    function getMainToken() public view override returns (IERC20) {
+    function getMainToken() public override returns (IERC20) {
         return _mainToken;
     }
 
     /**
      * @notice Return the wrapped token address as an IERC20.
      */
-    function getWrappedToken() public view override returns (IERC20) {
+    function getWrappedToken() public override returns (IERC20) {
         return _wrappedToken;
     }
 
@@ -204,7 +205,7 @@
      * @notice Return the index of the BPT token.
      * @dev Note that this is an index into the registered token list (with 3 tokens).
      */
-    function getBptIndex() public view override returns (uint256) {
+    function getBptIndex() public override returns (uint256) {
         return _bptIndex;
     }
 
@@ -212,7 +213,7 @@
      * @notice Return the index of the main token.
      * @dev Note that this is an index into the registered token list, which includes the BPT token.
      */
-    function getMainIndex() external view override returns (uint256) {
+    function getMainIndex() external override returns (uint256) {
         return _mainIndex;
     }
 
@@ -220,7 +221,7 @@
      * @notice Return the index of the wrapped token.
      * @dev Note that this is an index into the registered token list, which includes the BPT token.
      */
-    function getWrappedIndex() external view override returns (uint256) {
+    function getWrappedIndex() external override returns (uint256) {
         return _wrappedIndex;
     }
 
@@ -313,7 +314,7 @@
         SwapRequest memory request,
         uint256[] memory balances,
         LinearMath.Params memory params
-    ) internal view returns (uint256) {
+    ) internal returns (uint256) {
         if (request.tokenIn == this) {
             return _swapGivenBptIn(request, balances, params);
         } else if (request.tokenIn == _mainToken) {
@@ -329,7 +330,7 @@
         SwapRequest memory request,
         uint256[] memory balances,
         LinearMath.Params memory params
-    ) internal view returns (uint256) {
+    ) internal returns (uint256) {
         _require(request.tokenOut == _mainToken || request.tokenOut == _wrappedToken, Errors.INVALID_TOKEN);
         return
             (request.tokenOut == _mainToken ? LinearMath._calcMainOutPerBptIn : LinearMath._calcWrappedOutPerBptIn)(
@@ -345,7 +346,7 @@
         SwapRequest memory request,
         uint256[] memory balances,
         LinearMath.Params memory params
-    ) internal view returns (uint256) {
+    ) internal returns (uint256) {
         _require(request.tokenOut == _wrappedToken || request.tokenOut == this, Errors.INVALID_TOKEN);
         return
             request.tokenOut == this
@@ -363,7 +364,7 @@
         SwapRequest memory request,
         uint256[] memory balances,
         LinearMath.Params memory params
-    ) internal view returns (uint256) {
+    ) internal returns (uint256) {
         _require(request.tokenOut == _mainToken || request.tokenOut == this, Errors.INVALID_TOKEN);
         return
             request.tokenOut == this
@@ -381,7 +382,7 @@
         SwapRequest memory request,
         uint256[] memory balances,
         LinearMath.Params memory params
-    ) internal view returns (uint256) {
+    ) internal returns (uint256) {
         if (request.tokenOut == this) {
             return _swapGivenBptOut(request, balances, params);
         } else if (request.tokenOut == _mainToken) {
@@ -397,7 +398,7 @@
         SwapRequest memory request,
         uint256[] memory balances,
         LinearMath.Params memory params
-    ) internal view returns (uint256) {
+    ) internal returns (uint256) {
         _require(request.tokenIn == _mainToken || request.tokenIn == _wrappedToken, Errors.INVALID_TOKEN);
         return
             (request.tokenIn == _mainToken ? LinearMath._calcMainInPerBptOut : LinearMath._calcWrappedInPerBptOut)(
@@ -413,7 +414,7 @@
         SwapRequest memory request,
         uint256[] memory balances,
         LinearMath.Params memory params
-    ) internal view returns (uint256) {
+    ) internal returns (uint256) {
         _require(request.tokenIn == _wrappedToken || request.tokenIn == this, Errors.INVALID_TOKEN);
         return
             request.tokenIn == this
@@ -431,7 +432,7 @@
         SwapRequest memory request,
         uint256[] memory balances,
         LinearMath.Params memory params
-    ) internal view returns (uint256) {
+    ) internal returns (uint256) {
         _require(request.tokenIn == _mainToken || request.tokenIn == this, Errors.INVALID_TOKEN);
         return
             request.tokenIn == this
@@ -451,7 +452,7 @@
         address recipient,
         uint256[] memory,
         bytes memory
-    ) internal view override returns (uint256, uint256[] memory) {
+    ) internal override returns (uint256, uint256[] memory) {
         // Linear Pools can only be initialized by the Pool performing the initial join via the `initialize` function.
         _require(sender == address(this), Errors.INVALID_INITIALIZATION);
         _require(recipient == address(this), Errors.INVALID_INITIALIZATION);
@@ -523,11 +524,11 @@
         return 0;
     }
 
-    function _getTotalTokens() internal view virtual override returns (uint256) {
+    function _getTotalTokens() internal virtual override returns (uint256) {
         return _TOTAL_TOKENS;
     }
 
-    function _scalingFactor(IERC20 token) internal view virtual override returns (uint256) {
+    function _scalingFactor(IERC20 token) internal virtual override returns (uint256) {
         if (token == _mainToken) {
             return _scalingFactorMainToken;
         } else if (token == _wrappedToken) {
@@ -541,7 +542,7 @@
         }
     }
 
-    function _scalingFactors() internal view virtual override returns (uint256[] memory) {
+    function _scalingFactors() internal virtual override returns (uint256[] memory) {
         uint256[] memory scalingFactors = new uint256[](_TOTAL_TOKENS);
 
         // The wrapped token's scaling factor is not constant, but increases over time as the wrapped token increases in
@@ -559,7 +560,7 @@
      * @dev For a Linear Pool, the rate represents the appreciation of BPT with respect to the underlying tokens. This
      * rate increases slowly as the wrapped token appreciates in value.
      */
-    function getRate() external view override returns (uint256) {
+    function getRate() external override returns (uint256) {
         bytes32 poolId = getPoolId();
         (, uint256[] memory balances, ) = getVault().getPoolTokens(poolId);
         _upscaleArray(balances, _scalingFactors());
@@ -586,7 +587,7 @@
      * @notice Return the conversion rate between the wrapped and main tokens.
      * @dev This is an 18-decimal fixed point value.
      */
-    function getWrappedTokenRate() external view returns (uint256) {
+    function getWrappedTokenRate() external returns (uint256) {
         return _getWrappedTokenRate();
     }
 
@@ -595,12 +596,12 @@
      * main token. The final wrapped token scaling factor is this value multiplied by the wrapped token's decimal
      * scaling factor.
      */
-    function _getWrappedTokenRate() internal view virtual returns (uint256);
+    function _getWrappedTokenRate() internal virtual returns (uint256);
 
     /**
      * @notice Return the lower and upper bounds of the zero-fee trading range for the main token balance.
      */
-    function getTargets() public view override returns (uint256 lowerTarget, uint256 upperTarget) {
+    function getTargets() public override returns (uint256 lowerTarget, uint256 upperTarget) {
         bytes32 miscData = _getMiscData();
 
         // Since targets are stored downscaled by _TARGET_SCALING, we undo that when reading them.
@@ -668,7 +669,7 @@
         super.setSwapFeePercentage(swapFeePercentage);
     }
 
-    function _isMainBalanceWithinTargets(uint256 lowerTarget, uint256 upperTarget) private view returns (bool) {
+    function _isMainBalanceWithinTargets(uint256 lowerTarget, uint256 upperTarget) private returns (bool) {
         (uint256 cash, uint256 managed, , ) = getVault().getPoolTokenInfo(getPoolId(), _mainToken);
 
         uint256 mainTokenBalance = _upscale(cash + managed, _scalingFactor(_mainToken));
@@ -676,7 +677,7 @@
         return mainTokenBalance >= lowerTarget && mainTokenBalance <= upperTarget;
     }
 
-    function _isOwnerOnlyAction(bytes32 actionId) internal view virtual override returns (bool) {
+    function _isOwnerOnlyAction(bytes32 actionId) internal virtual override returns (bool) {
         return actionId == getActionId(this.setTargets.selector) || super._isOwnerOnlyAction(actionId);
     }
 
@@ -689,7 +690,7 @@
      * exchanged, so the Vault's balance increases after joins and decreases after exits. If users call the recovery
      * mode exit function, the totalSupply can change as BPT are burned.
      */
-    function getVirtualSupply() external view returns (uint256) {
+    function getVirtualSupply() external returns (uint256) {
         // For a 3 token General Pool, it is cheaper to query the balance for a single token than to read all balances,
         // as getPoolTokenInfo will check for token existence, token balance and Asset Manager (3 reads), while
         // getPoolTokens will read the number of tokens, their addresses and balances (7 reads).
@@ -703,7 +704,7 @@
     // The initial amount of BPT pre-minted is _PREMINTED_TOKEN_BALANCE, and it goes entirely to the pool balance in the
     // vault. So the virtualSupply (the actual supply in circulation) is defined as:
     // virtualSupply = totalSupply() - _balances[_bptIndex]
-    function _getVirtualSupply(uint256 bptBalance) internal view returns (uint256) {
+    function _getVirtualSupply(uint256 bptBalance) internal returns (uint256) {
         return totalSupply().sub(bptBalance);
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/LinearPoolRebalancer.sol pool-linear/contracts/LinearPoolRebalancer.sol
--- pool-linear/contracts/LinearPoolRebalancer.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/LinearPoolRebalancer.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerQueries.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/ILinearPool.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerQueries.sol";
+import "../../interfaces/contracts/pool-linear/ILinearPool.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 abstract contract LinearPoolRebalancer {
     using SafeERC20 for IERC20;
@@ -54,7 +54,7 @@
         _queries = queries;
     }
 
-    function getPool() external view returns (ILinearPool) {
+    function getPool() external returns (ILinearPool) {
         return _pool;
     }
 
@@ -231,7 +231,7 @@
         _vault.managePoolBalance(deposit);
     }
 
-    function _getDesiredMainTokenBalance() private view returns (uint256) {
+    function _getDesiredMainTokenBalance() private returns (uint256) {
         // The desired main token balance is the midpoint of the lower and upper targets. Keeping the balance
         // close to that value maximizes Pool swap volume by allowing zero-fee swaps in either direction.
         (uint256 lowerTarget, uint256 upperTarget) = _pool.getTargets();
@@ -255,5 +255,5 @@
     /**
      * @dev Returns how many main tokens must be wrapped in order to get `wrappedAmount` back.
      */
-    function _getRequiredTokensToWrap(uint256 wrappedAmount) internal view virtual returns (uint256);
+    function _getRequiredTokensToWrap(uint256 wrappedAmount) internal virtual returns (uint256);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/aave/AaveLinearPool.sol pool-linear/contracts/aave/AaveLinearPool.sol
--- pool-linear/contracts/aave/AaveLinearPool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/aave/AaveLinearPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IStaticAToken.sol";
+import "../../interfaces/contracts/pool-linear/IStaticAToken.sol";
 
 import "../LinearPool.sol";
 
@@ -64,7 +64,7 @@
         return assetManagers;
     }
 
-    function _getWrappedTokenRate() internal view override returns (uint256) {
+    function _getWrappedTokenRate() internal override returns (uint256) {
         // This pulls in the implementation of `rate` used in the StaticAToken contract
         // except avoiding storing relevant variables in storage for gas reasons.
         // solhint-disable-next-line max-line-length
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/aave/AaveLinearPoolFactory.sol pool-linear/contracts/aave/AaveLinearPoolFactory.sol
--- pool-linear/contracts/aave/AaveLinearPoolFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/aave/AaveLinearPoolFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,20 +15,25 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerQueries.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerQueries.sol";
+import "../../interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Create2.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Create2.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./AaveLinearPool.sol";
 import "./AaveLinearPoolRebalancer.sol";
 
-contract AaveLinearPoolFactory is ILastCreatedPoolFactory, BasePoolFactory, ReentrancyGuard, FactoryWidePauseWindow {
+contract AaveLinearPoolFactory is
+    ILastCreatedPoolFactory,
+    BasePoolSplitCodeFactory,
+    ReentrancyGuard,
+    FactoryWidePauseWindow
+{
     // Used for create2 deployments
     uint256 private _nextRebalancerSalt;
 
@@ -44,7 +49,7 @@
         _queries = queries;
     }
 
-    function getLastCreatedPool() external view override returns (address) {
+    function getLastCreatedPool() external override returns (address) {
         return _lastCreatedPool;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol
--- pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IStaticAToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol";
+import "../../interfaces/contracts/pool-linear/IStaticAToken.sol";
+import "../../interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol";
 
 import "../LinearPoolRebalancer.sol";
 
@@ -43,7 +43,7 @@
         IStaticAToken(address(_wrappedToken)).withdraw(address(this), amount, true);
     }
 
-    function _getRequiredTokensToWrap(uint256 wrappedAmount) internal view override returns (uint256) {
+    function _getRequiredTokensToWrap(uint256 wrappedAmount) internal override returns (uint256) {
         // staticToDynamic returns how many main tokens will be returned when unwrapping. Since there's fixed point
         // divisions and multiplications with rounding involved, this value might be off by one. We add one to ensure
         // the returned value will always be enough to get `wrappedAmount` when unwrapping. This might result in some
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol
--- pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IUnbuttonToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IAToken.sol";
+import "../../interfaces/contracts/pool-linear/IUnbuttonToken.sol";
+import "../../interfaces/contracts/pool-linear/IAToken.sol";
 
 import "../LinearPool.sol";
 
@@ -84,7 +84,7 @@
      *      All UnbuttonTokens have 18 decimals, so it is not necessary to
      *      query decimals for the main token or wrapped token.
      */
-    function _getWrappedTokenRate() internal view override returns (uint256) {
+    function _getWrappedTokenRate() internal override returns (uint256) {
         // 1e18 wAaveAMPL = r1 aaveAMPL
         uint256 r1 = IUnbuttonToken(address(getWrappedToken())).wrapperToUnderlying(FixedPoint.ONE);
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol
--- pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,17 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./UnbuttonAaveLinearPool.sol";
 
-contract UnbuttonAaveLinearPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
-    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(UnbuttonAaveLinearPool).creationCode)
-    {
+contract UnbuttonAaveLinearPoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    constructor(IVault vault) BasePoolSplitCodeFactory(vault, type(UnbuttonAaveLinearPool).creationCode) {
         // solhint-disable-previous-line no-empty-blocks
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/erc4626/ERC4626LinearPool.sol pool-linear/contracts/erc4626/ERC4626LinearPool.sol
--- pool-linear/contracts/erc4626/ERC4626LinearPool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/erc4626/ERC4626LinearPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IERC4626.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "../LinearPool.sol";
 
@@ -78,7 +78,7 @@
         _rateScaleFactor = 10**digitsDifference;
     }
 
-    function _getWrappedTokenRate() internal view override returns (uint256) {
+    function _getWrappedTokenRate() internal override returns (uint256) {
         IERC4626 wrappedToken = IERC4626(address(getWrappedToken()));
 
         // Main tokens per 1e18 wrapped token wei
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol
--- pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,17 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./ERC4626LinearPool.sol";
 
-contract ERC4626LinearPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
-    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(ERC4626LinearPool).creationCode)
-    {
+contract ERC4626LinearPoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    constructor(IVault vault) BasePoolSplitCodeFactory(vault, type(ERC4626LinearPool).creationCode) {
         // solhint-disable-previous-line no-empty-blocks
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/test/MockAaveAMPLToken.sol pool-linear/contracts/test/MockAaveAMPLToken.sol
--- pool-linear/contracts/test/MockAaveAMPLToken.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/test/MockAaveAMPLToken.sol	2022-11-22 00:28:06.000000000 -0800
@@ -16,7 +16,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IAToken.sol";
+import "../../interfaces/contracts/pool-linear/IAToken.sol";
 
 import "./MockUnbuttonERC20.sol";
 
@@ -27,7 +27,7 @@
         string memory symbol_
     ) MockUnbuttonERC20(underlying_, name_, symbol_) { }
 
-    function UNDERLYING_ASSET_ADDRESS() external view override returns (address) {
+    function UNDERLYING_ASSET_ADDRESS() external override returns (address) {
         return _underlying;
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/test/MockERC4626Token.sol pool-linear/contracts/test/MockERC4626Token.sol
--- pool-linear/contracts/test/MockERC4626Token.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/test/MockERC4626Token.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IERC4626.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/test/TestToken.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 contract MockERC4626Token is TestToken, IERC4626 {
     using FixedPoint for uint256;
@@ -50,19 +50,19 @@
         _rate = newRate;
     }
 
-    function totalAssets() external view override returns (uint256) {
+    function totalAssets() external override returns (uint256) {
         return _totalAssets;
     }
 
-    function asset() external view override returns (address) {
+    function asset() external override returns (address) {
         return _asset;
     }
 
-    function convertToAssets(uint256 shares) external view override returns (uint256) {
+    function convertToAssets(uint256 shares) external override returns (uint256) {
         return _convertToAssets(shares);
     }
 
-    function convertToShares(uint256 assets) external view override returns (uint256) {
+    function convertToShares(uint256 assets) external override returns (uint256) {
         return _convertToShares(assets);
     }
 
@@ -80,13 +80,13 @@
         return assets;
     }
 
-    function _convertToAssets(uint256 shares) private view returns (uint256) {
+    function _convertToAssets(uint256 shares) private returns (uint256) {
         uint256 assetsInShareDecimals = shares.mulDown(_rate);
         uint256 assets = assetsInShareDecimals.mulDown(_scaleSharesToFP).divDown(_scaleAssetsToFP);
         return assets;
     }
 
-    function _convertToShares(uint256 assets) private view returns (uint256) {
+    function _convertToShares(uint256 assets) private returns (uint256) {
         uint256 sharesInAssetDecimals = assets.divDown(_rate);
         uint256 shares = sharesInAssetDecimals.mulDown(_scaleAssetsToFP).divDown(_scaleSharesToFP);
         return shares;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/test/MockLinearPool.sol pool-linear/contracts/test/MockLinearPool.sol
--- pool-linear/contracts/test/MockLinearPool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/test/MockLinearPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -51,15 +51,11 @@
         // solhint-disable-previous-line no-empty-blocks
     }
 
-    function setTotalSupply(uint256 value) external {
-        _setTotalSupply(value);
-    }
-
-    function getScalingFactor(IERC20 token) external view returns (uint256) {
+    function getScalingFactor(IERC20 token) external returns (uint256) {
         return _scalingFactor(token);
     }
 
-    function _getWrappedTokenRate() internal view override returns (uint256) {
+    function _getWrappedTokenRate() internal override returns (uint256) {
         return _wrappedTokenRate;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/test/MockStaticAToken.sol pool-linear/contracts/test/MockStaticAToken.sol
--- pool-linear/contracts/test/MockStaticAToken.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/test/MockStaticAToken.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IStaticAToken.sol";
+import "../../interfaces/contracts/pool-linear/IStaticAToken.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol";
+import "../../solidity-utils/contracts/test/TestToken.sol";
 
 contract MockStaticAToken is TestToken, IStaticAToken, ILendingPool {
     uint256 private _rate = 1e27;
@@ -32,12 +32,12 @@
     }
 
     // solhint-disable-next-line func-name-mixedcase
-    function ASSET() external view override returns (address) {
+    function ASSET() external override returns (address) {
         return _ASSET;
     }
 
     // solhint-disable-next-line func-name-mixedcase
-    function LENDING_POOL() external view override returns (ILendingPool) {
+    function LENDING_POOL() external override returns (ILendingPool) {
         return ILendingPool(this);
     }
 
@@ -45,7 +45,7 @@
         revert("Should not call this");
     }
 
-    function getReserveNormalizedIncome(address) external view override returns (uint256) {
+    function getReserveNormalizedIncome(address) external override returns (uint256) {
         return _rate;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-linear/contracts/test/MockUnbuttonERC20.sol pool-linear/contracts/test/MockUnbuttonERC20.sol
--- pool-linear/contracts/test/MockUnbuttonERC20.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-linear/contracts/test/MockUnbuttonERC20.sol	2022-11-22 00:28:06.000000000 -0800
@@ -16,10 +16,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IButtonWrapper.sol";
+import "../../interfaces/contracts/pool-linear/IButtonWrapper.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 contract MockUnbuttonERC20 is ERC20, IButtonWrapper {
     using SafeERC20 for IERC20;
@@ -120,23 +120,23 @@
         return amount;
     }
 
-    function underlying() external view override returns (address) {
+    function underlying() external override returns (address) {
         return _underlying;
     }
 
-    function totalUnderlying() external view override returns (uint256) {
+    function totalUnderlying() external override returns (uint256) {
         return _queryUnderlyingBalance();
     }
 
-    function balanceOfUnderlying(address owner) external view override returns (uint256) {
+    function balanceOfUnderlying(address owner) external override returns (uint256) {
         return _toUnderlyingAmount(balanceOf(owner), _queryUnderlyingBalance(), totalSupply());
     }
 
-    function underlyingToWrapper(uint256 uAmount) external view override returns (uint256) {
+    function underlyingToWrapper(uint256 uAmount) external override returns (uint256) {
         return _fromUnderlyingAmount(uAmount, _queryUnderlyingBalance(), totalSupply());
     }
 
-    function wrapperToUnderlying(uint256 amount) external view override returns (uint256) {
+    function wrapperToUnderlying(uint256 amount) external override returns (uint256) {
         return _toUnderlyingAmount(amount, _queryUnderlyingBalance(), totalSupply());
     }
 
@@ -166,7 +166,7 @@
         IERC20(_underlying).safeTransfer(to, uAmount);
     }
 
-    function _queryUnderlyingBalance() private view returns (uint256) {
+    function _queryUnderlyingBalance() private returns (uint256) {
         return IERC20(_underlying).balanceOf(address(this));
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-stable/contracts/ComposableStablePool.sol pool-stable/contracts/ComposableStablePool.sol
--- pool-stable/contracts/ComposableStablePool.sol	2022-11-21 23:45:58.000000000 -0800
+++ pool-stable/contracts/ComposableStablePool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,26 +15,26 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-stable/StablePoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../interfaces/contracts/pool-stable/StablePoolUserData.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
+
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+
+// import "../../pool-utils/contracts/BaseGeneralPool.sol";
+import "../../pool-utils/contracts/BaseGeneralPool.sol";
+import "../../pool-utils/contracts/rates/PriceRateCache.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/BaseGeneralPool.sol";
-import "@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol";
-
-import "./ComposableStablePoolStorage.sol";
-import "./ComposableStablePoolRates.sol";
 import "./ComposableStablePoolStorage.sol";
 import "./ComposableStablePoolRates.sol";
 import "./ComposableStablePoolProtocolFees.sol";
 import "./StablePoolAmplification.sol";
-import "./StableMath.sol";
+// import "./StableMath.sol";
+import "../../../harnesses/StableMathHarness.sol";
 
 /**
  * @dev StablePool with preminted BPT and rate providers for each token, allowing for e.g. wrapped tokens with a known
@@ -119,7 +119,7 @@
     // Translate parameters to avoid stack-too-deep issues in the constructor
     function _extractStorageParams(NewPoolParams memory params)
         private
-        view
+       
         returns (ComposableStablePoolStorage.StorageParams memory)
     {
         return
@@ -273,7 +273,7 @@
         uint256[] memory registeredBalances,
         uint256 registeredIndexIn,
         uint256 registeredIndexOut
-    ) private view returns (uint256) {
+    ) private returns (uint256) {
         // Adjust indices and balances for BPT token
         uint256[] memory balances = _dropBptItem(registeredBalances);
         uint256 indexIn = _skipBptIndex(registeredIndexIn);
@@ -308,10 +308,16 @@
         bool isGivenIn = swapRequest.kind == IVault.SwapKind.GIVEN_IN;
 
         _upscaleArray(registeredBalances, scalingFactors);
-        swapRequest.amount = _upscale(
-            swapRequest.amount,
-            scalingFactors[isGivenIn ? registeredIndexIn : registeredIndexOut]
-        );
+        if (isGivenIn)
+            swapRequest.amount = _upscale(
+                swapRequest.amount,
+                scalingFactors[registeredIndexIn]
+            );
+        else
+            swapRequest.amount = _upscale(
+                swapRequest.amount,
+                scalingFactors[registeredIndexOut]
+            );
 
         (
             uint256 preJoinExitSupply,
@@ -367,7 +373,7 @@
         uint256 currentAmp,
         uint256 actualSupply,
         uint256 preJoinExitInvariant
-    ) internal view returns (uint256, uint256) {
+    ) internal returns (uint256, uint256) {
         return
             isGivenIn
                 ? _joinSwapExactTokenInForBptOut(
@@ -400,7 +406,7 @@
         uint256 currentAmp,
         uint256 actualSupply,
         uint256 preJoinExitInvariant
-    ) internal view returns (uint256, uint256) {
+    ) internal returns (uint256, uint256) {
         // The StableMath function was created with joins in mind, so it expects a full amounts array. We create an
         // empty one and only set the amount for the token involved.
         uint256[] memory amountsIn = new uint256[](balances.length);
@@ -433,7 +439,7 @@
         uint256 currentAmp,
         uint256 actualSupply,
         uint256 preJoinExitInvariant
-    ) internal view returns (uint256, uint256) {
+    ) internal returns (uint256, uint256) {
         uint256 amountIn = StableMath._calcTokenInGivenExactBptOut(
             currentAmp,
             balances,
@@ -462,7 +468,7 @@
         uint256 currentAmp,
         uint256 actualSupply,
         uint256 preJoinExitInvariant
-    ) internal view returns (uint256, uint256) {
+    ) internal returns (uint256, uint256) {
         return
             isGivenIn
                 ? _exitSwapExactBptInForTokenOut(
@@ -495,7 +501,7 @@
         uint256 currentAmp,
         uint256 actualSupply,
         uint256 preJoinExitInvariant
-    ) internal view returns (uint256, uint256) {
+    ) internal returns (uint256, uint256) {
         uint256 amountOut = StableMath._calcTokenOutGivenExactBptIn(
             currentAmp,
             balances,
@@ -524,7 +530,7 @@
         uint256 currentAmp,
         uint256 actualSupply,
         uint256 preJoinExitInvariant
-    ) internal view returns (uint256, uint256) {
+    ) internal returns (uint256, uint256) {
         // The StableMath function was created with exits in mind, so it expects a full amounts array. We create an
         // empty one and only set the amount for the token involved.
         uint256[] memory amountsOut = new uint256[](balances.length);
@@ -646,26 +652,37 @@
         ) = _beforeJoinExit(registeredBalances);
 
 
-            function(uint256[] memory, uint256, uint256, uint256, uint256[] memory, bytes memory)
-                internal
-                view
-                returns (uint256, uint256[] memory) _doJoinOrExit
-         = (isJoin ? _doJoin : _doExit);
-
-        (uint256 bptAmount, uint256[] memory amountsDelta) = _doJoinOrExit(
-            balances,
-            currentAmp,
-            preJoinExitSupply,
-            preJoinExitInvariant,
-            scalingFactors,
-            userData
-        );
 
+        uint256 bptAmount;
+        uint256[] memory amountsDelta;
+        if (isJoin) {
+            (bptAmount, amountsDelta) = _doJoin(
+                balances,
+                currentAmp,
+                preJoinExitSupply,
+                preJoinExitInvariant,
+                scalingFactors,
+                userData
+            );
+        } else {
+            (bptAmount, amountsDelta) = _doExit(
+                balances,
+                currentAmp,
+                preJoinExitSupply,
+                preJoinExitInvariant,
+                scalingFactors,
+                userData
+            );
+        }
         // Unlike joinswaps, explicit joins do not mutate balances into the post join-exit balances so we must perform
         // this mutation here.
-        function(uint256, uint256) internal pure returns (uint256) _addOrSub = isJoin ? FixedPoint.add : FixedPoint.sub;
-        _mutateAmounts(balances, amountsDelta, _addOrSub);
-        uint256 postJoinExitSupply = _addOrSub(preJoinExitSupply, bptAmount);
+                // function(uint256, uint256) internal pure returns (uint256) _addOrSub = isJoin ? FixedPoint.add : FixedPoint.sub;
+        _mutateAmounts(balances, amountsDelta, isJoin);
+        uint256 postJoinExitSupply;
+        if (isJoin)
+            postJoinExitSupply = FixedPoint.add(preJoinExitSupply, bptAmount);
+        else
+            postJoinExitSupply = FixedPoint.sub(preJoinExitSupply, bptAmount);
 
         // Pass in the post-join balances to reset the protocol fee basis.
         // We are minting bptAmount, increasing the total (and virtual) supply post-join
@@ -721,7 +738,7 @@
         uint256 preJoinExitInvariant,
         uint256[] memory scalingFactors,
         bytes memory userData
-    ) internal view returns (uint256, uint256[] memory) {
+    ) internal returns (uint256, uint256[] memory) {
         StablePoolUserData.JoinKind kind = userData.joinKind();
         if (kind == StablePoolUserData.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {
             return
@@ -750,7 +767,7 @@
         uint256[] memory balances,
         uint256[] memory scalingFactors,
         bytes memory userData
-    ) private view returns (uint256, uint256[] memory) {
+    ) private returns (uint256, uint256[] memory) {
         (uint256[] memory amountsIn, uint256 minBPTAmountOut) = userData.exactTokensInForBptOut();
         InputHelpers.ensureInputLengthMatch(balances.length, amountsIn.length);
 
@@ -780,7 +797,7 @@
         uint256 currentAmp,
         uint256[] memory balances,
         bytes memory userData
-    ) private view returns (uint256, uint256[] memory) {
+    ) private returns (uint256, uint256[] memory) {
         // Since this index is sent in from the user, we interpret it as NOT including the BPT token.
         (uint256 bptAmountOut, uint256 tokenIndex) = userData.tokenInForExactBptOut();
         // Note that there is no maximum amountIn parameter: this is handled by `IVault.joinPool`.
@@ -818,7 +835,7 @@
         uint256 preJoinExitInvariant,
         uint256[] memory scalingFactors,
         bytes memory userData
-    ) internal view returns (uint256, uint256[] memory) {
+    ) internal returns (uint256, uint256[] memory) {
         StablePoolUserData.ExitKind kind = userData.exitKind();
         if (kind == StablePoolUserData.ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT) {
             return
@@ -847,7 +864,7 @@
         uint256[] memory balances,
         uint256[] memory scalingFactors,
         bytes memory userData
-    ) private view returns (uint256, uint256[] memory) {
+    ) private returns (uint256, uint256[] memory) {
         (uint256[] memory amountsOut, uint256 maxBPTAmountIn) = userData.bptInForExactTokensOut();
         InputHelpers.ensureInputLengthMatch(amountsOut.length, balances.length);
 
@@ -876,7 +893,7 @@
         uint256 currentAmp,
         uint256[] memory balances,
         bytes memory userData
-    ) private view returns (uint256, uint256[] memory) {
+    ) private returns (uint256, uint256[] memory) {
         // Since this index is sent in from the user, we interpret it as NOT including the BPT token
         (uint256 bptAmountIn, uint256 tokenIndex) = userData.exactBptInForTokenOut();
         // Note that there is no minimum amountOut parameter: this is handled by `IVault.exitPool`.
@@ -942,8 +959,8 @@
      *  amplification factor at the last join or exit operation.
      */
     function _getSupplyAndFeesData()
-        private
-        view
+        public
+       
         returns (
             uint256[] memory balances,
             uint256 virtualSupply,
@@ -955,8 +972,10 @@
         // First we query the Vault for current registered balances (which includes preminted BPT), to then calculate
         // the current scaled balances and virtual supply.
         (, uint256[] memory registeredBalances, ) = getVault().getPoolTokens(getPoolId());
-        _upscaleArray(registeredBalances, _scalingFactors());
-        (virtualSupply, balances) = _dropBptItemFromBalances(registeredBalances);
+        // _upscaleArray(registeredBalances, _scalingFactors());
+        // (virtualSupply, balances) = _dropBptItemFromBalances(registeredBalances);
+        virtualSupply = totalSupply().sub(registeredBalances[getBptIndex()]);
+        balances = registeredBalances;
 
         // Now we need to calculate any BPT due in the form of protocol fees. This requires data from the last join or
         // exit operation. `lastJoinExitAmp` can be useful in the scenario in which the amplification factor has not
@@ -992,7 +1011,7 @@
      * behavior in the `transferFrom` function (like ERC777 tokens do). These tokens are strictly incompatible with the
      * Vault and Pool design, and are not safe to be used.
      */
-    function getRate() external view virtual override returns (uint256) {
+    function getRate() external virtual override returns (uint256) {
         // We need to compute the current invariant and actual total supply. The latter includes protocol fees that have
         // accrued but are not yet minted: in calculating these we'll actually end up fetching most of the data we need
         // for the invariant.
@@ -1038,7 +1057,7 @@
      *
      * In the vast majority of cases, this function should be used instead of `totalSupply()`.
      */
-    function getActualSupply() external view returns (uint256) {
+    function getActualSupply() external returns (uint256) {
         (, uint256 virtualSupply, uint256 protocolFeeAmount, , ) = _getSupplyAndFeesData();
         return virtualSupply.add(protocolFeeAmount);
     }
@@ -1094,8 +1113,9 @@
         // retroactively accrued, which would be incorrect and could lead to the value of `getRate` decreasing.
 
         (, uint256[] memory registeredBalances, ) = getVault().getPoolTokens(getPoolId());
-        _upscaleArray(registeredBalances, _scalingFactors());
+        // _upscaleArray(registeredBalances, _scalingFactors());
         uint256[] memory balances = _dropBptItem(registeredBalances);
+        // uint256[] memory balances = registeredBalances;
 
         (uint256 currentAmp, ) = _getAmplificationParameter();
         uint256 currentInvariant = StableMath._calculateInvariant(currentAmp, balances);
@@ -1113,13 +1133,16 @@
     function _mutateAmounts(
         uint256[] memory toMutate,
         uint256[] memory arguments,
-        function(uint256, uint256) pure returns (uint256) mutation
+        bool isJoin
     ) private pure {
         uint256 length = toMutate.length;
         InputHelpers.ensureInputLengthMatch(length, arguments.length);
 
         for (uint256 i = 0; i < length; ++i) {
-            toMutate[i] = mutation(toMutate[i], arguments[i]);
+            if (isJoin) 
+                toMutate[i] = FixedPoint.add(toMutate[i], arguments[i]);
+            else
+                toMutate[i] = FixedPoint.sub(toMutate[i], arguments[i]);
         }
     }
 
@@ -1131,7 +1154,7 @@
      */
     function _isOwnerOnlyAction(bytes32 actionId)
         internal
-        view
+       
         virtual
         override(
             // Our inheritance pattern creates a small diamond that requires explicitly listing the parents here.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-stable/contracts/ComposableStablePool.sol.orig pool-stable/contracts/ComposableStablePool.sol.orig
--- pool-stable/contracts/ComposableStablePool.sol.orig	1969-12-31 16:00:00.000000000 -0800
+++ pool-stable/contracts/ComposableStablePool.sol.orig	2022-11-22 00:28:06.000000000 -0800
@@ -0,0 +1,1148 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/pool-stable/StablePoolUserData.sol";
+import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+
+import "@balancer-labs/v2-pool-utils/contracts/BaseGeneralPool.sol";
+import "@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol";
+
+import "./ComposableStablePoolStorage.sol";
+import "./ComposableStablePoolRates.sol";
+import "./ComposableStablePoolStorage.sol";
+import "./ComposableStablePoolRates.sol";
+import "./ComposableStablePoolProtocolFees.sol";
+import "./StablePoolAmplification.sol";
+import "./StableMath.sol";
+
+/**
+ * @dev StablePool with preminted BPT and rate providers for each token, allowing for e.g. wrapped tokens with a known
+ * price ratio, such as Compound's cTokens.
+ *
+ * BPT is preminted on Pool initialization and registered as one of the Pool's tokens, allowing for swaps to behave as
+ * single-token joins or exits (by swapping a token for BPT). We also support regular joins and exits, which can mint
+ * and burn BPT.
+ *
+ * Preminted BPT is deposited in the Vault as the initial balance of the Pool, and doesn't belong to any entity until
+ * transferred out of the Pool. The Pool's arithmetic behaves as if it didn't exist, and the BPT total supply is not
+ * a useful value: we rely on the 'virtual supply' (how much BPT is actually owned outside the Vault) instead.
+ */
+contract ComposableStablePool is
+    IRateProvider,
+    BaseGeneralPool,
+    StablePoolAmplification,
+    ComposableStablePoolRates,
+    ComposableStablePoolProtocolFees
+{
+    using FixedPoint for uint256;
+    using PriceRateCache for bytes32;
+    using StablePoolUserData for bytes;
+    using BasePoolUserData for bytes;
+
+    // The maximum imposed by the Vault, which stores balances in a packed format, is 2**(112) - 1.
+    // We are preminting half of that value (rounded up).
+    uint256 private constant _PREMINTED_TOKEN_BALANCE = 2**(111);
+
+    // The constructor arguments are received in a struct to work around stack-too-deep issues
+    struct NewPoolParams {
+        IVault vault;
+        IProtocolFeePercentagesProvider protocolFeeProvider;
+        string name;
+        string symbol;
+        IERC20[] tokens;
+        IRateProvider[] rateProviders;
+        uint256[] tokenRateCacheDurations;
+        bool[] exemptFromYieldProtocolFeeFlags;
+        uint256 amplificationParameter;
+        uint256 swapFeePercentage;
+        uint256 pauseWindowDuration;
+        uint256 bufferPeriodDuration;
+        address owner;
+    }
+
+    constructor(NewPoolParams memory params)
+        BasePool(
+            params.vault,
+            IVault.PoolSpecialization.GENERAL,
+            params.name,
+            params.symbol,
+            _insertSorted(params.tokens, IERC20(this)),
+            new address[](params.tokens.length + 1),
+            params.swapFeePercentage,
+            params.pauseWindowDuration,
+            params.bufferPeriodDuration,
+            params.owner
+        )
+        StablePoolAmplification(params.amplificationParameter)
+        ComposableStablePoolStorage(_extractStorageParams(params))
+        ComposableStablePoolRates(_extractRatesParams(params))
+        ProtocolFeeCache(params.protocolFeeProvider, ProtocolFeeCache.DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL)
+    {
+        // solhint-disable-previous-line no-empty-blocks
+    }
+
+    // Translate parameters to avoid stack-too-deep issues in the constructor
+    function _extractRatesParams(NewPoolParams memory params)
+        private
+        pure
+        returns (ComposableStablePoolRates.RatesParams memory)
+    {
+        return
+            ComposableStablePoolRates.RatesParams({
+                tokens: params.tokens,
+                rateProviders: params.rateProviders,
+                tokenRateCacheDurations: params.tokenRateCacheDurations
+            });
+    }
+
+    // Translate parameters to avoid stack-too-deep issues in the constructor
+    function _extractStorageParams(NewPoolParams memory params)
+        private
+        view
+        returns (ComposableStablePoolStorage.StorageParams memory)
+    {
+        return
+            ComposableStablePoolStorage.StorageParams({
+                registeredTokens: _insertSorted(params.tokens, IERC20(this)),
+                tokenRateProviders: params.rateProviders,
+                exemptFromYieldProtocolFeeFlags: params.exemptFromYieldProtocolFeeFlags
+            });
+    }
+
+    /**
+     * @notice Return the minimum BPT balance, required to avoid minimum token balances.
+     * @dev This amount is minted and immediately burned on pool initialization, so that the total supply
+     * (and therefore post-exit token balances), can never be zero. This keeps the math well-behaved when
+     * liquidity is low. (It also provides an easy way to check whether a pool has been initialized, to
+     * ensure this is only done once.)
+     */
+    function getMinimumBpt() external pure returns (uint256) {
+        return _getMinimumBpt();
+    }
+
+    // BasePool hook
+
+    /**
+     * @dev Override base pool hook invoked before any swap, join, or exit to ensure rates are updated before
+     * the operation.
+     */
+    function _beforeSwapJoinExit() internal override {
+        super._beforeSwapJoinExit();
+
+        // Before the scaling factors are read, we must update the cached rates, as those will be used to compute the
+        // scaling factors.
+        // Note that this is not done in a recovery mode exit (since _beforeSwapjoinExit() is not called under those
+        // conditions), but this is fine as recovery mode exits are unaffected by scaling factors anyway.
+        _cacheTokenRatesIfNecessary();
+    }
+
+    // Swap Hooks
+
+    /**
+     * @dev Override this hook called by the base class `onSwap`, to check whether we are doing a regular swap,
+     * or a swap involving BPT, which is equivalent to a single token join or exit. Since one of the Pool's
+     * tokens is the preminted BPT, we need to handle swaps where BPT is involved separately.
+     *
+     * At this point, the balances are unscaled. The indices are coming from the Vault, so they are indices into
+     * the array of registered tokens (including BPT).
+     *
+     * If this is a swap involving BPT, call `_swapWithBpt`, which computes the amountOut using the swapFeePercentage
+     * and charges protocol fees, in the same manner as single token join/exits. Otherwise, perform the default
+     * processing for a regular swap.
+     */
+    function _swapGivenIn(
+        SwapRequest memory swapRequest,
+        uint256[] memory registeredBalances,
+        uint256 registeredIndexIn,
+        uint256 registeredIndexOut,
+        uint256[] memory scalingFactors
+    ) internal virtual override returns (uint256) {
+        return
+            (swapRequest.tokenIn == IERC20(this) || swapRequest.tokenOut == IERC20(this))
+                ? _swapWithBpt(swapRequest, registeredBalances, registeredIndexIn, registeredIndexOut, scalingFactors)
+                : super._swapGivenIn(
+                    swapRequest,
+                    registeredBalances,
+                    registeredIndexIn,
+                    registeredIndexOut,
+                    scalingFactors
+                );
+    }
+
+    /**
+     * @dev Override this hook called by the base class `onSwap`, to check whether we are doing a regular swap,
+     * or a swap involving BPT, which is equivalent to a single token join or exit. Since one of the Pool's
+     * tokens is the preminted BPT, we need to handle swaps where BPT is involved separately.
+     *
+     * At this point, the balances are unscaled. The indices and balances are coming from the Vault, so they
+     * refer to the full set of registered tokens (including BPT).
+     *
+     * If this is a swap involving BPT, call `_swapWithBpt`, which computes the amountOut using the swapFeePercentage
+     * and charges protocol fees, in the same manner as single token join/exits. Otherwise, perform the default
+     * processing for a regular swap.
+     */
+    function _swapGivenOut(
+        SwapRequest memory swapRequest,
+        uint256[] memory registeredBalances,
+        uint256 registeredIndexIn,
+        uint256 registeredIndexOut,
+        uint256[] memory scalingFactors
+    ) internal virtual override returns (uint256) {
+        return
+            (swapRequest.tokenIn == IERC20(this) || swapRequest.tokenOut == IERC20(this))
+                ? _swapWithBpt(swapRequest, registeredBalances, registeredIndexIn, registeredIndexOut, scalingFactors)
+                : super._swapGivenOut(
+                    swapRequest,
+                    registeredBalances,
+                    registeredIndexIn,
+                    registeredIndexOut,
+                    scalingFactors
+                );
+    }
+
+    /**
+     * @dev This is called from the base class `_swapGivenIn`, so at this point the amount has been adjusted
+     * for swap fees, and balances have had scaling applied. This will only be called for regular (non-BPT) swaps,
+     * so forward to `onRegularSwap`.
+     */
+    function _onSwapGivenIn(
+        SwapRequest memory request,
+        uint256[] memory registeredBalances,
+        uint256 registeredIndexIn,
+        uint256 registeredIndexOut
+    ) internal virtual override returns (uint256) {
+        return
+            _onRegularSwap(
+                true, // given in
+                request.amount,
+                registeredBalances,
+                registeredIndexIn,
+                registeredIndexOut
+            );
+    }
+
+    /**
+     * @dev This is called from the base class `_swapGivenOut`, so at this point the amount has been adjusted
+     * for swap fees, and balances have had scaling applied. This will only be called for regular (non-BPT) swaps,
+     * so forward to `onRegularSwap`.
+     */
+    function _onSwapGivenOut(
+        SwapRequest memory request,
+        uint256[] memory registeredBalances,
+        uint256 registeredIndexIn,
+        uint256 registeredIndexOut
+    ) internal virtual override returns (uint256) {
+        return
+            _onRegularSwap(
+                false, // given out
+                request.amount,
+                registeredBalances,
+                registeredIndexIn,
+                registeredIndexOut
+            );
+    }
+
+    /**
+     * @dev Perform a swap between non-BPT tokens. Scaling and fee adjustments have been performed upstream, so
+     * all we need to do here is calculate the price quote, depending on the direction of the swap.
+     */
+    function _onRegularSwap(
+        bool isGivenIn,
+        uint256 amountGiven,
+        uint256[] memory registeredBalances,
+        uint256 registeredIndexIn,
+        uint256 registeredIndexOut
+    ) private view returns (uint256) {
+        // Adjust indices and balances for BPT token
+        uint256[] memory balances = _dropBptItem(registeredBalances);
+        uint256 indexIn = _skipBptIndex(registeredIndexIn);
+        uint256 indexOut = _skipBptIndex(registeredIndexOut);
+
+        (uint256 currentAmp, ) = _getAmplificationParameter();
+        uint256 invariant = StableMath._calculateInvariant(currentAmp, balances);
+
+        if (isGivenIn) {
+            return StableMath._calcOutGivenIn(currentAmp, balances, indexIn, indexOut, amountGiven, invariant);
+        } else {
+            return StableMath._calcInGivenOut(currentAmp, balances, indexIn, indexOut, amountGiven, invariant);
+        }
+    }
+
+    /**
+     * @dev Perform a swap involving the BPT token, equivalent to a single-token join or exit. As with the standard
+     * joins and swaps, we first pay any protocol fees pending from swaps that occurred since the previous join or
+     * exit, then perform the operation (joinSwap or exitSwap), and finally store the "post operation" invariant and
+     * amp, which establishes the new basis for protocol fees.
+     *
+     * At this point, the scaling factors (including rates) have been computed by the base class, but not yet applied
+     * to the balances.
+     */
+    function _swapWithBpt(
+        SwapRequest memory swapRequest,
+        uint256[] memory registeredBalances,
+        uint256 registeredIndexIn,
+        uint256 registeredIndexOut,
+        uint256[] memory scalingFactors
+    ) private returns (uint256) {
+        bool isGivenIn = swapRequest.kind == IVault.SwapKind.GIVEN_IN;
+
+        _upscaleArray(registeredBalances, scalingFactors);
+        swapRequest.amount = _upscale(
+            swapRequest.amount,
+            scalingFactors[isGivenIn ? registeredIndexIn : registeredIndexOut]
+        );
+
+        (
+            uint256 preJoinExitSupply,
+            uint256[] memory balances,
+            uint256 currentAmp,
+            uint256 preJoinExitInvariant
+        ) = _beforeJoinExit(registeredBalances);
+
+        // These calls mutate `balances` so that it holds the post join-exit balances.
+        (uint256 amountCalculated, uint256 postJoinExitSupply) = registeredIndexOut == getBptIndex()
+            ? _doJoinSwap(
+                isGivenIn,
+                swapRequest.amount,
+                balances,
+                _skipBptIndex(registeredIndexIn),
+                currentAmp,
+                preJoinExitSupply,
+                preJoinExitInvariant
+            )
+            : _doExitSwap(
+                isGivenIn,
+                swapRequest.amount,
+                balances,
+                _skipBptIndex(registeredIndexOut),
+                currentAmp,
+                preJoinExitSupply,
+                preJoinExitInvariant
+            );
+
+        _updateInvariantAfterJoinExit(
+            currentAmp,
+            balances,
+            preJoinExitInvariant,
+            preJoinExitSupply,
+            postJoinExitSupply
+        );
+
+        return
+            isGivenIn
+                ? _downscaleDown(amountCalculated, scalingFactors[registeredIndexOut]) // Amount out, round down
+                : _downscaleUp(amountCalculated, scalingFactors[registeredIndexIn]); // Amount in, round up
+    }
+
+    /**
+     * @dev This mutates `balances` so that they become the post-joinswap balances. The StableMath interfaces
+     * are different depending on the swap direction, so we forward to the appropriate low-level join function.
+     */
+    function _doJoinSwap(
+        bool isGivenIn,
+        uint256 amount,
+        uint256[] memory balances,
+        uint256 indexIn,
+        uint256 currentAmp,
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant
+    ) internal view returns (uint256, uint256) {
+        return
+            isGivenIn
+                ? _joinSwapExactTokenInForBptOut(
+                    amount,
+                    balances,
+                    indexIn,
+                    currentAmp,
+                    actualSupply,
+                    preJoinExitInvariant
+                )
+                : _joinSwapExactBptOutForTokenIn(
+                    amount,
+                    balances,
+                    indexIn,
+                    currentAmp,
+                    actualSupply,
+                    preJoinExitInvariant
+                );
+    }
+
+    /**
+     * @dev Since this is a join, we know the tokenOut is BPT. Since it is GivenIn, we know the tokenIn amount,
+     * and must calculate the BPT amount out.
+     * We are moving preminted BPT out of the Vault, which increases the virtual supply.
+     */
+    function _joinSwapExactTokenInForBptOut(
+        uint256 amountIn,
+        uint256[] memory balances,
+        uint256 indexIn,
+        uint256 currentAmp,
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant
+    ) internal view returns (uint256, uint256) {
+        // The StableMath function was created with joins in mind, so it expects a full amounts array. We create an
+        // empty one and only set the amount for the token involved.
+        uint256[] memory amountsIn = new uint256[](balances.length);
+        amountsIn[indexIn] = amountIn;
+
+        uint256 bptOut = StableMath._calcBptOutGivenExactTokensIn(
+            currentAmp,
+            balances,
+            amountsIn,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+
+        balances[indexIn] = balances[indexIn].add(amountIn);
+        uint256 postJoinExitSupply = actualSupply.add(bptOut);
+
+        return (bptOut, postJoinExitSupply);
+    }
+
+    /**
+     * @dev Since this is a join, we know the tokenOut is BPT. Since it is GivenOut, we know the BPT amount,
+     * and must calculate the token amount in.
+     * We are moving preminted BPT out of the Vault, which increases the virtual supply.
+     */
+    function _joinSwapExactBptOutForTokenIn(
+        uint256 bptOut,
+        uint256[] memory balances,
+        uint256 indexIn,
+        uint256 currentAmp,
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant
+    ) internal view returns (uint256, uint256) {
+        uint256 amountIn = StableMath._calcTokenInGivenExactBptOut(
+            currentAmp,
+            balances,
+            indexIn,
+            bptOut,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+
+        balances[indexIn] = balances[indexIn].add(amountIn);
+        uint256 postJoinExitSupply = actualSupply.add(bptOut);
+
+        return (amountIn, postJoinExitSupply);
+    }
+
+    /**
+     * @dev This mutates balances so that they become the post-exitswap balances. The StableMath interfaces are
+     * different depending on the swap direction, so we forward to the appropriate low-level exit function.
+     */
+    function _doExitSwap(
+        bool isGivenIn,
+        uint256 amount,
+        uint256[] memory balances,
+        uint256 indexOut,
+        uint256 currentAmp,
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant
+    ) internal view returns (uint256, uint256) {
+        return
+            isGivenIn
+                ? _exitSwapExactBptInForTokenOut(
+                    amount,
+                    balances,
+                    indexOut,
+                    currentAmp,
+                    actualSupply,
+                    preJoinExitInvariant
+                )
+                : _exitSwapExactTokenOutForBptIn(
+                    amount,
+                    balances,
+                    indexOut,
+                    currentAmp,
+                    actualSupply,
+                    preJoinExitInvariant
+                );
+    }
+
+    /**
+     * @dev Since this is an exit, we know the tokenIn is BPT. Since it is GivenIn, we know the BPT amount,
+     * and must calculate the token amount out.
+     * We are moving BPT out of circulation and into the Vault, which decreases the virtual supply.
+     */
+    function _exitSwapExactBptInForTokenOut(
+        uint256 bptAmount,
+        uint256[] memory balances,
+        uint256 indexOut,
+        uint256 currentAmp,
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant
+    ) internal view returns (uint256, uint256) {
+        uint256 amountOut = StableMath._calcTokenOutGivenExactBptIn(
+            currentAmp,
+            balances,
+            indexOut,
+            bptAmount,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+
+        balances[indexOut] = balances[indexOut].sub(amountOut);
+        uint256 postJoinExitSupply = actualSupply.sub(bptAmount);
+
+        return (amountOut, postJoinExitSupply);
+    }
+
+    /**
+     * @dev Since this is an exit, we know the tokenIn is BPT. Since it is GivenOut, we know the token amount out,
+     * and must calculate the BPT amount in.
+     * We are moving BPT out of circulation and into the Vault, which decreases the virtual supply.
+     */
+    function _exitSwapExactTokenOutForBptIn(
+        uint256 amountOut,
+        uint256[] memory balances,
+        uint256 indexOut,
+        uint256 currentAmp,
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant
+    ) internal view returns (uint256, uint256) {
+        // The StableMath function was created with exits in mind, so it expects a full amounts array. We create an
+        // empty one and only set the amount for the token involved.
+        uint256[] memory amountsOut = new uint256[](balances.length);
+        amountsOut[indexOut] = amountOut;
+
+        uint256 bptAmount = StableMath._calcBptInGivenExactTokensOut(
+            currentAmp,
+            balances,
+            amountsOut,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+
+        balances[indexOut] = balances[indexOut].sub(amountOut);
+        uint256 postJoinExitSupply = actualSupply.sub(bptAmount);
+
+        return (bptAmount, postJoinExitSupply);
+    }
+
+    // Join Hooks
+
+    /**
+     * Since this Pool has preminted BPT which is stored in the Vault, it cannot simply be minted at construction.
+     *
+     * We take advantage of the fact that StablePools have an initialization step where BPT is minted to the first
+     * account joining them, and perform both actions at once. By minting the entire BPT supply for the initial joiner
+     * and then pulling all tokens except those due the joiner, we arrive at the desired state of the Pool holding all
+     * BPT except the joiner's.
+     */
+    function _onInitializePool(
+        bytes32,
+        address sender,
+        address,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal override returns (uint256, uint256[] memory) {
+        StablePoolUserData.JoinKind kind = userData.joinKind();
+        _require(kind == StablePoolUserData.JoinKind.INIT, Errors.UNINITIALIZED);
+
+        // AmountsIn usually does not include the BPT token; initialization is the one time it has to.
+        uint256[] memory amountsInIncludingBpt = userData.initialAmountsIn();
+        InputHelpers.ensureInputLengthMatch(amountsInIncludingBpt.length, scalingFactors.length);
+        _upscaleArray(amountsInIncludingBpt, scalingFactors);
+
+        (uint256 amp, ) = _getAmplificationParameter();
+        uint256[] memory amountsIn = _dropBptItem(amountsInIncludingBpt);
+        uint256 invariantAfterJoin = StableMath._calculateInvariant(amp, amountsIn);
+
+        // Set the initial BPT to the value of the invariant
+        uint256 bptAmountOut = invariantAfterJoin;
+
+        // BasePool will mint bptAmountOut for the sender: we then also mint the remaining BPT to make up the total
+        // supply, and have the Vault pull those tokens from the sender as part of the join.
+        // We are only minting half of the maximum value - already an amount many orders of magnitude greater than any
+        // conceivable real liquidity - to allow for minting new BPT as a result of regular joins.
+        //
+        // Note that the sender need not approve BPT for the Vault as the Vault already has infinite BPT allowance for
+        // all accounts.
+        uint256 initialBpt = _PREMINTED_TOKEN_BALANCE.sub(bptAmountOut);
+
+        _mintPoolTokens(sender, initialBpt);
+        amountsInIncludingBpt[getBptIndex()] = initialBpt;
+
+        // Initialization is still a join, so we need to do post-join work.
+        _updatePostJoinExit(amp, invariantAfterJoin);
+
+        return (bptAmountOut, amountsInIncludingBpt);
+    }
+
+    /**
+     * @dev Base pool hook called from `onJoinPool`. Forward to `onJoinExitPool` with `isJoin` set to true.
+     */
+    function _onJoinPool(
+        bytes32,
+        address,
+        address,
+        uint256[] memory registeredBalances,
+        uint256,
+        uint256,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal override returns (uint256, uint256[] memory) {
+        return _onJoinExitPool(true, registeredBalances, scalingFactors, userData);
+    }
+
+    /**
+     * @dev Base pool hook called from `onExitPool`. Forward to `onJoinExitPool` with `isJoin` set to false.
+     * Note that recovery mode exits do not call `_onExitPool`.
+     */
+    function _onExitPool(
+        bytes32,
+        address,
+        address,
+        uint256[] memory registeredBalances,
+        uint256,
+        uint256,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal override returns (uint256, uint256[] memory) {
+        return _onJoinExitPool(false, registeredBalances, scalingFactors, userData);
+    }
+
+    /**
+     * @dev Pay protocol fees before the operation, and call `_updateInvariantAfterJoinExit` afterward, to establish
+     * the new basis for protocol fees.
+     */
+    function _onJoinExitPool(
+        bool isJoin,
+        uint256[] memory registeredBalances,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal returns (uint256, uint256[] memory) {
+        (
+            uint256 preJoinExitSupply,
+            uint256[] memory balances,
+            uint256 currentAmp,
+            uint256 preJoinExitInvariant
+        ) = _beforeJoinExit(registeredBalances);
+
+
+            function(uint256[] memory, uint256, uint256, uint256, uint256[] memory, bytes memory)
+                internal
+                view
+                returns (uint256, uint256[] memory) _doJoinOrExit
+         = (isJoin ? _doJoin : _doExit);
+
+        (uint256 bptAmount, uint256[] memory amountsDelta) = _doJoinOrExit(
+            balances,
+            currentAmp,
+            preJoinExitSupply,
+            preJoinExitInvariant,
+            scalingFactors,
+            userData
+        );
+
+        // Unlike joinswaps, explicit joins do not mutate balances into the post join-exit balances so we must perform
+        // this mutation here.
+        function(uint256, uint256) internal pure returns (uint256) _addOrSub = isJoin ? FixedPoint.add : FixedPoint.sub;
+        _mutateAmounts(balances, amountsDelta, _addOrSub);
+        uint256 postJoinExitSupply = _addOrSub(preJoinExitSupply, bptAmount);
+
+        // Pass in the post-join balances to reset the protocol fee basis.
+        // We are minting bptAmount, increasing the total (and virtual) supply post-join
+        _updateInvariantAfterJoinExit(
+            currentAmp,
+            balances,
+            preJoinExitInvariant,
+            preJoinExitSupply,
+            postJoinExitSupply
+        );
+
+        // For clarity and simplicity, arrays used and computed in lower level functions do not include BPT.
+        // But the amountsIn array passed back to the Vault must include BPT, so we add it back in here.
+        return (bptAmount, _addBptItem(amountsDelta, 0));
+    }
+
+    /**
+     * @dev Pay any due protocol fees and calculate values necessary for performing the join/exit.
+     */
+    function _beforeJoinExit(uint256[] memory registeredBalances)
+        internal
+        returns (
+            uint256,
+            uint256[] memory,
+            uint256,
+            uint256
+        )
+    {
+        (uint256 lastJoinExitAmp, uint256 lastPostJoinExitInvariant) = getLastJoinExitData();
+        (
+            uint256 preJoinExitSupply,
+            uint256[] memory balances,
+            uint256 oldAmpPreJoinExitInvariant
+        ) = _payProtocolFeesBeforeJoinExit(registeredBalances, lastJoinExitAmp, lastPostJoinExitInvariant);
+
+        // If the amplification factor is the same as it was during the last join/exit then we can reuse the
+        // value calculated using the "old" amplification factor. If not, then we have to calculate this now.
+        (uint256 currentAmp, ) = _getAmplificationParameter();
+        uint256 preJoinExitInvariant = currentAmp == lastJoinExitAmp
+            ? oldAmpPreJoinExitInvariant
+            : StableMath._calculateInvariant(currentAmp, balances);
+
+        return (preJoinExitSupply, balances, currentAmp, preJoinExitInvariant);
+    }
+
+    /**
+     * @dev Support single- and multi-token joins, but not explicit proportional joins.
+     */
+    function _doJoin(
+        uint256[] memory balances,
+        uint256 currentAmp,
+        uint256 preJoinExitSupply,
+        uint256 preJoinExitInvariant,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal view returns (uint256, uint256[] memory) {
+        StablePoolUserData.JoinKind kind = userData.joinKind();
+        if (kind == StablePoolUserData.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {
+            return
+                _joinExactTokensInForBPTOut(
+                    preJoinExitSupply,
+                    preJoinExitInvariant,
+                    currentAmp,
+                    balances,
+                    scalingFactors,
+                    userData
+                );
+        } else if (kind == StablePoolUserData.JoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT) {
+            return _joinTokenInForExactBPTOut(preJoinExitSupply, preJoinExitInvariant, currentAmp, balances, userData);
+        } else {
+            _revert(Errors.UNHANDLED_JOIN_KIND);
+        }
+    }
+
+    /**
+     * @dev Multi-token join. Joins with proportional amounts will pay no protocol fees.
+     */
+    function _joinExactTokensInForBPTOut(
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant,
+        uint256 currentAmp,
+        uint256[] memory balances,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) private view returns (uint256, uint256[] memory) {
+        (uint256[] memory amountsIn, uint256 minBPTAmountOut) = userData.exactTokensInForBptOut();
+        InputHelpers.ensureInputLengthMatch(balances.length, amountsIn.length);
+
+        // The user-provided amountsIn is unscaled, so we address that.
+        _upscaleArray(amountsIn, _dropBptItem(scalingFactors));
+
+        uint256 bptAmountOut = StableMath._calcBptOutGivenExactTokensIn(
+            currentAmp,
+            balances,
+            amountsIn,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+
+        _require(bptAmountOut >= minBPTAmountOut, Errors.BPT_OUT_MIN_AMOUNT);
+
+        return (bptAmountOut, amountsIn);
+    }
+
+    /**
+     * @dev Single-token join, equivalent to swapping a pool token for BPT.
+     */
+    function _joinTokenInForExactBPTOut(
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant,
+        uint256 currentAmp,
+        uint256[] memory balances,
+        bytes memory userData
+    ) private view returns (uint256, uint256[] memory) {
+        // Since this index is sent in from the user, we interpret it as NOT including the BPT token.
+        (uint256 bptAmountOut, uint256 tokenIndex) = userData.tokenInForExactBptOut();
+        // Note that there is no maximum amountIn parameter: this is handled by `IVault.joinPool`.
+
+        // Balances are passed through from the Vault hook, and include BPT
+        _require(tokenIndex < balances.length, Errors.OUT_OF_BOUNDS);
+
+        // We join with a single token, so initialize amountsIn with zeros.
+        uint256[] memory amountsIn = new uint256[](balances.length);
+
+        // And then assign the result to the selected token.
+        amountsIn[tokenIndex] = StableMath._calcTokenInGivenExactBptOut(
+            currentAmp,
+            balances,
+            tokenIndex,
+            bptAmountOut,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+
+        return (bptAmountOut, amountsIn);
+    }
+
+    // Exit Hooks
+
+    /**
+     * @dev Support single- and multi-token exits, but not explicit proportional exits, which are
+     * supported through Recovery Mode.
+     */
+    function _doExit(
+        uint256[] memory balances,
+        uint256 currentAmp,
+        uint256 preJoinExitSupply,
+        uint256 preJoinExitInvariant,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal view returns (uint256, uint256[] memory) {
+        StablePoolUserData.ExitKind kind = userData.exitKind();
+        if (kind == StablePoolUserData.ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT) {
+            return
+                _exitBPTInForExactTokensOut(
+                    preJoinExitSupply,
+                    preJoinExitInvariant,
+                    currentAmp,
+                    balances,
+                    scalingFactors,
+                    userData
+                );
+        } else if (kind == StablePoolUserData.ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT) {
+            return _exitExactBPTInForTokenOut(preJoinExitSupply, preJoinExitInvariant, currentAmp, balances, userData);
+        } else {
+            _revert(Errors.UNHANDLED_EXIT_KIND);
+        }
+    }
+
+    /**
+     * @dev Multi-token exit. Proportional exits will pay no protocol fees.
+     */
+    function _exitBPTInForExactTokensOut(
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant,
+        uint256 currentAmp,
+        uint256[] memory balances,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) private view returns (uint256, uint256[] memory) {
+        (uint256[] memory amountsOut, uint256 maxBPTAmountIn) = userData.bptInForExactTokensOut();
+        InputHelpers.ensureInputLengthMatch(amountsOut.length, balances.length);
+
+        // The user-provided amountsIn is unscaled, so we address that.
+        _upscaleArray(amountsOut, _dropBptItem(scalingFactors));
+
+        uint256 bptAmountIn = StableMath._calcBptInGivenExactTokensOut(
+            currentAmp,
+            balances,
+            amountsOut,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+        _require(bptAmountIn <= maxBPTAmountIn, Errors.BPT_IN_MAX_AMOUNT);
+
+        return (bptAmountIn, amountsOut);
+    }
+
+    /**
+     * @dev Single-token exit, equivalent to swapping BPT for a pool token.
+     */
+    function _exitExactBPTInForTokenOut(
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant,
+        uint256 currentAmp,
+        uint256[] memory balances,
+        bytes memory userData
+    ) private view returns (uint256, uint256[] memory) {
+        // Since this index is sent in from the user, we interpret it as NOT including the BPT token
+        (uint256 bptAmountIn, uint256 tokenIndex) = userData.exactBptInForTokenOut();
+        // Note that there is no minimum amountOut parameter: this is handled by `IVault.exitPool`.
+
+        _require(tokenIndex < balances.length, Errors.OUT_OF_BOUNDS);
+
+        // We exit in a single token, so initialize amountsOut with zeros
+        uint256[] memory amountsOut = new uint256[](balances.length);
+
+        // And then assign the result to the selected token.
+        amountsOut[tokenIndex] = StableMath._calcTokenOutGivenExactBptIn(
+            currentAmp,
+            balances,
+            tokenIndex,
+            bptAmountIn,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+
+        return (bptAmountIn, amountsOut);
+    }
+
+    /**
+     * @dev We cannot use the default RecoveryMode implementation here, since we need to account for the BPT token.
+     */
+    function _doRecoveryModeExit(
+        uint256[] memory registeredBalances,
+        uint256,
+        bytes memory userData
+    ) internal virtual override returns (uint256, uint256[] memory) {
+        // Since this Pool uses preminted BPT, we need to replace the total supply with the virtual total supply, and
+        // adjust the balances array by removing BPT from it.
+        // Note that we don't compute the actual supply, which would require a lot of complex calculations and
+        // interactions with external components. This is fine because virtual and actual supply are the same while
+        // recovery mode is enabled (since all protocol fees are forfeit and the fee percentages zeroed out).
+        (uint256 virtualSupply, uint256[] memory balances) = _dropBptItemFromBalances(registeredBalances);
+
+        (uint256 bptAmountIn, uint256[] memory amountsOut) = super._doRecoveryModeExit(
+            balances,
+            virtualSupply,
+            userData
+        );
+
+        // The vault requires an array including BPT, so add it back in here.
+        return (bptAmountIn, _addBptItem(amountsOut, 0));
+    }
+
+    // BPT rate
+
+    /**
+     * Many functions require accessing multiple internal values that might at first seem unrelated, but are actually
+     * quite intertwined, and computed at the same time for optimal performance (since calculating some of them also
+     * yields intermediate results useful for other queries). This helper function returns many of these values,
+     * greatly reducing bytecode size.
+     *
+     * The return values are:
+     *  @return balances - The current upscaled token balances (not including BPT)
+     *  @return virtualSupply - The Pool's virtual supply
+     *  @return protocolFeeAmount - The amount of unpaid protocol fees in BPT
+     *  @return lastJoinExitAmp - The Pool's amplification factor at the last join or exit operation
+     *  @return currentInvariantWithLastJoinExitAmp - The invariant of the current balances, calculated using the
+     *  amplification factor at the last join or exit operation.
+     */
+    function _getSupplyAndFeesData()
+        private
+        view
+        returns (
+            uint256[] memory balances,
+            uint256 virtualSupply,
+            uint256 protocolFeeAmount,
+            uint256 lastJoinExitAmp,
+            uint256 currentInvariantWithLastJoinExitAmp
+        )
+    {
+        // First we query the Vault for current registered balances (which includes preminted BPT), to then calculate
+        // the current scaled balances and virtual supply.
+        (, uint256[] memory registeredBalances, ) = getVault().getPoolTokens(getPoolId());
+        _upscaleArray(registeredBalances, _scalingFactors());
+        (virtualSupply, balances) = _dropBptItemFromBalances(registeredBalances);
+
+        // Now we need to calculate any BPT due in the form of protocol fees. This requires data from the last join or
+        // exit operation. `lastJoinExitAmp` can be useful in the scenario in which the amplification factor has not
+        // changed, meaning this old value is equal to the current value.
+        uint256 lastPostJoinExitInvariant;
+        (lastJoinExitAmp, lastPostJoinExitInvariant) = getLastJoinExitData();
+
+        // Computing the protocol ownership percentage also yields the invariant using the old amplification factor. If
+        // it has not changed, then this is also the current invariant.
+        uint256 expectedProtocolOwnershipPercentage;
+        (
+            expectedProtocolOwnershipPercentage,
+            currentInvariantWithLastJoinExitAmp
+        ) = _getProtocolPoolOwnershipPercentage(balances, lastJoinExitAmp, lastPostJoinExitInvariant);
+
+        protocolFeeAmount = ProtocolFees.bptForPoolOwnershipPercentage(
+            virtualSupply,
+            expectedProtocolOwnershipPercentage
+        );
+    }
+
+    /**
+     * @dev This function returns the appreciation of BPT relative to the underlying tokens, as an 18 decimal fixed
+     * point number. It is simply the ratio of the invariant to the BPT supply.
+     *
+     * The total supply is initialized to equal the invariant, so this value starts at one. During Pool operation the
+     * invariant always grows and shrinks either proportionally to the total supply (in scenarios with no price impact,
+     * e.g. proportional joins), or grows faster and shrinks more slowly than it (whenever swap fees are collected or
+     * the token rates increase). Therefore, the rate is a monotonically increasing function.
+     *
+     * WARNING: since this function reads balances directly from the Vault, it is potentially subject to manipulation
+     * via reentrancy. However, this can only happen if one of the tokens in the Pool contains some form of callback
+     * behavior in the `transferFrom` function (like ERC777 tokens do). These tokens are strictly incompatible with the
+     * Vault and Pool design, and are not safe to be used.
+     */
+    function getRate() external view virtual override returns (uint256) {
+        // We need to compute the current invariant and actual total supply. The latter includes protocol fees that have
+        // accrued but are not yet minted: in calculating these we'll actually end up fetching most of the data we need
+        // for the invariant.
+
+        (
+            uint256[] memory balances,
+            uint256 virtualSupply,
+            uint256 protocolFeeAmount,
+            uint256 lastJoinExitAmp,
+            uint256 currentInvariantWithLastJoinExitAmp
+        ) = _getSupplyAndFeesData();
+
+        // Due protocol fees will be minted at the next join or exit, so we can simply add them to the current virtual
+        // supply to get the actual supply.
+        uint256 actualTotalSupply = virtualSupply.add(protocolFeeAmount);
+
+        // All that's missing now is the invariant. We have the balances required to calculate it already, but still
+        // need the current amplification factor.
+        (uint256 currentAmp, ) = _getAmplificationParameter();
+
+        // It turns out that the process for due protocol fee calculation involves computing the current invariant,
+        // except using the amplification factor at the last join or exit. This would typically not be terribly useful,
+        // but since the amplification factor only changes rarely there is high probability of its current value being
+        // the same as it was in the last join or exit. If that is the case, then we can skip the costly invariant
+        // computation altogether.
+        uint256 currentInvariant = (currentAmp == lastJoinExitAmp)
+            ? currentInvariantWithLastJoinExitAmp
+            : StableMath._calculateInvariant(currentAmp, balances);
+
+        // With the current invariant and actual total supply, we can compute the rate as a fixed-point number.
+        return currentInvariant.divDown(actualTotalSupply);
+    }
+
+    /**
+     * @dev Returns the effective BPT supply.
+     *
+     * In other pools, this would be the same as `totalSupply`, but there are two key differences here:
+     *  - this pool pre-mints BPT and holds it in the Vault as a token, and as such we need to subtract the Vault's
+     *    balance to get the total "circulating supply". This is called the 'virtualSupply'.
+     *  - the Pool owes debt to the Protocol in the form of unminted BPT, which will be minted immediately before the
+     *    next join or exit. We need to take these into account since, even if they don't yet exist, they will
+     *    effectively be included in any Pool operation that involves BPT.
+     *
+     * In the vast majority of cases, this function should be used instead of `totalSupply()`.
+     */
+    function getActualSupply() external view returns (uint256) {
+        (, uint256 virtualSupply, uint256 protocolFeeAmount, , ) = _getSupplyAndFeesData();
+        return virtualSupply.add(protocolFeeAmount);
+    }
+
+    function _beforeProtocolFeeCacheUpdate() internal override {
+        // The `getRate()` function depends on the actual supply, which in turn depends on the cached protocol fee
+        // percentages. Changing these would therefore result in the rate changing, which is not acceptable as this is a
+        // sensitive value.
+        // Because of this, we pay any due protocol fees *before* updating the cache, making it so that the new
+        // percentages only affect future operation of the Pool, and not past fees. As a result, `getRate()` is
+        // unaffected by the cached protocol fee percentages changing.
+
+        // Given that this operation is state-changing and relatively complex, we only allow it as long as the Pool is
+        // not paused.
+        _ensureNotPaused();
+
+        // We need to calculate the amount of unminted BPT that represents protocol fees to then pay those. This yields
+        // some auxiliary values that turn out to also be useful for the rest of the tasks we want to perform.
+        (
+            uint256[] memory balances,
+            ,
+            uint256 protocolFeeAmount,
+            uint256 lastJoinExitAmp,
+            uint256 currentInvariantWithLastJoinExitAmp
+        ) = _getSupplyAndFeesData();
+
+        if (protocolFeeAmount > 0) {
+            _payProtocolFees(protocolFeeAmount);
+        }
+
+        // With the fees paid, we now need to calculate the current invariant so we can store it alongside the current
+        // amplification factor, marking the Pool as free of protocol debt.
+        (uint256 currentAmp, ) = _getAmplificationParameter();
+
+        // It turns out that the process for due protocol fee calculation involves computing the current invariant,
+        // except using the amplification factor at the last join or exit. This would typically not be terribly useful,
+        // but since the amplification factor only changes rarely there is high probability of its current value being
+        // the same as it was in the last join or exit. If that is the case, then we can skip the costly invariant
+        // computation altogether.
+        uint256 currentInvariant = (currentAmp == lastJoinExitAmp)
+            ? currentInvariantWithLastJoinExitAmp
+            : StableMath._calculateInvariant(currentAmp, balances);
+
+        _updatePostJoinExit(currentAmp, currentInvariant);
+    }
+
+    function _onDisableRecoveryMode() internal override {
+        // Enabling recovery mode short-circuits protocol fee computations, forcefully returning a zero percentage,
+        // increasing the return value of `getRate()` and effectively forfeiting due protocol fees.
+
+        // Therefore, when exiting recovery mode we store the current invariant and the amplification factor used to
+        // compute it, marking the Pool as free of protocol debt. Otherwise it'd be possible for debt to be
+        // retroactively accrued, which would be incorrect and could lead to the value of `getRate` decreasing.
+
+        (, uint256[] memory registeredBalances, ) = getVault().getPoolTokens(getPoolId());
+        _upscaleArray(registeredBalances, _scalingFactors());
+        uint256[] memory balances = _dropBptItem(registeredBalances);
+
+        (uint256 currentAmp, ) = _getAmplificationParameter();
+        uint256 currentInvariant = StableMath._calculateInvariant(currentAmp, balances);
+
+        _updatePostJoinExit(currentAmp, currentInvariant);
+    }
+
+    // Helpers
+
+    /**
+     * @dev Mutates `amounts` by applying `mutation` with each entry in `arguments`.
+     *
+     * Equivalent to `amounts = amounts.map(mutation)`.
+     */
+    function _mutateAmounts(
+        uint256[] memory toMutate,
+        uint256[] memory arguments,
+        function(uint256, uint256) pure returns (uint256) mutation
+    ) private pure {
+        uint256 length = toMutate.length;
+        InputHelpers.ensureInputLengthMatch(length, arguments.length);
+
+        for (uint256 i = 0; i < length; ++i) {
+            toMutate[i] = mutation(toMutate[i], arguments[i]);
+        }
+    }
+
+    // Permissioned functions
+
+    /**
+     * @dev Inheritance rules still require us to override this in the most derived contract, even though
+     * it only calls super.
+     */
+    function _isOwnerOnlyAction(bytes32 actionId)
+        internal
+        view
+        virtual
+        override(
+            // Our inheritance pattern creates a small diamond that requires explicitly listing the parents here.
+            // Each parent calls the `super` version, so linearization ensures all implementations are called.
+            BasePool,
+            ComposableStablePoolProtocolFees,
+            StablePoolAmplification,
+            ComposableStablePoolRates
+        )
+        returns (bool)
+    {
+        return super._isOwnerOnlyAction(actionId);
+    }
+}
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-stable/contracts/ComposableStablePoolFactory.sol pool-stable/contracts/ComposableStablePoolFactory.sol
--- pool-stable/contracts/ComposableStablePoolFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-stable/contracts/ComposableStablePoolFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,18 +15,21 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./ComposableStablePool.sol";
 
-contract ComposableStablePoolFactory is BasePoolFactory, FactoryWidePauseWindow {
+contract ComposableStablePoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    IProtocolFeePercentagesProvider private _protocolFeeProvider;
+
     constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(ComposableStablePool).creationCode)
+        BasePoolSplitCodeFactory(vault, type(ComposableStablePool).creationCode)
     {
-        // solhint-disable-previous-line no-empty-blocks
+        _protocolFeeProvider = protocolFeeProvider;
     }
 
     /**
@@ -50,7 +53,7 @@
                     abi.encode(
                         ComposableStablePool.NewPoolParams({
                             vault: getVault(),
-                            protocolFeeProvider: getProtocolFeePercentagesProvider(),
+                            protocolFeeProvider: _protocolFeeProvider,
                             name: name,
                             symbol: symbol,
                             tokens: tokens,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-stable/contracts/ComposableStablePoolProtocolFees.sol pool-stable/contracts/ComposableStablePoolProtocolFees.sol
--- pool-stable/contracts/ComposableStablePoolProtocolFees.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-stable/contracts/ComposableStablePoolProtocolFees.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,14 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
-import "@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol";
-import "@balancer-labs/v2-pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol";
+import "../../pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol";
 
 import "./ComposableStablePoolStorage.sol";
 import "./ComposableStablePoolRates.sol";
-import "./StableMath.sol";
+// import "./StableMath.sol";
+import "../../../harnesses/StableMathHarness.sol";
 
 abstract contract ComposableStablePoolProtocolFees is
     ComposableStablePoolStorage,
@@ -45,7 +46,13 @@
     //
     // [ last join-exit amplification  | last post join-exit invariant ]
     // [           23 bits             |            233 bits           ]
-    bytes32 private _lastJoinExitData;
+    
+    struct JoinExitData {
+        uint256 currentAmp;
+        uint256 postJoinExitInvariant;
+    }
+    JoinExitData _lastJoinExitData;
+    // bytes32 private _lastJoinExitData;
 
     uint256 private constant _LAST_POST_JOIN_EXIT_INVARIANT_OFFSET = 0;
     uint256 private constant _LAST_POST_JOIN_EXIT_INVARIANT_SIZE = 233;
@@ -105,7 +112,7 @@
         uint256[] memory balances,
         uint256 lastJoinExitAmp,
         uint256 lastPostJoinExitInvariant
-    ) internal view returns (uint256, uint256) {
+    ) public returns (uint256, uint256) {
         // We compute three invariants, adjusting the balances of tokens that have rate providers by undoing the current
         // rate adjustment and then applying the old rate. This is equivalent to multiplying by old rate / current rate.
         //
@@ -127,6 +134,7 @@
             uint256 swapFeeGrowthInvariant,
             uint256 totalNonExemptGrowthInvariant,
             uint256 totalGrowthInvariant
+        // ) = (lastPostJoinExitInvariant, lastPostJoinExitInvariant, lastPostJoinExitInvariant);        
         ) = _getGrowthInvariants(balances, lastJoinExitAmp);
 
         // By comparing the invariant increase attributable to each source of growth to the total growth invariant,
@@ -189,8 +197,7 @@
     }
 
     function _getGrowthInvariants(uint256[] memory balances, uint256 lastJoinExitAmp)
-        internal
-        view
+        internal        
         returns (
             uint256 swapFeeGrowthInvariant,
             uint256 totalNonExemptGrowthInvariant,
@@ -202,7 +209,8 @@
 
         swapFeeGrowthInvariant = StableMath._calculateInvariant(
             lastJoinExitAmp,
-            _getAdjustedBalances(balances, true) // Adjust all balances
+            balances
+            // _getAdjustedBalances(balances, true) // Adjust all balances
         );
 
         // For the other invariants, we can potentially skip some work. In the edge cases where none or all of the
@@ -227,7 +235,8 @@
 
             totalNonExemptGrowthInvariant = StableMath._calculateInvariant(
                 lastJoinExitAmp,
-                _getAdjustedBalances(balances, false) // Only adjust non-exempt balances
+                balances
+                // _getAdjustedBalances(balances, false) // Only adjust non-exempt balances
             );
 
             totalGrowthInvariant = StableMath._calculateInvariant(lastJoinExitAmp, balances);
@@ -278,14 +287,15 @@
      * yield fees.
      */
     function _updatePostJoinExit(uint256 currentAmp, uint256 postJoinExitInvariant) internal {
-        _lastJoinExitData =
-            WordCodec.encodeUint(currentAmp, _LAST_JOIN_EXIT_AMPLIFICATION_OFFSET, _LAST_JOIN_EXIT_AMPLIFICATION_SIZE) |
-            WordCodec.encodeUint(
-                postJoinExitInvariant,
-                _LAST_POST_JOIN_EXIT_INVARIANT_OFFSET,
-                _LAST_POST_JOIN_EXIT_INVARIANT_SIZE
-            );
-
+        // _lastJoinExitData =
+        //     WordCodec.encodeUint(currentAmp, _LAST_JOIN_EXIT_AMPLIFICATION_OFFSET, _LAST_JOIN_EXIT_AMPLIFICATION_SIZE) |
+        //     WordCodec.encodeUint(
+        //         postJoinExitInvariant,
+        //         _LAST_POST_JOIN_EXIT_INVARIANT_OFFSET,
+        //         _LAST_POST_JOIN_EXIT_INVARIANT_SIZE
+        //     );
+        _lastJoinExitData.currentAmp = currentAmp;
+        _lastJoinExitData.postJoinExitInvariant = postJoinExitInvariant;
         _updateOldRates();
     }
 
@@ -294,20 +304,22 @@
      */
     function getLastJoinExitData()
         public
-        view
+       
         returns (uint256 lastJoinExitAmplification, uint256 lastPostJoinExitInvariant)
     {
-        bytes32 rawData = _lastJoinExitData;
-
-        lastJoinExitAmplification = rawData.decodeUint(
-            _LAST_JOIN_EXIT_AMPLIFICATION_OFFSET,
-            _LAST_JOIN_EXIT_AMPLIFICATION_SIZE
-        );
-
-        lastPostJoinExitInvariant = rawData.decodeUint(
-            _LAST_POST_JOIN_EXIT_INVARIANT_OFFSET,
-            _LAST_POST_JOIN_EXIT_INVARIANT_SIZE
-        );
+        lastJoinExitAmplification = _lastJoinExitData.currentAmp;
+        lastPostJoinExitInvariant = _lastJoinExitData.postJoinExitInvariant;
+        // bytes32 rawData = _lastJoinExitData;
+
+        // lastJoinExitAmplification = rawData.decodeUint(
+        //     _LAST_JOIN_EXIT_AMPLIFICATION_OFFSET,
+        //     _LAST_JOIN_EXIT_AMPLIFICATION_SIZE
+        // );
+
+        // lastPostJoinExitInvariant = rawData.decodeUint(
+        //     _LAST_POST_JOIN_EXIT_INVARIANT_OFFSET,
+        //     _LAST_POST_JOIN_EXIT_INVARIANT_SIZE
+        // );
     }
 
     /**
@@ -316,7 +328,7 @@
      */
     function _isOwnerOnlyAction(bytes32 actionId)
         internal
-        view
+       
         virtual
         override(
             // Our inheritance pattern creates a small diamond that requires explicitly listing the parents here.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-stable/contracts/ComposableStablePoolRates.sol pool-stable/contracts/ComposableStablePoolRates.sol
--- pool-stable/contracts/ComposableStablePoolRates.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-stable/contracts/ComposableStablePoolRates.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../pool-utils/contracts/rates/PriceRateCache.sol";
 
 import "./ComposableStablePoolStorage.sol";
 
@@ -87,7 +87,7 @@
     /**
      * @dev Updates the old rate for the token at `index` (including BPT). Assumes `index` is valid.
      */
-    function _updateOldRate(uint256 index) internal {
+    function _updateOldRate(uint256 index) public {
         bytes32 cache = _tokenRateCaches[index];
         _tokenRateCaches[index] = cache.updateOldRate();
     }
@@ -96,11 +96,11 @@
      * @dev Returns the rate for a given token. All token rates are fixed-point values with 18 decimals.
      * If there is no rate provider for the provided token, it returns FixedPoint.ONE.
      */
-    function getTokenRate(IERC20 token) external view returns (uint256) {
+    function getTokenRate(IERC20 token) external returns (uint256) {
         return _getTokenRate(_getTokenIndex(token));
     }
 
-    function _getTokenRate(uint256 index) internal view virtual returns (uint256) {
+    function _getTokenRate(uint256 index) internal virtual returns (uint256) {
         // We optimize for the scenario where all tokens have rate providers, except the BPT (which never has a rate
         // provider). Therefore, we return early if `token` is the BPT, and otherwise optimistically read the cache
         // expecting that it will not be empty (instead of e.g. fetching the provider to avoid a cache read, since
@@ -120,7 +120,6 @@
      */
     function getTokenRateCache(IERC20 token)
         external
-        view
         returns (
             uint256 rate,
             uint256 oldRate,
@@ -226,8 +225,7 @@
      * The `balances` array is assumed to not include BPT to ensure that token indices align.
      */
     function _getAdjustedBalances(uint256[] memory balances, bool ignoreExemptFlags)
-        internal
-        view
+        internal       
         returns (uint256[] memory)
     {
         uint256 totalTokensWithoutBpt = balances.length;
@@ -254,7 +252,7 @@
     /**
      * @dev Overrides scaling factor getter to compute the tokens' rates.
      */
-    function _scalingFactors() internal view virtual override returns (uint256[] memory) {
+    function _scalingFactors() internal virtual override returns (uint256[] memory) {
         // There is no need to check the arrays length since both are based on `_getTotalTokens`
         uint256 totalTokens = _getTotalTokens();
         uint256[] memory scalingFactors = new uint256[](totalTokens);
@@ -269,7 +267,7 @@
     /**
      * @dev Overrides only owner action to allow setting the cache duration for the token rates
      */
-    function _isOwnerOnlyAction(bytes32 actionId) internal view virtual override returns (bool) {
+    function _isOwnerOnlyAction(bytes32 actionId) internal virtual override returns (bool) {
         return (actionId == getActionId(this.setTokenRateCacheDuration.selector)) || super._isOwnerOnlyAction(actionId);
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-stable/contracts/ComposableStablePoolStorage.sol pool-stable/contracts/ComposableStablePoolStorage.sol
--- pool-stable/contracts/ComposableStablePoolStorage.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-stable/contracts/ComposableStablePoolStorage.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,15 +14,17 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/BasePool.sol";
+// import "../../pool-utils/contracts/BasePool.sol";
+import "../../pool-utils/contracts/BasePool.sol";
 
-import "./StableMath.sol";
+// import "./StableMath.sol";
+import "../../../harnesses/StableMathHarness.sol";
 
-abstract contract ComposableStablePoolStorage is BasePool {
+abstract contract ComposableStablePoolStorage is BasePool, StableMath {
     using FixedPoint for uint256;
     using WordCodec for bytes32;
 
@@ -44,12 +46,12 @@
     uint256 private immutable _bptIndex;
 
     // These are the registered tokens: one of them will be the BPT.
-    IERC20 private immutable _token0;
-    IERC20 private immutable _token1;
-    IERC20 private immutable _token2;
-    IERC20 private immutable _token3;
-    IERC20 private immutable _token4;
-    IERC20 private immutable _token5;
+    IERC20 internal immutable _token0;
+    IERC20 internal immutable _token1;
+    IERC20 internal immutable _token2;
+    // IERC20 internal immutable _token3;
+    // IERC20 internal immutable _token4;
+    // IERC20 internal immutable _token5;
 
     // All token balances are normalized to behave as if the token had 18 decimals. We assume a token's decimals will
     // not change throughout its lifetime, and store the corresponding scaling factor for each at construction time.
@@ -64,7 +66,7 @@
 
     // Rate Providers accommodate tokens with a known price ratio, such as Compound's cTokens.
 
-    IRateProvider internal immutable _rateProvider0;
+    IRateProvider public immutable _rateProvider0;
     IRateProvider internal immutable _rateProvider1;
     IRateProvider internal immutable _rateProvider2;
     IRateProvider internal immutable _rateProvider3;
@@ -107,9 +109,9 @@
         _token0 = params.registeredTokens[0];
         _token1 = params.registeredTokens[1];
         _token2 = params.registeredTokens[2];
-        _token3 = totalTokens > 3 ? params.registeredTokens[3] : IERC20(0);
-        _token4 = totalTokens > 4 ? params.registeredTokens[4] : IERC20(0);
-        _token5 = totalTokens > 5 ? params.registeredTokens[5] : IERC20(0);
+        // _token3 = totalTokens > 3 ? params.registeredTokens[3] : IERC20(0);
+        // _token4 = totalTokens > 4 ? params.registeredTokens[4] : IERC20(0);
+        // _token5 = totalTokens > 5 ? params.registeredTokens[5] : IERC20(0);
 
         _scalingFactor0 = _computeScalingFactor(params.registeredTokens[0]);
         _scalingFactor1 = _computeScalingFactor(params.registeredTokens[1]);
@@ -197,31 +199,32 @@
 
     // Tokens
 
-    function _getTotalTokens() internal view virtual override returns (uint256) {
+    function _getTotalTokens() internal virtual override returns (uint256) {
         return _totalTokens;
     }
 
     function _getMaxTokens() internal pure override returns (uint256) {
         // The BPT will be one of the Pool tokens, but it is unaffected by the Stable 5 token limit.
         return StableMath._MAX_STABLE_TOKENS + 1;
+        // return 5 + 1;
     }
 
-    function getBptIndex() public view returns (uint256) {
+    function getBptIndex() public returns (uint256) {
         return _bptIndex;
     }
 
-    function _getTokenIndex(IERC20 token) internal view returns (uint256) {
+    function _getTokenIndex(IERC20 token) internal returns (uint256) {
         if (token == _token0) return 0;
         if (token == _token1) return 1;
         if (token == _token2) return 2;
-        if (token == _token3) return 3;
-        if (token == _token4) return 4;
-        if (token == _token5) return 5;
+        // if (token == _token3) return 3;
+        // if (token == _token4) return 4;
+        // if (token == _token5) return 5;
 
         _revert(Errors.INVALID_TOKEN);
     }
 
-    function _scalingFactor(IERC20) internal view virtual override returns (uint256) {
+    function _scalingFactor(IERC20) internal virtual override returns (uint256) {
         // We never use a single token's scaling factor by itself, we always process the entire array at once.
         // Therefore we don't bother providing an implementation for this.
         _revert(Errors.UNIMPLEMENTED);
@@ -232,7 +235,7 @@
     // Convert from an index into an array including BPT (the Vault's registered token list), to an index
     // into an array excluding BPT (usually from user input, such as amountsIn/Out).
     // `index` must not be the BPT token index itself.
-    function _skipBptIndex(uint256 index) internal view returns (uint256) {
+    function _skipBptIndex(uint256 index) internal returns (uint256) {
         // Currently this is never called with an index passed in from user input, so this check
         // should not be necessary. Included for completion (and future proofing).
         _require(index != getBptIndex(), Errors.OUT_OF_BOUNDS);
@@ -243,13 +246,26 @@
     /**
      * @dev Remove the item at `_bptIndex` from an arbitrary array (e.g., amountsIn).
      */
-    function _dropBptItem(uint256[] memory amounts) internal view returns (uint256[] memory) {
+    function _dropBptItem(uint256[] memory amounts) internal returns (uint256[] memory) {
         uint256[] memory amountsWithoutBpt = new uint256[](amounts.length - 1);
         for (uint256 i = 0; i < amountsWithoutBpt.length; i++) {
             amountsWithoutBpt[i] = amounts[i < getBptIndex() ? i : i + 1];
         }
-
+        // require(_getTotalTokens() == 3);
+        // require(amounts.length==_getTotalTokens());
+        // uint256[] memory amountsWithoutBpt = new uint256[](2);
+        // if (getBptIndex()==2) {
+        //     amountsWithoutBpt[0] = amounts[0];
+        //     amountsWithoutBpt[1] = amounts[1];
+        // } else if (getBptIndex()==1) {
+        //     amountsWithoutBpt[0] = amounts[0];
+        //     amountsWithoutBpt[1] = amounts[2];
+        // } else {
+        //     amountsWithoutBpt[0] = amounts[1];
+        //     amountsWithoutBpt[1] = amounts[2];
+        // }
         return amountsWithoutBpt;
+        // return amounts;
     }
 
     /**
@@ -258,7 +274,6 @@
      */
     function _dropBptItemFromBalances(uint256[] memory registeredBalances)
         internal
-        view
         returns (uint256, uint256[] memory)
     {
         return (_getVirtualSupply(registeredBalances[getBptIndex()]), _dropBptItem(registeredBalances));
@@ -268,7 +283,7 @@
     // to an index into an array including BPT (the Vault's registered token list).
     // `index` must not be the BPT token index itself, if it is the last element, and the result must be
     // in the range of registered tokens.
-    function _addBptIndex(uint256 index) internal view returns (uint256 registeredIndex) {
+    function _addBptIndex(uint256 index) internal returns (uint256 registeredIndex) {
         // This can be called from an index passed in from user input.
         registeredIndex = index < getBptIndex() ? index : index.add(1);
 
@@ -285,7 +300,6 @@
      */
     function _addBptItem(uint256[] memory amounts, uint256 bptAmount)
         internal
-        view
         returns (uint256[] memory registeredTokenAmounts)
     {
         registeredTokenAmounts = new uint256[](amounts.length + 1);
@@ -296,7 +310,7 @@
 
     // Rate Providers
 
-    function _getScalingFactor(uint256 index) internal view returns (uint256) {
+    function _getScalingFactor(uint256 index) internal returns (uint256) {
         if (index == 0) return _scalingFactor0;
         if (index == 1) return _scalingFactor1;
         if (index == 2) return _scalingFactor2;
@@ -311,7 +325,7 @@
     /**
      * @dev Returns the rate providers configured for each token (in the same order as registered).
      */
-    function getRateProviders() external view returns (IRateProvider[] memory) {
+    function getRateProviders() external returns (IRateProvider[] memory) {
         uint256 totalTokens = _getTotalTokens();
         IRateProvider[] memory providers = new IRateProvider[](totalTokens);
 
@@ -322,7 +336,7 @@
         return providers;
     }
 
-    function _getRateProvider(uint256 index) internal view returns (IRateProvider) {
+    function _getRateProvider(uint256 index) internal returns (IRateProvider) {
         if (index == 0) return _rateProvider0;
         if (index == 1) return _rateProvider1;
         if (index == 2) return _rateProvider2;
@@ -337,21 +351,21 @@
     /**
      * @notice Return true if the token at this index has a rate provider
      */
-    function _hasRateProvider(uint256 tokenIndex) internal view returns (bool) {
+    function _hasRateProvider(uint256 tokenIndex) public returns (bool) {
         return _rateProviderInfoBitmap.decodeBool(_RATE_PROVIDER_FLAGS_OFFSET + tokenIndex);
     }
 
     /**
      * @notice Return true if all tokens are exempt from yield fees.
      */
-    function _areAllTokensExempt() internal view returns (bool) {
+    function _areAllTokensExempt() public returns (bool) {
         return _allTokensExempt;
     }
 
     /**
      * @notice Return true if no tokens are exempt from yield fees.
      */
-    function _areNoTokensExempt() internal view returns (bool) {
+    function _areNoTokensExempt() public returns (bool) {
         return _noTokensExempt;
     }
 
@@ -362,12 +376,12 @@
      * If the BPT token is passed in (which doesn't make much sense, but shouldn't fail,
      * since it is a valid pool token), the corresponding flag will be false.
      */
-    function isTokenExemptFromYieldProtocolFee(IERC20 token) external view returns (bool) {
+    function isTokenExemptFromYieldProtocolFee(IERC20 token) external returns (bool) {
         return _isTokenExemptFromYieldProtocolFee(_getTokenIndex(token));
     }
 
     // This assumes the tokenIndex is valid. If it's not, it will just return false.
-    function _isTokenExemptFromYieldProtocolFee(uint256 registeredTokenIndex) internal view returns (bool) {
+    function _isTokenExemptFromYieldProtocolFee(uint256 registeredTokenIndex) public returns (bool) {
         return _rateProviderInfoBitmap.decodeBool(registeredTokenIndex);
     }
 
@@ -386,7 +400,7 @@
      * exchanged, so the Vault's balance increases after joins and decreases after exits. If users call the regular
      * joins/exit functions, the totalSupply can change as BPT are minted for joins or burned for exits.
      */
-    function _getVirtualSupply(uint256 bptBalance) internal view returns (uint256) {
+    function _getVirtualSupply(uint256 bptBalance) internal returns (uint256) {
         // The initial amount of BPT pre-minted is _PREMINTED_TOKEN_BALANCE, and it goes entirely to the pool balance in
         // the vault. So the virtualSupply (the amount of BPT supply in circulation) is defined as:
         // virtualSupply = totalSupply() - _balances[_bptIndex]
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-stable/contracts/StableMath.sol pool-stable/contracts/StableMath.sol
--- pool-stable/contracts/StableMath.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-stable/contracts/StableMath.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // These functions start with an underscore, as if they were part of a contract and not a library. At some point this
 // should be fixed. Additionally, some variables have non mixed case names (e.g. P_D) that relate to the mathematical
@@ -25,9 +25,9 @@
 library StableMath {
     using FixedPoint for uint256;
 
-    uint256 internal constant _MIN_AMP = 1;
-    uint256 internal constant _MAX_AMP = 5000;
-    uint256 internal constant _AMP_PRECISION = 1e3;
+    uint256 public constant _MIN_AMP = 1;
+    uint256 public constant _MAX_AMP = 5000;
+    uint256 public constant _AMP_PRECISION = 1e3;
 
     uint256 internal constant _MAX_STABLE_TOKENS = 5;
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-stable/contracts/StablePoolAmplification.sol pool-stable/contracts/StablePoolAmplification.sol
--- pool-stable/contracts/StablePoolAmplification.sol	2022-11-21 23:19:14.000000000 -0800
+++ pool-stable/contracts/StablePoolAmplification.sol	2022-11-22 00:39:04.000000000 -0800
@@ -14,12 +14,13 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../pool-utils/contracts/BasePoolAuthorization.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
 
-import "./StableMath.sol";
+// import "./StableMath.sol";
+import "../../../harnesses/StableMathHarness.sol";
 
-abstract contract StablePoolAmplification is BasePoolAuthorization {
+abstract contract StablePoolAmplification is BasePoolAuthorization, StableMath {
     using WordCodec for bytes32;
 
     // This contract uses timestamps to slowly update its Amplification parameter over time. These changes must occur
@@ -68,7 +69,7 @@
 
     function getAmplificationParameter()
         external
-        view
+       
         returns (
             uint256 value,
             bool isUpdating,
@@ -81,7 +82,7 @@
 
     // Return the current amp value, which will be an interpolation if there is an ongoing amp update.
     // Also return a flag indicating whether there is an ongoing update.
-    function _getAmplificationParameter() internal view returns (uint256 value, bool isUpdating) {
+    function _getAmplificationParameter() public returns (uint256 value, bool isUpdating) {
         (uint256 startValue, uint256 endValue, uint256 startTime, uint256 endTime) = _getAmplificationData();
 
         // Note that block.timestamp >= startTime, since startTime is set to the current time when an update starts
@@ -109,7 +110,7 @@
     // Unpack and return all amplification-related parameters.
     function _getAmplificationData()
         private
-        view
+       
         returns (
             uint256 startValue,
             uint256 endValue,
@@ -185,9 +186,9 @@
         uint256 endTime
     ) private {
         _startValue = startValue;
-        endValue = endValue;
-        startTime = startTime;
-        endTime = endTime;
+        _endValue = endValue;
+        _startTime = startTime;
+        _endTime = endTime;
         // _packedAmplificationData =
         //     WordCodec.encodeUint(startValue, _AMP_START_VALUE_OFFSET, _AMP_VALUE_BIT_LENGTH) |
         //     WordCodec.encodeUint(endValue, _AMP_END_VALUE_OFFSET, _AMP_VALUE_BIT_LENGTH) |
@@ -200,7 +201,7 @@
     /**
      * @dev Overrides only owner action to allow setting the cache duration for the token rates
      */
-    function _isOwnerOnlyAction(bytes32 actionId) internal view virtual override returns (bool) {
+    function _isOwnerOnlyAction(bytes32 actionId) internal virtual override returns (bool) {
         return
             (actionId == getActionId(this.startAmplificationParameterUpdate.selector)) ||
             (actionId == getActionId(this.stopAmplificationParameterUpdate.selector)) ||
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-stable/contracts/test/MockComposableStablePool.sol pool-stable/contracts/test/MockComposableStablePool.sol
--- pool-stable/contracts/test/MockComposableStablePool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-stable/contracts/test/MockComposableStablePool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -28,7 +28,7 @@
         _cacheTokenRateIfNecessary(index);
     }
 
-    function isOwnerOnlyAction(bytes32 actionId) external view returns (bool) {
+    function isOwnerOnlyAction(bytes32 actionId) external returns (bool) {
         return _isOwnerOnlyAction(actionId);
     }
 
@@ -70,7 +70,7 @@
         return _beforeJoinExit(registeredBalances);
     }
 
-    function getVirtualSupply() external view returns (uint256) {
+    function getVirtualSupply() external returns (uint256) {
         // For a 3 token General Pool, it is cheaper to query the balance for a single token than to read all balances,
         // as getPoolTokenInfo will check for token existence, token balance and Asset Manager (3 reads), while
         // getPoolTokens will read the number of tokens, their addresses and balances (7 reads).
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-stable/contracts/test/MockComposableStablePoolProtocolFees.sol pool-stable/contracts/test/MockComposableStablePoolProtocolFees.sol
--- pool-stable/contracts/test/MockComposableStablePoolProtocolFees.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-stable/contracts/test/MockComposableStablePoolProtocolFees.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
 
 import "../ComposableStablePoolProtocolFees.sol";
 
@@ -59,21 +59,16 @@
         // solhint-disable-previous-line no-empty-blocks
     }
 
-    function payProtocolFeesBeforeJoinExit(
-        uint256[] memory registeredBalances,
-        uint256 lastJoinExitAmp,
-        uint256 lastPostJoinExitInvariant
-    ) external returns (uint256 virtualSupply, uint256[] memory balances) {
-        (virtualSupply, balances, ) = _payProtocolFeesBeforeJoinExit(
-            registeredBalances,
-            lastJoinExitAmp,
-            lastPostJoinExitInvariant
-        );
+    function payProtocolFeesBeforeJoinExit(uint256[] memory balancesWithBpt)
+        external
+        returns (uint256 virtualSupply, uint256[] memory balances)
+    {
+        return _payProtocolFeesBeforeJoinExit(balancesWithBpt);
     }
 
     function updateInvariantAfterJoinExit(
         uint256 currentAmp,
-        uint256[] memory balances,
+        uint256[] memory balancesWithoutBpt,
         uint256 preJoinExitInvariant,
         uint256 preJoinExitSupply,
         uint256 postJoinExitSupply
@@ -81,7 +76,7 @@
         return
             _updateInvariantAfterJoinExit(
                 currentAmp,
-                balances,
+                balancesWithoutBpt,
                 preJoinExitInvariant,
                 preJoinExitSupply,
                 postJoinExitSupply
@@ -98,7 +93,7 @@
 
     function getGrowthInvariants(uint256[] memory balances, uint256 lastPostJoinExitAmp)
         external
-        view
+       
         returns (
             uint256 swapFeeGrowthInvariant,
             uint256 totalNonExemptGrowthInvariant,
@@ -108,22 +103,13 @@
         return _getGrowthInvariants(balances, lastPostJoinExitAmp);
     }
 
-    function getProtocolPoolOwnershipPercentage(
-        uint256[] memory balances,
-        uint256 lastJoinExitAmp,
-        uint256 lastPostJoinExitInvariant
-    ) external view returns (uint256) {
-        (uint256 percentage, ) = _getProtocolPoolOwnershipPercentage(
-            balances,
-            lastJoinExitAmp,
-            lastPostJoinExitInvariant
-        );
-        return percentage;
+    function getProtocolPoolOwnershipPercentage(uint256[] memory balances) external returns (uint256) {
+        return _getProtocolPoolOwnershipPercentage(balances);
     }
 
     // Stubbed functions
 
-    function _scalingFactors() internal view virtual override returns (uint256[] memory) {}
+    function _scalingFactors() internal virtual override returns (uint256[] memory) {}
 
     function _onInitializePool(
         bytes32,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-stable/contracts/test/MockComposableStablePoolRates.sol pool-stable/contracts/test/MockComposableStablePoolRates.sol
--- pool-stable/contracts/test/MockComposableStablePoolRates.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-stable/contracts/test/MockComposableStablePoolRates.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
 
 import "../ComposableStablePoolRates.sol";
 
@@ -61,7 +61,7 @@
 
     function getAdjustedBalances(uint256[] memory balances, bool ignoreExemptFlags)
         external
-        view
+       
         returns (uint256[] memory)
     {
         return _getAdjustedBalances(balances, ignoreExemptFlags);
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-stable/contracts/test/MockComposableStablePoolStorage.sol pool-stable/contracts/test/MockComposableStablePoolStorage.sol
--- pool-stable/contracts/test/MockComposableStablePoolStorage.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-stable/contracts/test/MockComposableStablePoolStorage.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
 
 import "../ComposableStablePoolStorage.sol";
 
@@ -49,94 +49,94 @@
         // solhint-disable-previous-line no-empty-blocks
     }
 
-    function skipBptIndex(uint256 index) external view returns (uint256) {
+    function skipBptIndex(uint256 index) external returns (uint256) {
         return _skipBptIndex(index);
     }
 
-    function addBptIndex(uint256 index) external view returns (uint256) {
+    function addBptIndex(uint256 index) external returns (uint256) {
         return _addBptIndex(index);
     }
 
-    function dropBptItem(uint256[] memory amounts) external view returns (uint256[] memory) {
+    function dropBptItem(uint256[] memory amounts) external returns (uint256[] memory) {
         return _dropBptItem(amounts);
     }
 
     function addBptItem(uint256[] memory amounts, uint256 bptAmount)
         external
-        view
+       
         returns (uint256[] memory amountsWithBpt)
     {
         return _addBptItem(amounts, bptAmount);
     }
 
-    function getRateProvider0() external view returns (IRateProvider) {
+    function getRateProvider0() external returns (IRateProvider) {
         return _rateProvider0;
     }
 
-    function getRateProvider1() external view returns (IRateProvider) {
+    function getRateProvider1() external returns (IRateProvider) {
         return _rateProvider1;
     }
 
-    function getRateProvider2() external view returns (IRateProvider) {
+    function getRateProvider2() external returns (IRateProvider) {
         return _rateProvider2;
     }
 
-    function getRateProvider3() external view returns (IRateProvider) {
+    function getRateProvider3() external returns (IRateProvider) {
         return _rateProvider3;
     }
 
-    function getRateProvider4() external view returns (IRateProvider) {
+    function getRateProvider4() external returns (IRateProvider) {
         return _rateProvider4;
     }
 
-    function getRateProvider5() external view returns (IRateProvider) {
+    function getRateProvider5() external returns (IRateProvider) {
         return _rateProvider5;
     }
 
-    function getScalingFactor0() external view returns (uint256) {
+    function getScalingFactor0() external returns (uint256) {
         return _scalingFactor0;
     }
 
-    function getScalingFactor1() external view returns (uint256) {
+    function getScalingFactor1() external returns (uint256) {
         return _scalingFactor1;
     }
 
-    function getScalingFactor2() external view returns (uint256) {
+    function getScalingFactor2() external returns (uint256) {
         return _scalingFactor2;
     }
 
-    function getScalingFactor3() external view returns (uint256) {
+    function getScalingFactor3() external returns (uint256) {
         return _scalingFactor3;
     }
 
-    function getScalingFactor4() external view returns (uint256) {
+    function getScalingFactor4() external returns (uint256) {
         return _scalingFactor4;
     }
 
-    function getScalingFactor5() external view returns (uint256) {
+    function getScalingFactor5() external returns (uint256) {
         return _scalingFactor5;
     }
 
-    function getRateProvider(uint256 index) external view returns (IRateProvider) {
+    function getRateProvider(uint256 index) external returns (IRateProvider) {
         return _getRateProvider(index);
     }
 
     // This assumes the tokenIndex is valid. If it's not, it will just return false.
-    function isTokenExemptFromYieldProtocolFeeByIndex(uint256 tokenIndex) external view returns (bool) {
+    function isTokenExemptFromYieldProtocolFeeByIndex(uint256 tokenIndex) external returns (bool) {
         return _isTokenExemptFromYieldProtocolFee(tokenIndex);
     }
 
-    function areAllTokensExempt() external view returns (bool) {
+    function areAllTokensExempt() external returns (bool) {
         return _areAllTokensExempt();
     }
 
-    function areNoTokensExempt() external view returns (bool) {
+    function areNoTokensExempt() external returns (bool) {
         return _areNoTokensExempt();
     }
 
     // Stubbed functions
 
-    function _scalingFactors() internal view virtual override returns (uint256[] memory) {}
+    function _scalingFactors() internal virtual override returns (uint256[] memory) {}
 
     function _onInitializePool(
         bytes32,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-stable/contracts/test/MockStablePoolAmplification.sol pool-stable/contracts/test/MockStablePoolAmplification.sol
--- pool-stable/contracts/test/MockStablePoolAmplification.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-stable/contracts/test/MockStablePoolAmplification.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "../StablePoolAmplification.sol";
 
@@ -34,11 +34,11 @@
         _vault = vault;
     }
 
-    function getVault() public view returns (IVault) {
+    function getVault() public returns (IVault) {
         return _vault;
     }
 
-    function _getAuthorizer() internal view override returns (IAuthorizer) {
+    function _getAuthorizer() internal override returns (IAuthorizer) {
         return getVault().getAuthorizer();
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/BalancerPoolToken.sol pool-utils/contracts/BalancerPoolToken.sol
--- pool-utils/contracts/BalancerPoolToken.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/BalancerPoolToken.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20Permit.sol";
 
 /**
  * @title Highly opinionated token implementation
@@ -33,7 +33,7 @@
  * - Assigns infinite allowance for all token holders to the Vault
  */
 contract BalancerPoolToken is ERC20Permit {
-    IVault private immutable _vault;
+    IVault internal immutable _vault;
 
     constructor(
         string memory tokenName,
@@ -43,7 +43,7 @@
         _vault = vault;
     }
 
-    function getVault() public view returns (IVault) {
+    function getVault() public returns (IVault) {
         return _vault;
     }
 
@@ -55,7 +55,7 @@
      * This is sound as the Vault already provides authorization mechanisms when initiation token transfers, which this
      * contract inherits.
      */
-    function allowance(address owner, address spender) public view override returns (uint256) {
+    function allowance(address owner, address spender) public override returns (uint256) {
         if (spender == address(getVault())) {
             return uint256(-1);
         } else {
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/BaseGeneralPool.sol pool-utils/contracts/BaseGeneralPool.sol
--- pool-utils/contracts/BaseGeneralPool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/BaseGeneralPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
 
 import "./BasePool.sol";
 
@@ -34,7 +34,7 @@
         uint256[] memory balances,
         uint256 indexIn,
         uint256 indexOut
-    ) external override onlyVault(swapRequest.poolId) returns (uint256) {
+    ) public override onlyVault(swapRequest.poolId) returns (uint256) {
         _beforeSwapJoinExit();
 
         _validateIndexes(indexIn, indexOut, _getTotalTokens());
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/BaseMinimalSwapInfoPool.sol pool-utils/contracts/BaseMinimalSwapInfoPool.sol
--- pool-utils/contracts/BaseMinimalSwapInfoPool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/BaseMinimalSwapInfoPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
+import "../../interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
 
 import "./BasePool.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/BasePool.sol pool-utils/contracts/BasePool.sol
--- pool-utils/contracts/BasePool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/BasePool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,17 +15,17 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IAssetManager.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../interfaces/contracts/pool-utils/IAssetManager.sol";
+import "../../interfaces/contracts/pool-utils/IControlledPool.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
+
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../solidity-utils/contracts/helpers/TemporarilyPausable.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./BalancerPoolToken.sol";
 import "./BasePoolAuthorization.sol";
@@ -147,11 +147,11 @@
     /**
      * @notice Return the pool id.
      */
-    function getPoolId() public view override returns (bytes32) {
+    function getPoolId() public override returns (bytes32) {
         return _poolId;
     }
 
-    function _getTotalTokens() internal view virtual returns (uint256);
+    function _getTotalTokens() internal virtual returns (uint256);
 
     function _getMaxTokens() internal pure virtual returns (uint256);
 
@@ -170,7 +170,7 @@
      * @notice Return the current value of the swap fee percentage.
      * @dev This is stored in `_miscData`.
      */
-    function getSwapFeePercentage() public view virtual override returns (uint256) {
+    function getSwapFeePercentage() public virtual override returns (uint256) {
         return _miscData.decodeUint(_SWAP_FEE_PERCENTAGE_OFFSET, _SWAP_FEE_PERCENTAGE_BIT_LENGTH);
     }
 
@@ -178,7 +178,7 @@
      * @notice Return the ProtocolFeesCollector contract.
      * @dev This is immutable, and retrieved from the Vault on construction. (It is also immutable in the Vault.)
      */
-    function getProtocolFeesCollector() public view returns (IProtocolFeesCollector) {
+    function getProtocolFeesCollector() public returns (IProtocolFeesCollector) {
         return _protocolFeesCollector;
     }
 
@@ -215,7 +215,7 @@
     /**
      * @notice Returns whether the pool is in Recovery Mode.
      */
-    function inRecoveryMode() public view override returns (bool) {
+    function inRecoveryMode() public override returns (bool) {
         return _miscData.decodeBool(_RECOVERY_MODE_BIT_OFFSET);
     }
 
@@ -280,14 +280,14 @@
         _setPaused(false);
     }
 
-    function _isOwnerOnlyAction(bytes32 actionId) internal view virtual override returns (bool) {
+    function _isOwnerOnlyAction(bytes32 actionId) internal virtual override returns (bool) {
         return
             (actionId == getActionId(this.setSwapFeePercentage.selector)) ||
             (actionId == getActionId(this.setAssetManagerPoolConfig.selector)) ||
             super._isOwnerOnlyAction(actionId);
     }
 
-    function _getMiscData() internal view returns (bytes32) {
+    function _getMiscData() internal returns (bytes32) {
         return _miscData;
     }
 
@@ -319,7 +319,7 @@
         uint256 lastChangeBlock,
         uint256 protocolSwapFeePercentage,
         bytes memory userData
-    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {
+    ) public override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {
         _beforeSwapJoinExit();
 
         uint256[] memory scalingFactors = _scalingFactors();
@@ -381,7 +381,7 @@
         uint256 lastChangeBlock,
         uint256 protocolSwapFeePercentage,
         bytes memory userData
-    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {
+    ) public override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {
         uint256[] memory amountsOut;
         uint256 bptAmountIn;
 
@@ -436,7 +436,7 @@
      * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault
      * data, such as the protocol swap fee percentage and Pool balances.
      *
-     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must
+     * Like `IVault.queryBatchSwap`, this function is notdue to internal implementation details: the caller must
      * explicitly use eth_call instead of eth_sendTransaction.
      */
     function queryJoin(
@@ -475,7 +475,7 @@
      * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault
      * data, such as the protocol swap fee percentage and Pool balances.
      *
-     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must
+     * Like `IVault.queryBatchSwap`, this function is notdue to internal implementation details: the caller must
      * explicitly use eth_call instead of eth_sendTransaction.
      */
     function queryExit(
@@ -615,7 +615,7 @@
     /**
      * @dev Adds swap fee amount to `amount`, returning a higher value.
      */
-    function _addSwapFeeAmount(uint256 amount) internal view returns (uint256) {
+    function _addSwapFeeAmount(uint256 amount) internal returns (uint256) {
         // This returns amount + fee amount, so we round up (favoring a higher fee amount).
         return amount.divUp(getSwapFeePercentage().complement());
     }
@@ -623,7 +623,7 @@
     /**
      * @dev Subtracts swap fee amount from `amount`, returning a lower value.
      */
-    function _subtractSwapFeeAmount(uint256 amount) internal view returns (uint256) {
+    function _subtractSwapFeeAmount(uint256 amount) internal returns (uint256) {
         // This returns amount - fee amount, so we round up (favoring a higher fee amount).
         uint256 feeAmount = amount.mulUp(getSwapFeePercentage());
         return amount.sub(feeAmount);
@@ -635,7 +635,7 @@
      * @dev Returns a scaling factor that, when multiplied to a token amount for `token`, normalizes its balance as if
      * it had 18 decimals.
      */
-    function _computeScalingFactor(IERC20 token) internal view returns (uint256) {
+    function _computeScalingFactor(IERC20 token) internal returns (uint256) {
         if (address(token) == address(this)) {
             return FixedPoint.ONE;
         }
@@ -661,15 +661,15 @@
      *
      * The 1e7 figure is the result of 2**256 / (1e18 * 1e18 * 2**112).
      */
-    function _scalingFactor(IERC20 token) internal view virtual returns (uint256);
+    function _scalingFactor(IERC20 token) internal virtual returns (uint256);
 
     /**
      * @dev Same as `_scalingFactor()`, except for all registered tokens (in the same order as registered). The Vault
      * will always pass balances in this order when calling any of the Pool hooks.
      */
-    function _scalingFactors() internal view virtual returns (uint256[] memory);
+    function _scalingFactors() internal virtual returns (uint256[] memory);
 
-    function getScalingFactors() external view override returns (uint256[] memory) {
+    function getScalingFactors() external override returns (uint256[] memory) {
         return _scalingFactors();
     }
 
@@ -740,7 +740,7 @@
         }
     }
 
-    function _getAuthorizer() internal view override returns (IAuthorizer) {
+    function _getAuthorizer() internal override returns (IAuthorizer) {
         // Access control management is delegated to the Vault's Authorizer. This lets Balancer Governance manage which
         // accounts can call permissioned functions: for example, to perform emergency pauses.
         // If the owner is delegated, then *all* permissioned functions, including `setSwapFeePercentage`, will be under
@@ -759,7 +759,7 @@
         function(bytes32, address, address, uint256[] memory, uint256, uint256, uint256[] memory, bytes memory)
             internal
             returns (uint256, uint256[] memory) _action,
-        function(uint256[] memory, uint256[] memory) internal view _downscaleArray
+        function(uint256[] memory, uint256[] memory) internal _downscaleArray
     ) private {
         // This uses the same technique used by the Vault in queryBatchSwap. Refer to that function for a detailed
         // explanation.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/BasePoolAuthorization.sol pool-utils/contracts/BasePoolAuthorization.sol
--- pool-utils/contracts/BasePoolAuthorization.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/BasePoolAuthorization.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
 
 /**
  * @dev Base authorization layer implementation for Pools.
@@ -31,21 +31,21 @@
 abstract contract BasePoolAuthorization is Authentication {
     address private immutable _owner;
 
-    address private constant _DELEGATE_OWNER = 0xBA1BA1ba1BA1bA1bA1Ba1BA1ba1BA1bA1ba1ba1B;
+    address public constant _DELEGATE_OWNER = 0xBA1BA1ba1BA1bA1bA1Ba1BA1ba1BA1bA1ba1ba1B;
 
     constructor(address owner) {
         _owner = owner;
     }
 
-    function getOwner() public view returns (address) {
+    function getOwner() public returns (address) {
         return _owner;
     }
 
-    function getAuthorizer() external view returns (IAuthorizer) {
+    function getAuthorizer() external returns (IAuthorizer) {
         return _getAuthorizer();
     }
 
-    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {
+    function _canPerform(bytes32 actionId, address account) internal override returns (bool) {
         if ((getOwner() != _DELEGATE_OWNER) && _isOwnerOnlyAction(actionId)) {
             // Only the owner can perform "owner only" actions, unless the owner is delegated.
             return msg.sender == getOwner();
@@ -55,9 +55,9 @@
         }
     }
 
-    function _isOwnerOnlyAction(bytes32) internal view virtual returns (bool) {
+    function _isOwnerOnlyAction(bytes32) internal virtual returns (bool) {
         return false;
     }
 
-    function _getAuthorizer() internal view virtual returns (IAuthorizer);
+    function _getAuthorizer() internal virtual returns (IAuthorizer);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/RecoveryMode.sol pool-utils/contracts/RecoveryMode.sol
--- pool-utils/contracts/RecoveryMode.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/RecoveryMode.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/pool-utils/BasePoolUserData.sol";
+import "../../interfaces/contracts/pool-utils/IRecoveryMode.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 import "./BasePoolAuthorization.sol";
 
@@ -80,7 +80,7 @@
     /**
      * @notice Override to check storage and return whether the pool is in Recovery Mode
      */
-    function inRecoveryMode() public view virtual override returns (bool);
+    function inRecoveryMode() public virtual override returns (bool);
 
     /**
      * @dev Override to update storage and emit the event
@@ -93,14 +93,14 @@
     /**
      * @dev Reverts if the contract is not in Recovery Mode.
      */
-    function _ensureInRecoveryMode() internal view {
+    function _ensureInRecoveryMode() internal{
         _require(inRecoveryMode(), Errors.NOT_IN_RECOVERY_MODE);
     }
 
     /**
      * @dev Reverts if the contract is in Recovery Mode.
      */
-    function _ensureNotInRecoveryMode() internal view {
+    function _ensureNotInRecoveryMode() internal{
         _require(!inRecoveryMode(), Errors.IN_RECOVERY_MODE);
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/controllers/BasePoolController.sol pool-utils/contracts/controllers/BasePoolController.sol
--- pool-utils/contracts/controllers/BasePoolController.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/controllers/BasePoolController.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IBasePoolController.sol";
+import "../../interfaces/contracts/pool-utils/IBasePoolController.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
 
 import "../BasePoolAuthorization.sol";
 
@@ -131,42 +131,42 @@
     /**
      * @dev Getter for the current manager.
      */
-    function getManager() public view returns (address) {
+    function getManager() public returns (address) {
         return _manager;
     }
 
     /**
      * @dev Returns the manager candidate, which will be non-zero if there is a pending ownership transfer.
      */
-    function getManagerCandidate() external view returns (address) {
+    function getManagerCandidate() external returns (address) {
         return _managerCandidate;
     }
 
     /**
      * @dev Getter for the current swap fee controller (0 if fees are fixed).
      */
-    function getSwapFeeController() public view returns (address) {
+    function getSwapFeeController() public returns (address) {
         return _swapFeeController;
     }
 
     /**
      * @dev Getter for the transferOwnership permission.
      */
-    function canTransferOwnership() public view returns (bool) {
+    function canTransferOwnership() public returns (bool) {
         return _controllerState.decodeBool(_TRANSFER_OWNERSHIP_OFFSET);
     }
 
     /**
      * @dev Getter for the canChangeSwapFee permission.
      */
-    function canChangeSwapFee() public view returns (bool) {
+    function canChangeSwapFee() public returns (bool) {
         return _controllerState.decodeBool(_CHANGE_SWAP_FEE_OFFSET);
     }
 
     /**
      * @dev Getter for the canUpdateMetadata permission.
      */
-    function canUpdateMetadata() public view returns (bool) {
+    function canUpdateMetadata() public returns (bool) {
         return _controllerState.decodeBool(_UPDATE_METADATA_OFFSET);
     }
 
@@ -261,7 +261,7 @@
     /**
      * @dev Getter for the optional metadata.
      */
-    function getMetadata() public view returns (bytes memory) {
+    function getMetadata() public returns (bytes memory) {
         return _metadata;
     }
 
@@ -275,7 +275,7 @@
         emit MetadataUpdated(metadata);
     }
 
-    function _ensurePoolIsBound() private view {
+    function _ensurePoolIsBound() private{
         _require(pool != address(0), Errors.UNINITIALIZED_POOL_CONTROLLER);
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/controllers/ManagedPoolController.sol pool-utils/contracts/controllers/ManagedPoolController.sol
--- pool-utils/contracts/controllers/ManagedPoolController.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/controllers/ManagedPoolController.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledManagedPool.sol";
+import "../../interfaces/contracts/pool-utils/IControlledManagedPool.sol";
 
 import "./BasePoolController.sol";
 
@@ -97,49 +97,49 @@
     /**
      * @dev Getter for the canChangeWeights permission.
      */
-    function canChangeWeights() public view returns (bool) {
+    function canChangeWeights() public returns (bool) {
         return _controllerState.decodeBool(_CHANGE_WEIGHTS_OFFSET);
     }
 
     /**
      * @dev Getter for the canDisableSwaps permission.
      */
-    function canDisableSwaps() public view returns (bool) {
+    function canDisableSwaps() public returns (bool) {
         return _controllerState.decodeBool(_DISABLE_SWAPS_OFFSET);
     }
 
     /**
      * @dev Getter for the mustAllowlistLPs permission.
      */
-    function canSetMustAllowlistLPs() public view returns (bool) {
+    function canSetMustAllowlistLPs() public returns (bool) {
         return _controllerState.decodeBool(_MUST_ALLOWLIST_LPS_OFFSET);
     }
 
     /**
      * @dev Getter for the canSetCircuitBreakers permission.
      */
-    function canSetCircuitBreakers() public view returns (bool) {
+    function canSetCircuitBreakers() public returns (bool) {
         return _controllerState.decodeBool(_CIRCUIT_BREAKERS_OFFSET);
     }
 
     /**
      * @dev Getter for the canChangeTokens permission.
      */
-    function canChangeTokens() public view returns (bool) {
+    function canChangeTokens() public returns (bool) {
         return _controllerState.decodeBool(_CHANGE_TOKENS_OFFSET);
     }
 
     /**
      * @dev Getter for the canChangeManagementFees permission.
      */
-    function canChangeManagementFees() public view returns (bool) {
+    function canChangeManagementFees() public returns (bool) {
         return _controllerState.decodeBool(_CHANGE_MGMT_FEES_OFFSET);
     }
 
     /**
      * @dev Getter for the minimum weight change duration.
      */
-    function getMinWeightChangeDuration() external view returns (uint256) {
+    function getMinWeightChangeDuration() external returns (uint256) {
         return _minWeightChangeDuration;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/factories/BasePoolFactory.sol pool-utils/contracts/factories/BasePoolFactory.sol
--- pool-utils/contracts/factories/BasePoolFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/factories/BasePoolFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -52,11 +52,11 @@
         _protocolFeeProvider = protocolFeeProvider;
     }
 
-    function isPoolFromFactory(address pool) external view override returns (bool) {
+    function isPoolFromFactory(address pool) external override returns (bool) {
         return _isPoolFromFactory[pool];
     }
 
-    function isDisabled() public view override returns (bool) {
+    function isDisabled() public override returns (bool) {
         return _disabled;
     }
 
@@ -68,11 +68,11 @@
         emit FactoryDisabled();
     }
 
-    function _ensureEnabled() internal view {
+    function _ensureEnabled() internal{
         _require(!isDisabled(), Errors.DISABLED);
     }
 
-    function getProtocolFeePercentagesProvider() public view returns (IProtocolFeePercentagesProvider) {
+    function getProtocolFeePercentagesProvider() public returns (IProtocolFeePercentagesProvider) {
         return _protocolFeeProvider;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/factories/FactoryWidePauseWindow.sol pool-utils/contracts/factories/FactoryWidePauseWindow.sol
--- pool-utils/contracts/factories/FactoryWidePauseWindow.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/factories/FactoryWidePauseWindow.sol	2022-11-22 00:28:06.000000000 -0800
@@ -43,7 +43,7 @@
      * `pauseWindowDuration` will decrease over time until it reaches zero, at which point both it and
      * `bufferPeriodDuration` will be zero forever, meaning deployed Pools will not be pausable.
      */
-    function getPauseConfiguration() public view returns (uint256 pauseWindowDuration, uint256 bufferPeriodDuration) {
+    function getPauseConfiguration() public returns (uint256 pauseWindowDuration, uint256 bufferPeriodDuration) {
         uint256 currentTime = block.timestamp;
         if (currentTime < _poolsPauseWindowEndTime) {
             // The buffer period is always the same since its duration is related to how much time is needed to respond
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol
--- pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../../solidity-utils/contracts/math/Math.sol";
 import "./ProtocolFees.sol";
 
 library InvariantGrowthProtocolSwapFees {
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol
--- pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,10 +14,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
 
 import "../RecoveryMode.sol";
 
@@ -97,7 +97,7 @@
      * immutable for swap fee queries. Alternatively, it will track the global fee percentage set in the
      * ProtocolFeePercentagesProvider.
      */
-    function getProtocolFeePercentageCache(uint256 feeType) public view returns (uint256) {
+    function getProtocolFeePercentageCache(uint256 feeType) public returns (uint256) {
         if (inRecoveryMode()) {
             return 0;
         }
@@ -138,7 +138,7 @@
     /**
      * @dev Returns whether this Pool tracks protocol swap fee changes in the IProtocolFeePercentagesProvider.
      */
-    function getProtocolSwapFeeDelegation() public view returns (bool) {
+    function getProtocolSwapFeeDelegation() public returns (bool) {
         return _delegatedProtocolSwapFees;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/protocol-fees/ProtocolFees.sol pool-utils/contracts/protocol-fees/ProtocolFees.sol
--- pool-utils/contracts/protocol-fees/ProtocolFees.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/protocol-fees/ProtocolFees.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../../solidity-utils/contracts/math/Math.sol";
 
 library ProtocolFees {
     using FixedPoint for uint256;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/rates/PriceRateCache.sol pool-utils/contracts/rates/PriceRateCache.sol
--- pool-utils/contracts/rates/PriceRateCache.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/rates/PriceRateCache.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../../solidity-utils/contracts/helpers/WordCodec.sol";
 
 /**
  * Price rate caches are used to avoid querying the price rate for a token every time we need to work with it. It is
@@ -44,21 +44,21 @@
     /**
      * @dev Returns the current rate in the price rate cache.
      */
-    function getCurrentRate(bytes32 cache) internal pure returns (uint256) {
+    function getCurrentRate(bytes32 cache) public pure returns (uint256) {
         return cache.decodeUint(_CURRENT_PRICE_RATE_OFFSET, _RATE_BIT_LENGTH);
     }
 
     /**
      * @dev Returns the old rate in the price rate cache.
      */
-    function getOldRate(bytes32 cache) internal pure returns (uint256) {
+    function getOldRate(bytes32 cache) public pure returns (uint256) {
         return cache.decodeUint(_OLD_PRICE_RATE_OFFSET, _RATE_BIT_LENGTH);
     }
 
     /**
      * @dev Copies the current rate to the old rate.
      */
-    function updateOldRate(bytes32 cache) internal pure returns (bytes32) {
+    function updateOldRate(bytes32 cache) public pure returns (bytes32) {
         return cache.insertUint(getCurrentRate(cache), _OLD_PRICE_RATE_OFFSET, _RATE_BIT_LENGTH);
     }
 
@@ -85,7 +85,7 @@
         bytes32 cache,
         uint256 rate,
         uint256 duration
-    ) internal view returns (bytes32) {
+    ) internal returns (bytes32) {
         _require(rate >> _RATE_BIT_LENGTH == 0, Errors.PRICE_RATE_OVERFLOW);
 
         // solhint-disable not-rely-on-time
@@ -108,7 +108,7 @@
     /**
      * @dev Update the duration (and expiration) in a price rate cache.
      */
-    function updateDuration(bytes32 cache, uint256 duration) internal view returns (bytes32) {
+    function updateDuration(bytes32 cache, uint256 duration) internal returns (bytes32) {
         return
             cache.insertUint(duration, _PRICE_RATE_CACHE_DURATION_OFFSET, _DURATION_BIT_LENGTH).insertUint(
                 block.timestamp + duration,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/test/MockAssetManager.sol pool-utils/contracts/test/MockAssetManager.sol
--- pool-utils/contracts/test/MockAssetManager.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/test/MockAssetManager.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IAssetManager.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/pool-utils/IAssetManager.sol";
 
 contract MockAssetManager is IAssetManager {
     event Rebalanced(address assetManager, bytes32 poolId, IERC20 token, bool force);
@@ -31,7 +31,7 @@
         emit AssetManagerPoolConfigSet(address(this), poolId, _token, poolConfig);
     }
 
-    function getToken() external view override returns (IERC20) {
+    function getToken() external override returns (IERC20) {
         return _token;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/test/MockBalancerPoolToken.sol pool-utils/contracts/test/MockBalancerPoolToken.sol
--- pool-utils/contracts/test/MockBalancerPoolToken.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/test/MockBalancerPoolToken.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "../BalancerPoolToken.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/test/MockBasePool.sol pool-utils/contracts/test/MockBasePool.sol
--- pool-utils/contracts/test/MockBasePool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/test/MockBasePool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
 
 import "../BasePool.sol";
 
@@ -62,7 +62,7 @@
         _setMiscData(data);
     }
 
-    function getMiscData() external view returns (bytes32) {
+    function getMiscData() external returns (bytes32) {
         return _getMiscData();
     }
 
@@ -130,7 +130,7 @@
         return 8;
     }
 
-    function _getTotalTokens() internal view override returns (uint256) {
+    function _getTotalTokens() internal override returns (uint256) {
         return _totalTokens;
     }
 
@@ -138,7 +138,7 @@
         return FixedPoint.ONE;
     }
 
-    function _scalingFactors() internal view override returns (uint256[] memory scalingFactors) {
+    function _scalingFactors() internal override returns (uint256[] memory scalingFactors) {
         uint256 numTokens = _getTotalTokens();
 
         scalingFactors = new uint256[](numTokens);
@@ -186,15 +186,15 @@
         return amounts;
     }
 
-    function doNotCallInRecovery() external view whenNotInRecoveryMode {
+    function doNotCallInRecovery() externalwhenNotInRecoveryMode {
         // solhint-disable-previous-line no-empty-blocks
     }
 
-    function notCallableInRecovery() external view {
+    function notCallableInRecovery() external{
         _ensureNotInRecoveryMode();
     }
 
-    function onlyCallableInRecovery() external view {
+    function onlyCallableInRecovery() external{
         _ensureInRecoveryMode();
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/test/MockFailureModes.sol pool-utils/contracts/test/MockFailureModes.sol
--- pool-utils/contracts/test/MockFailureModes.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/test/MockFailureModes.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 abstract contract MockFailureModes {
     enum FailureMode { INVARIANT, PRICE_RATE }
@@ -43,7 +43,7 @@
     }
 
     // Revert with the associated message if this failure mode is activated
-    function _ensureNotFailed(FailureMode mode) private view {
+    function _ensureNotFailed(FailureMode mode) private{
         if (_failureState[mode]) {
             _revert(_failureCode[mode] == 0 ? Errors.INDUCED_FAILURE : _failureCode[mode]);
         }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/test/MockPriceRateCache.sol pool-utils/contracts/test/MockPriceRateCache.sol
--- pool-utils/contracts/test/MockPriceRateCache.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/test/MockPriceRateCache.sol	2022-11-22 00:28:06.000000000 -0800
@@ -19,11 +19,11 @@
 contract MockPriceRateCache {
     bytes32 private _cache;
 
-    function getCurrentRate() public view returns (uint256) {
+    function getCurrentRate() public returns (uint256) {
         return PriceRateCache.getCurrentRate(_cache);
     }
 
-    function getOldRate() external view returns (uint256) {
+    function getOldRate() external returns (uint256) {
         return PriceRateCache.getOldRate(_cache);
     }
 
@@ -33,11 +33,11 @@
         return _cache;
     }
 
-    function getDuration() public view returns (uint256) {
+    function getDuration() public returns (uint256) {
         return PriceRateCache.getDuration(_cache);
     }
 
-    function getTimestamps() public view returns (uint256 duration, uint256 expires) {
+    function getTimestamps() public returns (uint256 duration, uint256 expires) {
         return PriceRateCache.getTimestamps(_cache);
     }
 
@@ -61,7 +61,7 @@
 
     function decode()
         external
-        view
+       
         returns (
             uint256 rate,
             uint256 duration,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/test/MockRateProvider.sol pool-utils/contracts/test/MockRateProvider.sol
--- pool-utils/contracts/test/MockRateProvider.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/test/MockRateProvider.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 contract MockRateProvider is IRateProvider {
     uint256 internal _rate;
@@ -25,7 +25,7 @@
         _rate = FixedPoint.ONE;
     }
 
-    function getRate() external view override returns (uint256) {
+    function getRate() external override returns (uint256) {
         return _rate;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/test/MockRecoveryModeStorage.sol pool-utils/contracts/test/MockRecoveryModeStorage.sol
--- pool-utils/contracts/test/MockRecoveryModeStorage.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/test/MockRecoveryModeStorage.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "../RecoveryMode.sol";
 
@@ -24,7 +24,7 @@
     /**
      * @notice Returns whether the pool is in Recovery Mode.
      */
-    function inRecoveryMode() public view override returns (bool) {
+    function inRecoveryMode() public override returns (bool) {
         return _recoveryMode;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-utils/contracts/test/MockVault.sol pool-utils/contracts/test/MockVault.sol
--- pool-utils/contracts/test/MockVault.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-utils/contracts/test/MockVault.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,15 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/vault/IPoolSwapStructs.sol";
+import "../../interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
 
-import "@balancer-labs/v2-vault/contracts/ProtocolFeesCollector.sol";
+import "../../vault/contracts/ProtocolFeesCollector.sol";
 
 contract MockVault is IPoolSwapStructs {
     struct Pool {
@@ -51,15 +51,15 @@
         _protocolFeesCollector = new ProtocolFeesCollector(IVault(address(this)));
     }
 
-    function getAuthorizer() external view returns (IAuthorizer) {
+    function getAuthorizer() external returns (IAuthorizer) {
         return _authorizer;
     }
 
-    function getProtocolFeesCollector() public view returns (IProtocolFeesCollector) {
+    function getProtocolFeesCollector() public returns (IProtocolFeesCollector) {
         return _protocolFeesCollector;
     }
 
-    function getPoolTokens(bytes32 poolId) external view returns (IERC20[] memory tokens, uint256[] memory balances) {
+    function getPoolTokens(bytes32 poolId) external returns (IERC20[] memory tokens, uint256[] memory balances) {
         Pool storage pool = pools[poolId];
         tokens = new IERC20[](pool.tokens.length);
         balances = new uint256[](pool.tokens.length);
@@ -72,7 +72,7 @@
 
     function getPoolTokenInfo(bytes32 poolId, IERC20 token)
         external
-        view
+       
         returns (
             uint256 cash,
             uint256,
@@ -84,7 +84,7 @@
         cash = pool.balances[token];
     }
 
-    function registerPool(IVault.PoolSpecialization) external view returns (bytes32) {
+    function registerPool(IVault.PoolSpecialization) external returns (bytes32) {
         // solhint-disable-previous-line no-empty-blocks
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/BaseWeightedPool.sol pool-weighted/contracts/BaseWeightedPool.sol
--- pool-weighted/contracts/BaseWeightedPool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/BaseWeightedPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -73,17 +73,17 @@
     /**
      * @dev Returns the normalized weight of `token`. Weights are fixed point numbers that sum to FixedPoint.ONE.
      */
-    function _getNormalizedWeight(IERC20 token) internal view virtual returns (uint256);
+    function _getNormalizedWeight(IERC20 token) internal virtual returns (uint256);
 
     /**
      * @dev Returns all normalized weights, in the same order as the Pool's tokens.
      */
-    function _getNormalizedWeights() internal view virtual returns (uint256[] memory);
+    function _getNormalizedWeights() internal virtual returns (uint256[] memory);
 
     /**
      * @dev Returns the current value of the invariant.
      */
-    function getInvariant() public view returns (uint256) {
+    function getInvariant() public returns (uint256) {
         (, uint256[] memory balances, ) = getVault().getPoolTokens(getPoolId());
 
         // Since the Pool hooks always work with upscaled balances, we manually
@@ -94,7 +94,7 @@
         return WeightedMath._calculateInvariant(normalizedWeights, balances);
     }
 
-    function getNormalizedWeights() external view returns (uint256[] memory) {
+    function getNormalizedWeights() external returns (uint256[] memory) {
         return _getNormalizedWeights();
     }
 
@@ -238,7 +238,7 @@
         uint256[] memory scalingFactors,
         uint256 totalSupply,
         bytes memory userData
-    ) internal view virtual returns (uint256, uint256[] memory) {
+    ) internal virtual returns (uint256, uint256[] memory) {
         WeightedPoolUserData.JoinKind kind = userData.joinKind();
 
         if (kind == WeightedPoolUserData.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {
@@ -258,7 +258,7 @@
         uint256[] memory scalingFactors,
         uint256 totalSupply,
         bytes memory userData
-    ) private view returns (uint256, uint256[] memory) {
+    ) private returns (uint256, uint256[] memory) {
         (uint256[] memory amountsIn, uint256 minBPTAmountOut) = userData.exactTokensInForBptOut();
         InputHelpers.ensureInputLengthMatch(balances.length, amountsIn.length);
 
@@ -282,7 +282,7 @@
         uint256[] memory normalizedWeights,
         uint256 totalSupply,
         bytes memory userData
-    ) private view returns (uint256, uint256[] memory) {
+    ) private returns (uint256, uint256[] memory) {
         (uint256 bptAmountOut, uint256 tokenIndex) = userData.tokenInForExactBptOut();
         // Note that there is no maximum amountIn parameter: this is handled by `IVault.joinPool`.
 
@@ -359,7 +359,7 @@
         uint256[] memory scalingFactors,
         uint256 totalSupply,
         bytes memory userData
-    ) internal view virtual returns (uint256, uint256[] memory) {
+    ) internal virtual returns (uint256, uint256[] memory) {
         WeightedPoolUserData.ExitKind kind = userData.exitKind();
 
         if (kind == WeightedPoolUserData.ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT) {
@@ -378,7 +378,7 @@
         uint256[] memory normalizedWeights,
         uint256 totalSupply,
         bytes memory userData
-    ) private view returns (uint256, uint256[] memory) {
+    ) private returns (uint256, uint256[] memory) {
         (uint256 bptAmountIn, uint256 tokenIndex) = userData.exactBptInForTokenOut();
         // Note that there is no minimum amountOut parameter: this is handled by `IVault.exitPool`.
 
@@ -419,7 +419,7 @@
         uint256[] memory scalingFactors,
         uint256 totalSupply,
         bytes memory userData
-    ) private view returns (uint256, uint256[] memory) {
+    ) private returns (uint256, uint256[] memory) {
         (uint256[] memory amountsOut, uint256 maxBPTAmountIn) = userData.bptInForExactTokensOut();
         InputHelpers.ensureInputLengthMatch(amountsOut.length, balances.length);
         _upscaleArray(amountsOut, scalingFactors);
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/WeightedMath.sol pool-weighted/contracts/WeightedMath.sol
--- pool-weighted/contracts/WeightedMath.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/WeightedMath.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // These functions start with an underscore, as if they were part of a contract and not a library. At some point this
 // should be fixed.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/WeightedPool.sol pool-weighted/contracts/WeightedPool.sol
--- pool-weighted/contracts/WeightedPool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/WeightedPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -137,7 +137,7 @@
         _normalizedWeight7 = numTokens > 7 ? params.normalizedWeights[7] : 0;
     }
 
-    function _getNormalizedWeight(IERC20 token) internal view virtual override returns (uint256) {
+    function _getNormalizedWeight(IERC20 token) internal virtual override returns (uint256) {
         // prettier-ignore
         if (token == _token0) { return _normalizedWeight0; }
         else if (token == _token1) { return _normalizedWeight1; }
@@ -152,7 +152,7 @@
         }
     }
 
-    function _getNormalizedWeights() internal view virtual override returns (uint256[] memory) {
+    function _getNormalizedWeights() internal virtual override returns (uint256[] memory) {
         uint256 totalTokens = _getTotalTokens();
         uint256[] memory normalizedWeights = new uint256[](totalTokens);
 
@@ -175,7 +175,7 @@
         return _MAX_TOKENS;
     }
 
-    function _getTotalTokens() internal view virtual override returns (uint256) {
+    function _getTotalTokens() internal virtual override returns (uint256) {
         return _totalTokens;
     }
 
@@ -183,7 +183,7 @@
      * @dev Returns the scaling factor for one of the Pool's tokens. Reverts if `token` is not a token registered by the
      * Pool.
      */
-    function _scalingFactor(IERC20 token) internal view virtual override returns (uint256) {
+    function _scalingFactor(IERC20 token) internal virtual override returns (uint256) {
         // prettier-ignore
         if (token == _token0) { return _getScalingFactor0(); }
         else if (token == _token1) { return _getScalingFactor1(); }
@@ -198,7 +198,7 @@
         }
     }
 
-    function _scalingFactors() internal view virtual override returns (uint256[] memory) {
+    function _scalingFactors() internal virtual override returns (uint256[] memory) {
         uint256 totalTokens = _getTotalTokens();
         uint256[] memory scalingFactors = new uint256[](totalTokens);
 
@@ -331,7 +331,7 @@
      *
      * In the vast majority of cases, this function should be used instead of `totalSupply()`.
      */
-    function getActualSupply() public view returns (uint256) {
+    function getActualSupply() public returns (uint256) {
         uint256 supply = totalSupply();
 
         (uint256 protocolFeesToBeMinted, ) = _getPreJoinExitProtocolFees(
@@ -360,41 +360,41 @@
         }
     }
 
-    function _getScalingFactor0() internal view returns (uint256) {
+    function _getScalingFactor0() internal returns (uint256) {
         return _scalingFactor0;
     }
 
-    function _getScalingFactor1() internal view returns (uint256) {
+    function _getScalingFactor1() internal returns (uint256) {
         return _scalingFactor1;
     }
 
-    function _getScalingFactor2() internal view returns (uint256) {
+    function _getScalingFactor2() internal returns (uint256) {
         return _scalingFactor2;
     }
 
-    function _getScalingFactor3() internal view returns (uint256) {
+    function _getScalingFactor3() internal returns (uint256) {
         return _scalingFactor3;
     }
 
-    function _getScalingFactor4() internal view returns (uint256) {
+    function _getScalingFactor4() internal returns (uint256) {
         return _scalingFactor4;
     }
 
-    function _getScalingFactor5() internal view returns (uint256) {
+    function _getScalingFactor5() internal returns (uint256) {
         return _scalingFactor5;
     }
 
-    function _getScalingFactor6() internal view returns (uint256) {
+    function _getScalingFactor6() internal returns (uint256) {
         return _scalingFactor6;
     }
 
-    function _getScalingFactor7() internal view returns (uint256) {
+    function _getScalingFactor7() internal returns (uint256) {
         return _scalingFactor7;
     }
 
     function _isOwnerOnlyAction(bytes32 actionId)
         internal
-        view
+       
         virtual
         override(BasePool, WeightedPoolProtocolFees)
         returns (bool)
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/WeightedPoolFactory.sol pool-weighted/contracts/WeightedPoolFactory.sol
--- pool-weighted/contracts/WeightedPoolFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/WeightedPoolFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,17 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./WeightedPool.sol";
 
-contract WeightedPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
-    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(WeightedPool).creationCode)
-    {
+contract WeightedPoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    constructor(IVault vault) BasePoolSplitCodeFactory(vault, type(WeightedPool).creationCode) {
         // solhint-disable-previous-line no-empty-blocks
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/WeightedPoolProtocolFees.sol pool-weighted/contracts/WeightedPoolProtocolFees.sol
--- pool-weighted/contracts/WeightedPoolProtocolFees.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/WeightedPoolProtocolFees.sol	2022-11-22 00:28:06.000000000 -0800
@@ -83,14 +83,14 @@
     /**
      * @dev Returns whether the pool is exempt from protocol fees on yield.
      */
-    function _isExemptFromYieldProtocolFees() internal view returns (bool) {
+    function _isExemptFromYieldProtocolFees() internal returns (bool) {
         return _exemptFromYieldFees;
     }
 
     /**
      * @notice Returns the value of the invariant after the last join or exit operation.
      */
-    function getLastPostJoinExitInvariant() public view returns (uint256) {
+    function getLastPostJoinExitInvariant() public returns (uint256) {
         return
             _getMiscData().decodeUint(_LAST_POST_JOINEXIT_INVARIANT_OFFSET, _LAST_POST_JOINEXIT_INVARIANT_BIT_LENGTH);
     }
@@ -99,14 +99,14 @@
      * @notice Returns the all time high value for the weighted product of the Pool's tokens' rates.
      * @dev Yield protocol fees are only charged when this value is exceeded.
      */
-    function getATHRateProduct() public view returns (uint256) {
+    function getATHRateProduct() public returns (uint256) {
         return _athRateProduct;
     }
 
     /**
      * @dev Returns the rate providers configured for each token (in the same order as registered).
      */
-    function getRateProviders() external view returns (IRateProvider[] memory) {
+    function getRateProviders() external returns (IRateProvider[] memory) {
         uint256 totalTokens = _getTotalTokens();
         IRateProvider[] memory providers = new IRateProvider[](totalTokens);
 
@@ -135,7 +135,7 @@
      */
     function _getSwapProtocolFeesPoolPercentage(uint256 preJoinExitInvariant, uint256 protocolSwapFeePercentage)
         internal
-        view
+       
         returns (uint256)
     {
         // Before joins and exits, we measure the growth of the invariant compared to the invariant after the last join
@@ -159,7 +159,7 @@
      */
     function _getYieldProtocolFeesPoolPercentage(uint256[] memory normalizedWeights)
         internal
-        view
+       
         returns (uint256, uint256)
     {
         if (_isExemptFromYieldProtocolFees()) return (0, 0);
@@ -207,7 +207,7 @@
 
     /**
      * @dev Returns the amount of BPT to be minted as protocol fees prior to processing a join/exit.
-     * Note that this isn't a view function. This function automatically updates `_athRateProduct`  to ensure that
+     * Note that this isn't afunction. This function automatically updates `_athRateProduct`  to ensure that
      * proper accounting is performed to prevent charging duplicate protocol fees.
      * @param preJoinExitInvariant - The Pool's invariant prior to the join/exit.
      * @param normalizedWeights - The Pool's normalized token weights.
@@ -219,7 +219,7 @@
         uint256 preJoinExitInvariant,
         uint256[] memory normalizedWeights,
         uint256 preJoinExitSupply
-    ) internal view returns (uint256, uint256) {
+    ) internal returns (uint256, uint256) {
         uint256 protocolSwapFeesPoolPercentage = _getSwapProtocolFeesPoolPercentage(
             preJoinExitInvariant,
             getProtocolFeePercentageCache(ProtocolFeeType.SWAP)
@@ -239,7 +239,7 @@
 
     /**
      * @dev Returns the amount of BPT to be minted to pay protocol fees on swap fees accrued during a join/exit.
-     * Note that this isn't a view function. This function automatically updates `_lastPostJoinExitInvariant` to
+     * Note that this isn't afunction. This function automatically updates `_lastPostJoinExitInvariant` to
      * ensure that proper accounting is performed to prevent charging duplicate protocol fees.
      * @param preBalances - The Pool's balances prior to the join/exit.
      * @param balanceDeltas - The changes to the Pool's balances due to the join/exit.
@@ -300,14 +300,14 @@
     /**
      * @notice Returns the contribution to the total rate product from a token with the given weight and rate provider.
      */
-    function _getRateFactor(uint256 normalizedWeight, IRateProvider provider) internal view returns (uint256) {
+    function _getRateFactor(uint256 normalizedWeight, IRateProvider provider) internal returns (uint256) {
         return provider == IRateProvider(0) ? FixedPoint.ONE : provider.getRate().powDown(normalizedWeight);
     }
 
     /**
      * @dev Returns the weighted product of all the token rates.
      */
-    function _getRateProduct(uint256[] memory normalizedWeights) internal view returns (uint256) {
+    function _getRateProduct(uint256[] memory normalizedWeights) internal returns (uint256) {
         uint256 totalTokens = normalizedWeights.length;
 
         uint256 rateProduct = FixedPoint.mulDown(
@@ -349,7 +349,7 @@
 
     function _isOwnerOnlyAction(bytes32 actionId)
         internal
-        view
+       
         virtual
         override(BasePool, BasePoolAuthorization)
         returns (bool)
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/lib/GradualValueChange.sol pool-weighted/contracts/lib/GradualValueChange.sol
--- pool-weighted/contracts/lib/GradualValueChange.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/lib/GradualValueChange.sol	2022-11-22 00:28:06.000000000 -0800
@@ -12,8 +12,8 @@
 // You should have received a copy of the GNU General Public License
 // along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 pragma solidity ^0.7.0;
 
@@ -27,13 +27,13 @@
         uint256 endValue,
         uint256 startTime,
         uint256 endTime
-    ) internal view returns (uint256) {
+    ) internal returns (uint256) {
         uint256 pctProgress = _calculateValueChangeProgress(startTime, endTime);
 
         return _interpolateValue(startValue, endValue, pctProgress);
     }
 
-    function resolveStartTime(uint256 startTime, uint256 endTime) internal view returns (uint256 resolvedStartTime) {
+    function resolveStartTime(uint256 startTime, uint256 endTime) internal returns (uint256 resolvedStartTime) {
         // If the start time is in the past, "fast forward" to start now
         // This avoids discontinuities in the value curve. Otherwise, if you set the start/end times with
         // only 10% of the period in the future, the value would immediately jump 90%
@@ -66,7 +66,7 @@
      * @dev Returns a fixed-point number representing how far along the current value change is, where 0 means the
      * change has not yet started, and FixedPoint.ONE means it has fully completed.
      */
-    function _calculateValueChangeProgress(uint256 startTime, uint256 endTime) private view returns (uint256) {
+    function _calculateValueChangeProgress(uint256 startTime, uint256 endTime) private returns (uint256) {
         uint256 currentTime = block.timestamp;
 
         if (currentTime > endTime) {
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/lib/WeightCompression.sol pool-weighted/contracts/lib/WeightCompression.sol
--- pool-weighted/contracts/lib/WeightCompression.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/lib/WeightCompression.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 /**
  * @dev Library for compressing and decompressing numbers by using smaller types.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/smart/BaseManagedPoolFactory.sol pool-weighted/contracts/smart/BaseManagedPoolFactory.sol
--- pool-weighted/contracts/smart/BaseManagedPoolFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/smart/BaseManagedPoolFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,9 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./ManagedPool.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/smart/LiquidityBootstrappingPool.sol pool-weighted/contracts/smart/LiquidityBootstrappingPool.sol
--- pool-weighted/contracts/smart/LiquidityBootstrappingPool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/smart/LiquidityBootstrappingPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "../lib/GradualValueChange.sol";
 import "../lib/WeightCompression.sol";
@@ -138,7 +138,7 @@
     /**
      * @dev Tells whether swaps are enabled or not for the given pool.
      */
-    function getSwapEnabled() public view returns (bool) {
+    function getSwapEnabled() public returns (bool) {
         return _poolState.decodeBool(_SWAP_ENABLED_OFFSET);
     }
 
@@ -148,7 +148,7 @@
      */
     function getGradualWeightUpdateParams()
         external
-        view
+       
         returns (
             uint256 startTime,
             uint256 endTime,
@@ -192,7 +192,7 @@
 
     // Internal functions
 
-    function _getNormalizedWeight(IERC20 token) internal view override returns (uint256) {
+    function _getNormalizedWeight(IERC20 token) internal override returns (uint256) {
         uint256 i;
 
         // First, convert token address to a token index
@@ -209,7 +209,7 @@
         return _getNormalizedWeightByIndex(i, _poolState);
     }
 
-    function _getNormalizedWeightByIndex(uint256 i, bytes32 poolState) internal view returns (uint256) {
+    function _getNormalizedWeightByIndex(uint256 i, bytes32 poolState) internal returns (uint256) {
         uint256 startWeight = poolState.decodeUint(_START_WEIGHT_OFFSET + i * 31, 31).decompress(31);
         uint256 endWeight = poolState.decodeUint(_END_WEIGHT_OFFSET + i * 16, 16).decompress(16);
         uint256 startTime = poolState.decodeUint(_START_TIME_OFFSET, 32);
@@ -218,7 +218,7 @@
         return GradualValueChange.getInterpolatedValue(startWeight, endWeight, startTime, endTime);
     }
 
-    function _getNormalizedWeights() internal view override returns (uint256[] memory) {
+    function _getNormalizedWeights() internal override returns (uint256[] memory) {
         uint256 totalTokens = _getTotalTokens();
         uint256[] memory normalizedWeights = new uint256[](totalTokens);
 
@@ -305,7 +305,7 @@
     /**
      * @dev Extend ownerOnly functions to include the LBP control functions
      */
-    function _isOwnerOnlyAction(bytes32 actionId) internal view override returns (bool) {
+    function _isOwnerOnlyAction(bytes32 actionId) internal override returns (bool) {
         return
             (actionId == getActionId(LiquidityBootstrappingPool.setSwapEnabled.selector)) ||
             (actionId == getActionId(LiquidityBootstrappingPool.updateWeightsGradually.selector)) ||
@@ -358,11 +358,11 @@
         return _MAX_LBP_TOKENS;
     }
 
-    function _getTotalTokens() internal view virtual override returns (uint256) {
+    function _getTotalTokens() internal virtual override returns (uint256) {
         return _totalTokens;
     }
 
-    function _scalingFactor(IERC20 token) internal view virtual override returns (uint256) {
+    function _scalingFactor(IERC20 token) internal virtual override returns (uint256) {
         // prettier-ignore
         if (token == _token0) { return _scalingFactor0; }
         else if (token == _token1) { return _scalingFactor1; }
@@ -373,7 +373,7 @@
         }
     }
 
-    function _scalingFactors() internal view virtual override returns (uint256[] memory) {
+    function _scalingFactors() internal virtual override returns (uint256[] memory) {
         uint256 totalTokens = _getTotalTokens();
         uint256[] memory scalingFactors = new uint256[](totalTokens);
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/smart/LiquidityBootstrappingPoolFactory.sol pool-weighted/contracts/smart/LiquidityBootstrappingPoolFactory.sol
--- pool-weighted/contracts/smart/LiquidityBootstrappingPoolFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/smart/LiquidityBootstrappingPoolFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,17 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./LiquidityBootstrappingPool.sol";
 
-contract LiquidityBootstrappingPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
-    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(LiquidityBootstrappingPool).creationCode)
-    {
+contract LiquidityBootstrappingPoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    constructor(IVault vault) BasePoolSplitCodeFactory(vault, type(LiquidityBootstrappingPool).creationCode) {
         // solhint-disable-previous-line no-empty-blocks
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/smart/ManagedPool.sol pool-weighted/contracts/smart/ManagedPool.sol
--- pool-weighted/contracts/smart/ManagedPool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/smart/ManagedPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -235,14 +235,14 @@
     /**
      * @notice Returns whether swaps are enabled.
      */
-    function getSwapEnabled() public view returns (bool) {
+    function getSwapEnabled() public returns (bool) {
         return _getMiscData().decodeBool(_SWAP_ENABLED_OFFSET);
     }
 
     /**
      * @notice Returns whether the allowlist for LPs is enabled.
      */
-    function getMustAllowlistLPs() public view returns (bool) {
+    function getMustAllowlistLPs() public returns (bool) {
         return _getMiscData().decodeBool(_MUST_ALLOWLIST_LPS_OFFSET);
     }
 
@@ -252,21 +252,21 @@
      * @param member - The address to check against the allowlist.
      * @return true if the given address is allowed to join the pool.
      */
-    function isAllowedAddress(address member) public view returns (bool) {
+    function isAllowedAddress(address member) public returns (bool) {
         return !getMustAllowlistLPs() || _allowedAddresses[member];
     }
 
     /**
      * @notice Returns the management swap fee percentage as an 18-decimal fixed point number.
      */
-    function getManagementSwapFeePercentage() public view returns (uint256) {
+    function getManagementSwapFeePercentage() public returns (uint256) {
         return _managementSwapFeePercentage;
     }
 
     /**
      * @notice Returns the timestamp of the last collection of AUM fees.
      */
-    function getLastAumFeeCollectionTimestamp() external view returns (uint256) {
+    function getLastAumFeeCollectionTimestamp() external returns (uint256) {
         return _lastAumFeeCollectionTimestamp;
     }
 
@@ -275,7 +275,7 @@
      * @dev Computes the current swap fee percentage, which can change every block if a gradual swap fee
      * update is in progress.
      */
-    function getSwapFeePercentage() public view virtual override returns (uint256) {
+    function getSwapFeePercentage() public virtual override returns (uint256) {
         (
             uint256 startTime,
             uint256 endTime,
@@ -297,7 +297,7 @@
      */
     function getGradualSwapFeeUpdateParams()
         external
-        view
+       
         returns (
             uint256 startTime,
             uint256 endTime,
@@ -310,7 +310,7 @@
 
     function _getSwapFeeFields()
         private
-        view
+       
         returns (
             uint256 startTime,
             uint256 endTime,
@@ -348,7 +348,7 @@
     /**
      * @notice Returns the management AUM fee percentage as an 18-decimal fixed point number.
      */
-    function getManagementAumFeePercentage() public view returns (uint256) {
+    function getManagementAumFeePercentage() public returns (uint256) {
         return _managementAumFeePercentage;
     }
 
@@ -362,7 +362,7 @@
      */
     function getGradualWeightUpdateParams()
         external
-        view
+       
         returns (
             uint256 startTime,
             uint256 endTime,
@@ -402,7 +402,7 @@
      * @dev The normalization factor, which is used to efficiently scale weights when adding and removing.
      * tokens. This value is an internal implementation detail and typically useless from the outside.
      */
-    function getDenormalizedWeightSum() public view returns (uint256) {
+    function getDenormalizedWeightSum() public returns (uint256) {
         return _denormWeightSum;
     }
 
@@ -410,7 +410,7 @@
         return _MAX_MANAGED_TOKENS;
     }
 
-    function _getTotalTokens() internal view virtual override returns (uint256) {
+    function _getTotalTokens() internal virtual override returns (uint256) {
         return _totalTokensCache;
     }
 
@@ -598,7 +598,7 @@
         // zero). We immediately perform a join using the newly added token to restore a valid state.
         // Since all non-view Vault functions are non-reentrant, and we make no external calls between the two Vault
         // calls (`registerTokens` and `joinPool`), it is impossible for any actor to interact with the Pool while it
-        // is in this inconsistent state (except for view calls).
+        // is in this inconsistent state (except forcalls).
 
         // We now need the updated list of tokens in the Pool to construct the join call.
         // As we know that the new token will be appended to the end of the existing array of tokens, we can save gas
@@ -632,7 +632,7 @@
         emit TokenAdded(token, normalizedWeight, tokenAmountIn);
     }
 
-    function _validateAddToken(IERC20[] memory tokens, uint256 normalizedWeight) private view returns (uint256) {
+    function _validateAddToken(IERC20[] memory tokens, uint256 normalizedWeight) private returns (uint256) {
         // Sanity check that the new token will make up less than 100% of the Pool.
         _require(normalizedWeight < FixedPoint.ONE, Errors.MAX_WEIGHT);
         // Make sure the new token is above the minimum weight.
@@ -685,7 +685,7 @@
         getVault().registerTokens(getPoolId(), tokensToAdd, new address[](1));
 
         // `_encodeTokenState` performs an external call to `token` (to get its decimals). Nevertheless, this is
-        // reentrancy safe. View functions are called in a STATICCALL context, and will revert if they modify state.
+        // reentrancy safe.functions are called in a STATICCALL context, and will revert if they modify state.
         _tokenState[token] = _encodeTokenState(token, normalizedWeight, normalizedWeight, newDenormWeightSum);
         _totalTokensCache += 1;
     }
@@ -753,7 +753,7 @@
         // zero). We immediately deregister the emptied-out token to restore a valid state.
         // Since all non-view Vault functions are non-reentrant, and we make no external calls between the two Vault
         // calls (`exitPool` and `deregisterTokens`), it is impossible for any actor to interact with the Pool while it
-        // is in this inconsistent state (except for view calls).
+        // is in this inconsistent state (except forcalls).
 
         IERC20[] memory tokensToRemove = new IERC20[](1);
         tokensToRemove[0] = token;
@@ -776,7 +776,7 @@
         return tokenBalance;
     }
 
-    function _ensureNoWeightChange() private view {
+    function _ensureNoWeightChange() private{
         uint256 currentTime = block.timestamp;
         bytes32 poolState = _getMiscData();
 
@@ -869,11 +869,11 @@
         return managerAUMFees;
     }
 
-    function _scalingFactor(IERC20 token) internal view virtual override returns (uint256) {
+    function _scalingFactor(IERC20 token) internal virtual override returns (uint256) {
         return _readScalingFactor(_getTokenData(token));
     }
 
-    function _scalingFactors() internal view virtual override returns (uint256[] memory scalingFactors) {
+    function _scalingFactors() internal virtual override returns (uint256[] memory scalingFactors) {
         (IERC20[] memory tokens, , ) = getVault().getPoolTokens(getPoolId());
         uint256 numTokens = tokens.length;
 
@@ -884,7 +884,7 @@
         }
     }
 
-    function _getNormalizedWeight(IERC20 token) internal view override returns (uint256) {
+    function _getNormalizedWeight(IERC20 token) internal override returns (uint256) {
         bytes32 tokenData = _getTokenData(token);
         uint256 startWeight = tokenData.decodeUint(_START_DENORM_WEIGHT_OFFSET, 64).decompress(64, _MAX_DENORM_WEIGHT);
         uint256 endWeight = tokenData.decodeUint(_END_DENORM_WEIGHT_OFFSET, 64).decompress(64, _MAX_DENORM_WEIGHT);
@@ -902,7 +902,7 @@
 
     // This could be simplified by simply iteratively calling _getNormalizedWeight(), but this routine is
     // called very frequently, so we are optimizing for runtime performance.
-    function _getNormalizedWeights() internal view override returns (uint256[] memory normalizedWeights) {
+    function _getNormalizedWeights() internal override returns (uint256[] memory normalizedWeights) {
         (IERC20[] memory tokens, , ) = getVault().getPoolTokens(getPoolId());
         uint256 numTokens = tokens.length;
 
@@ -1047,7 +1047,7 @@
         uint256[] memory scalingFactors,
         uint256 totalSupply,
         bytes memory userData
-    ) internal view override returns (uint256, uint256[] memory) {
+    ) internal override returns (uint256, uint256[] memory) {
         // If swaps are disabled, only proportional joins are allowed. All others involve implicit swaps, and alter
         // token prices.
         // Adding tokens is also allowed, as that action can only be performed by the manager, who is assumed to
@@ -1074,7 +1074,7 @@
         address sender,
         uint256[] memory scalingFactors,
         bytes memory userData
-    ) private view returns (uint256, uint256[] memory) {
+    ) private returns (uint256, uint256[] memory) {
         // This join function can only be called by the Pool itself - the authorization logic that governs when that
         // call can be made resides in addToken.
         _require(sender == address(this), Errors.UNAUTHORIZED_JOIN);
@@ -1100,7 +1100,7 @@
         uint256[] memory scalingFactors,
         uint256 totalSupply,
         bytes memory userData
-    ) internal view override returns (uint256, uint256[] memory) {
+    ) internal override returns (uint256, uint256[] memory) {
         // If swaps are disabled, only proportional exits are allowed. All others involve implicit swaps, and alter
         // token prices.
         // Removing tokens is also allowed, as that action can only be performed by the manager, who is assumed to
@@ -1123,7 +1123,7 @@
         address sender,
         uint256[] memory balances,
         bytes memory userData
-    ) private view whenNotPaused returns (uint256, uint256[] memory) {
+    ) privatewhenNotPaused returns (uint256, uint256[] memory) {
         // This exit function is disabled if the contract is paused.
 
         // This exit function can only be called by the Pool itself - the authorization logic that governs when that
@@ -1230,7 +1230,7 @@
         uint256 normalizedStartWeight,
         uint256 normalizedEndWeight,
         uint256 denormWeightSum
-    ) private view returns (bytes32) {
+    ) private returns (bytes32) {
         bytes32 tokenState;
 
         // Tokens with more than 18 decimals are not supported
@@ -1260,7 +1260,7 @@
      */
     function _isOwnerOnlyAction(bytes32 actionId)
         internal
-        view
+       
         override(
             // The ProtocolFeeCache module creates a small diamond that requires explicitly listing the parents here
             BasePool,
@@ -1286,7 +1286,7 @@
         return _MAX_SWAP_FEE_PERCENTAGE;
     }
 
-    function _getTokenData(IERC20 token) private view returns (bytes32 tokenData) {
+    function _getTokenData(IERC20 token) private returns (bytes32 tokenData) {
         tokenData = _tokenState[token];
 
         // A valid token can't be zero (must have non-zero weights)
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/smart/ManagedPoolFactory.sol pool-weighted/contracts/smart/ManagedPoolFactory.sol
--- pool-weighted/contracts/smart/ManagedPoolFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/smart/ManagedPoolFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-pool-utils/contracts/controllers/ManagedPoolController.sol";
+import "../../pool-utils/contracts/controllers/ManagedPoolController.sol";
 
 import "./BaseManagedPoolFactory.sol";
 
@@ -65,7 +65,7 @@
     /**
      * @dev Returns true if `pool` was created by this factory.
      */
-    function isPoolFromFactory(address pool) external view returns (bool) {
+    function isPoolFromFactory(address pool) external returns (bool) {
         return _isPoolFromFactory[pool];
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/test/MockGradualValueChange.sol pool-weighted/contracts/test/MockGradualValueChange.sol
--- pool-weighted/contracts/test/MockGradualValueChange.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/test/MockGradualValueChange.sol	2022-11-22 00:28:06.000000000 -0800
@@ -22,11 +22,11 @@
         uint256 endWeight,
         uint256 startTime,
         uint256 endTime
-    ) external view returns (uint256) {
+    ) external returns (uint256) {
         return GradualValueChange.getInterpolatedValue(startWeight, endWeight, startTime, endTime);
     }
 
-    function resolveStartTime(uint256 startTime, uint256 endTime) external view returns (uint256) {
+    function resolveStartTime(uint256 startTime, uint256 endTime) external returns (uint256) {
         return GradualValueChange.resolveStartTime(startTime, endTime);
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/test/MockWeightedPool.sol pool-weighted/contracts/test/MockWeightedPool.sol
--- pool-weighted/contracts/test/MockWeightedPool.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/test/MockWeightedPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -29,7 +29,7 @@
         // solhint-disable-previous-line no-empty-blocks
     }
 
-    function isOwnerOnlyAction(bytes32 actionId) external view returns (bool) {
+    function isOwnerOnlyAction(bytes32 actionId) external returns (bool) {
         return _isOwnerOnlyAction(actionId);
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts pool-weighted/contracts/test/MockWeightedPoolProtocolFees.sol pool-weighted/contracts/test/MockWeightedPoolProtocolFees.sol
--- pool-weighted/contracts/test/MockWeightedPoolProtocolFees.sol	2022-11-21 22:55:10.000000000 -0800
+++ pool-weighted/contracts/test/MockWeightedPoolProtocolFees.sol	2022-11-22 00:28:06.000000000 -0800
@@ -55,7 +55,7 @@
         return _getYieldFeeExemption(rateProviders);
     }
 
-    function getRateProduct(uint256[] memory normalizedWeights) external view returns (uint256) {
+    function getRateProduct(uint256[] memory normalizedWeights) external returns (uint256) {
         return _getRateProduct(normalizedWeights);
     }
 
@@ -65,7 +65,7 @@
 
     function getYieldProtocolFee(uint256[] memory normalizedWeights, uint256 supply)
         external
-        view
+       
         returns (uint256 yieldProtocolFees, uint256 athRateProduct)
     {
         uint256 protocolYieldFeesPoolPercentage;
@@ -96,7 +96,7 @@
         return 8;
     }
 
-    function _getTotalTokens() internal view virtual override returns (uint256) {
+    function _getTotalTokens() internal virtual override returns (uint256) {
         return _totalTokens;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/Authentication.sol solidity-utils/contracts/helpers/Authentication.sol
--- solidity-utils/contracts/helpers/Authentication.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/helpers/Authentication.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
 
 /**
  * @dev Building block for performing access control on external functions.
@@ -53,17 +53,17 @@
     /**
      * @dev Reverts unless the caller is allowed to call the entry point function.
      */
-    function _authenticateCaller() internal view {
+    function _authenticateCaller() internal{
         bytes32 actionId = getActionId(msg.sig);
         _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);
     }
 
-    function getActionId(bytes4 selector) public view override returns (bytes32) {
+    function getActionId(bytes4 selector) public override returns (bytes32) {
         // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the
         // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of
         // multiple contracts.
         return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));
     }
 
-    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);
+    function _canPerform(bytes32 actionId, address user) internal virtual returns (bool);
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol
--- solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/helpers/BaseSplitCodeFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -103,21 +103,21 @@
     /**
      * @dev Returns the two addresses where the creation code of the contract crated by this factory is stored.
      */
-    function getCreationCodeContracts() public view returns (address contractA, address contractB) {
+    function getCreationCodeContracts() public returns (address contractA, address contractB) {
         return (_creationCodeContractA, _creationCodeContractB);
     }
 
     /**
      * @dev Returns the creation code of the contract this factory creates.
      */
-    function getCreationCode() public view returns (bytes memory) {
+    function getCreationCode() public returns (bytes memory) {
         return _getCreationCodeWithArgs("");
     }
 
     /**
      * @dev Returns the creation code that will result in a contract being deployed with `constructorArgs`.
      */
-    function _getCreationCodeWithArgs(bytes memory constructorArgs) private view returns (bytes memory code) {
+    function _getCreationCodeWithArgs(bytes memory constructorArgs) private returns (bytes memory code) {
         // This function exists because `abi.encode()` cannot be instructed to place its result at a specific address.
         // We need for the ABI-encoded constructor arguments to be located immediately after the creation code, but
         // cannot rely on `abi.encodePacked()` to perform concatenation as that would involve copying the creation code,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/CodeDeployer.sol solidity-utils/contracts/helpers/CodeDeployer.sol
--- solidity-utils/contracts/helpers/CodeDeployer.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/helpers/CodeDeployer.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Library used to deploy contracts with specific code. This can be used for long-term storage of immutable data as
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/EOASignaturesValidator.sol solidity-utils/contracts/helpers/EOASignaturesValidator.sol
--- solidity-utils/contracts/helpers/EOASignaturesValidator.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/helpers/EOASignaturesValidator.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol";
 
 import "../openzeppelin/EIP712.sol";
 
@@ -26,11 +26,11 @@
     // Replay attack prevention for each account.
     mapping(address => uint256) internal _nextNonce;
 
-    function getDomainSeparator() public view override returns (bytes32) {
+    function getDomainSeparator() public override returns (bytes32) {
         return _domainSeparatorV4();
     }
 
-    function getNextNonce(address account) public view override returns (uint256) {
+    function getNextNonce(address account) public override returns (uint256) {
         return _nextNonce[account];
     }
 
@@ -70,7 +70,7 @@
         address account,
         bytes32 digest,
         bytes memory signature
-    ) internal view virtual returns (bool) {
+    ) internal virtual returns (bool) {
         _require(signature.length == 65, Errors.MALFORMED_SIGNATURE);
 
         bytes32 r;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/ERC20Helpers.sol solidity-utils/contracts/helpers/ERC20Helpers.sol
--- solidity-utils/contracts/helpers/ERC20Helpers.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/helpers/ERC20Helpers.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/vault/IAsset.sol";
 
 // solhint-disable
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol
--- solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "./EOASignaturesValidator.sol";
 
@@ -59,7 +59,7 @@
      *
      * If 0x00, all signatures will be considered invalid.
      */
-    function _entrypointTypeHash() internal view virtual returns (bytes32);
+    function _entrypointTypeHash() internal virtual returns (bytes32);
 
     /**
      * @dev Extracts the signature deadline from extra calldata.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/InputHelpers.sol solidity-utils/contracts/helpers/InputHelpers.sol
--- solidity-utils/contracts/helpers/InputHelpers.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/helpers/InputHelpers.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 library InputHelpers {
     function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/OptionalOnlyCaller.sol solidity-utils/contracts/helpers/OptionalOnlyCaller.sol
--- solidity-utils/contracts/helpers/OptionalOnlyCaller.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/helpers/OptionalOnlyCaller.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "./SignaturesValidator.sol";
 
@@ -54,11 +54,11 @@
         emit OnlyCallerOptIn(user, enabled);
     }
 
-    function isOnlyCallerEnabled(address user) external view override returns (bool) {
+    function isOnlyCallerEnabled(address user) external override returns (bool) {
         return _isOnlyCallerEnabled[user];
     }
 
-    function _verifyCaller(address user) private view {
+    function _verifyCaller(address user) private{
         if (_isOnlyCallerEnabled[user]) {
             _require(msg.sender == user, Errors.SENDER_NOT_ALLOWED);
         }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/SignaturesValidator.sol solidity-utils/contracts/helpers/SignaturesValidator.sol
--- solidity-utils/contracts/helpers/SignaturesValidator.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/helpers/SignaturesValidator.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
 
 import "./EOASignaturesValidator.sol";
 import "../openzeppelin/Address.sol";
@@ -29,7 +29,7 @@
         address account,
         bytes32 digest,
         bytes memory signature
-    ) internal view virtual override returns (bool) {
+    ) internal virtual override returns (bool) {
         if (account.isContract()) {
             return IERC1271(account).isValidSignature(digest, signature) == IERC1271.isValidSignature.selector;
         } else {
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/SingletonAuthentication.sol solidity-utils/contracts/helpers/SingletonAuthentication.sol
--- solidity-utils/contracts/helpers/SingletonAuthentication.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/helpers/SingletonAuthentication.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "./Authentication.sol";
 
@@ -30,18 +30,18 @@
     /**
      * @notice Returns the Balancer Vault
      */
-    function getVault() public view returns (IVault) {
+    function getVault() public returns (IVault) {
         return _vault;
     }
 
     /**
      * @notice Returns the Authorizer
      */
-    function getAuthorizer() public view returns (IAuthorizer) {
+    function getAuthorizer() public returns (IAuthorizer) {
         return getVault().getAuthorizer();
     }
 
-    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {
+    function _canPerform(bytes32 actionId, address account) internal override returns (bool) {
         return getAuthorizer().canPerform(actionId, account, address(this));
     }
 
@@ -49,7 +49,7 @@
         bytes32 actionId,
         address account,
         address where
-    ) internal view returns (bool) {
+    ) internal returns (bool) {
         return getAuthorizer().canPerform(actionId, account, where);
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/TemporarilyPausable.sol solidity-utils/contracts/helpers/TemporarilyPausable.sol
--- solidity-utils/contracts/helpers/TemporarilyPausable.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/helpers/TemporarilyPausable.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol";
 
 /**
  * @dev Allows for a contract to be paused during an initial period after deployment, disabling functionality. Can be
@@ -69,7 +69,6 @@
      */
     function getPausedState()
         external
-        view
         override
         returns (
             bool paused,
@@ -102,14 +101,14 @@
     /**
      * @dev Reverts if the contract is paused.
      */
-    function _ensureNotPaused() internal view {
+    function _ensureNotPaused() internal{
         _require(_isNotPaused(), Errors.PAUSED);
     }
 
     /**
      * @dev Reverts if the contract is not paused.
      */
-    function _ensurePaused() internal view {
+    function _ensurePaused() internal{
         _require(!_isNotPaused(), Errors.NOT_PAUSED);
     }
 
@@ -119,18 +118,18 @@
      * Once the Buffer Period expires, the gas cost of calling this function is reduced dramatically, as storage is no
      * longer accessed.
      */
-    function _isNotPaused() internal view returns (bool) {
+    function _isNotPaused() internal returns (bool) {
         // After the Buffer Period, the (inexpensive) timestamp check short-circuits the storage access.
         return block.timestamp > _getBufferPeriodEndTime() || !_paused;
     }
 
     // These getters lead to reduced bytecode size by inlining the immutable variables in a single place.
 
-    function _getPauseWindowEndTime() private view returns (uint256) {
+    function _getPauseWindowEndTime() private returns (uint256) {
         return _pauseWindowEndTime;
     }
 
-    function _getBufferPeriodEndTime() private view returns (uint256) {
+    function _getBufferPeriodEndTime() private returns (uint256) {
         return _bufferPeriodEndTime;
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/helpers/WordCodec.sol solidity-utils/contracts/helpers/WordCodec.sol
--- solidity-utils/contracts/helpers/WordCodec.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/helpers/WordCodec.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "../math/Math.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/math/FixedPoint.sol solidity-utils/contracts/math/FixedPoint.sol
--- solidity-utils/contracts/math/FixedPoint.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/math/FixedPoint.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "./LogExpMath.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/math/LogExpMath.sol solidity-utils/contracts/math/LogExpMath.sol
--- solidity-utils/contracts/math/LogExpMath.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/math/LogExpMath.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /* solhint-disable */
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/math/Math.sol solidity-utils/contracts/math/Math.sol
--- solidity-utils/contracts/math/Math.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/math/Math.sol	2022-11-22 00:28:06.000000000 -0800
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/Address.sol solidity-utils/contracts/openzeppelin/Address.sol
--- solidity-utils/contracts/openzeppelin/Address.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/openzeppelin/Address.sol	2022-11-22 00:28:06.000000000 -0800
@@ -5,7 +5,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Collection of functions related to the address type
@@ -28,7 +28,7 @@
      *  - an address where a contract lived, but was destroyed
      * ====
      */
-    function isContract(address account) internal view returns (bool) {
+    function isContract(address account) internal returns (bool) {
         // This method relies on extcodesize, which returns 0 for contracts in
         // construction, since the code is only stored at the end of the
         // constructor execution.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/Clones.sol solidity-utils/contracts/openzeppelin/Clones.sol
--- solidity-utils/contracts/openzeppelin/Clones.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/openzeppelin/Clones.sol	2022-11-22 00:28:06.000000000 -0800
@@ -78,7 +78,7 @@
      */
     function predictDeterministicAddress(address implementation, bytes32 salt)
         internal
-        view
+       
         returns (address predicted)
     {
         return predictDeterministicAddress(implementation, salt, address(this));
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/Create2.sol solidity-utils/contracts/openzeppelin/Create2.sol
--- solidity-utils/contracts/openzeppelin/Create2.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/openzeppelin/Create2.sol	2022-11-22 00:28:06.000000000 -0800
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.
@@ -48,7 +48,7 @@
      * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the
      * `bytecodeHash` or `salt` will result in a new destination address.
      */
-    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {
+    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal returns (address) {
         return computeAddress(salt, bytecodeHash, address(this));
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/EIP712.sol solidity-utils/contracts/openzeppelin/EIP712.sol
--- solidity-utils/contracts/openzeppelin/EIP712.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/openzeppelin/EIP712.sol	2022-11-22 00:28:06.000000000 -0800
@@ -50,7 +50,7 @@
     /**
      * @dev Returns the domain separator for the current chain.
      */
-    function _domainSeparatorV4() internal view virtual returns (bytes32) {
+    function _domainSeparatorV4() internal virtual returns (bytes32) {
         return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));
     }
 
@@ -69,11 +69,11 @@
      * address signer = ECDSA.recover(digest, signature);
      * ```
      */
-    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {
+    function _hashTypedDataV4(bytes32 structHash) internal virtual returns (bytes32) {
         return keccak256(abi.encodePacked("\x19\x01", _domainSeparatorV4(), structHash));
     }
 
-    function _getChainId() private view returns (uint256 chainId) {
+    function _getChainId() private returns (uint256 chainId) {
         // Silence state mutability warning without generating bytecode.
         // See https://github.com/ethereum/solidity/issues/10090#issuecomment-741789128 and
         // https://github.com/ethereum/solidity/issues/2691
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/ERC20.sol solidity-utils/contracts/openzeppelin/ERC20.sol
--- solidity-utils/contracts/openzeppelin/ERC20.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/openzeppelin/ERC20.sol	2022-11-22 00:28:06.000000000 -0800
@@ -2,8 +2,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 import "./SafeMath.sol";
 
@@ -62,7 +62,7 @@
     /**
      * @dev Returns the name of the token.
      */
-    function name() public view returns (string memory) {
+    function name() public returns (string memory) {
         return _name;
     }
 
@@ -70,7 +70,7 @@
      * @dev Returns the symbol of the token, usually a shorter version of the
      * name.
      */
-    function symbol() public view returns (string memory) {
+    function symbol() public returns (string memory) {
         return _symbol;
     }
 
@@ -87,7 +87,7 @@
      * no way affects any of the arithmetic of the contract, including
      * {IERC20-balanceOf} and {IERC20-transfer}.
      */
-    function decimals() public view returns (uint8) {
+    function decimals() public returns (uint8) {
         return _decimals;
     }
 
@@ -97,7 +97,7 @@
      * Can be overridden by derived contracts to store the total supply in a different way (e.g. packed with other
      * storage values).
      */
-    function totalSupply() public view virtual override returns (uint256) {
+    function totalSupply() public virtual override returns (uint256) {
         return _totalSupply;
     }
 
@@ -114,7 +114,7 @@
     /**
      * @dev See {IERC20-balanceOf}.
      */
-    function balanceOf(address account) public view override returns (uint256) {
+    function balanceOf(address account) public override returns (uint256) {
         return _balances[account];
     }
 
@@ -134,7 +134,7 @@
     /**
      * @dev See {IERC20-allowance}.
      */
-    function allowance(address owner, address spender) public view virtual override returns (uint256) {
+    function allowance(address owner, address spender) public virtual override returns (uint256) {
         return _allowances[owner][spender];
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/ERC20Permit.sol solidity-utils/contracts/openzeppelin/ERC20Permit.sol
--- solidity-utils/contracts/openzeppelin/ERC20Permit.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/openzeppelin/ERC20Permit.sol	2022-11-22 00:28:06.000000000 -0800
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
 
 import "./ERC20.sol";
 import "../helpers/EOASignaturesValidator.sol";
@@ -56,7 +56,7 @@
     /**
      * @dev See {IERC20Permit-nonces}.
      */
-    function nonces(address owner) public view override returns (uint256) {
+    function nonces(address owner) public override returns (uint256) {
         return getNextNonce(owner);
     }
 
@@ -64,7 +64,7 @@
      * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.
      */
     // solhint-disable-next-line func-name-mixedcase
-    function DOMAIN_SEPARATOR() external view override returns (bytes32) {
+    function DOMAIN_SEPARATOR() external override returns (bytes32) {
         return getDomainSeparator();
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/EnumerableMap.sol solidity-utils/contracts/openzeppelin/EnumerableMap.sol
--- solidity-utils/contracts/openzeppelin/EnumerableMap.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/openzeppelin/EnumerableMap.sol	2022-11-22 00:28:06.000000000 -0800
@@ -11,8 +11,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 /**
  * @dev Library for managing an enumerable variant of Solidity's
@@ -149,14 +149,14 @@
     /**
      * @dev Returns true if the key is in the map. O(1).
      */
-    function contains(IERC20ToBytes32Map storage map, IERC20 key) internal view returns (bool) {
+    function contains(IERC20ToBytes32Map storage map, IERC20 key) internal returns (bool) {
         return map._indexes[key] != 0;
     }
 
     /**
      * @dev Returns the number of key-value pairs in the map. O(1).
      */
-    function length(IERC20ToBytes32Map storage map) internal view returns (uint256) {
+    function length(IERC20ToBytes32Map storage map) internal returns (uint256) {
         return map._length;
     }
 
@@ -170,7 +170,7 @@
      *
      * - `index` must be strictly less than {length}.
      */
-    function at(IERC20ToBytes32Map storage map, uint256 index) internal view returns (IERC20, bytes32) {
+    function at(IERC20ToBytes32Map storage map, uint256 index) internal returns (IERC20, bytes32) {
         _require(map._length > index, Errors.OUT_OF_BOUNDS);
         return unchecked_at(map, index);
     }
@@ -182,7 +182,7 @@
      * This function performs one less storage read than {at}, but should only be used when `index` is known to be
      * within bounds.
      */
-    function unchecked_at(IERC20ToBytes32Map storage map, uint256 index) internal view returns (IERC20, bytes32) {
+    function unchecked_at(IERC20ToBytes32Map storage map, uint256 index) internal returns (IERC20, bytes32) {
         IERC20ToBytes32MapEntry storage entry = map._entries[index];
         return (entry._key, entry._value);
     }
@@ -191,7 +191,7 @@
      * @dev Same as {unchecked_At}, except it only returns the value and not the key (performing one less storage
      * read). O(1).
      */
-    function unchecked_valueAt(IERC20ToBytes32Map storage map, uint256 index) internal view returns (bytes32) {
+    function unchecked_valueAt(IERC20ToBytes32Map storage map, uint256 index) internal returns (bytes32) {
         return map._entries[index]._value;
     }
 
@@ -206,7 +206,7 @@
         IERC20ToBytes32Map storage map,
         IERC20 key,
         uint256 errorCode
-    ) internal view returns (bytes32) {
+    ) internal returns (bytes32) {
         uint256 index = map._indexes[key];
         _require(index > 0, errorCode);
         return unchecked_valueAt(map, index - 1);
@@ -223,7 +223,7 @@
         IERC20ToBytes32Map storage map,
         IERC20 key,
         uint256 errorCode
-    ) internal view returns (uint256) {
+    ) internal returns (uint256) {
         uint256 uncheckedIndex = unchecked_indexOf(map, key);
         _require(uncheckedIndex != 0, errorCode);
         return uncheckedIndex - 1;
@@ -233,7 +233,7 @@
      * @dev Returns the index for `key` **plus one**. Does not revert if the key is not in the map, and returns 0
      * instead.
      */
-    function unchecked_indexOf(IERC20ToBytes32Map storage map, IERC20 key) internal view returns (uint256) {
+    function unchecked_indexOf(IERC20ToBytes32Map storage map, IERC20 key) internal returns (uint256) {
         return map._indexes[key];
     }
 
@@ -344,14 +344,14 @@
     /**
      * @dev Returns true if the key is in the map. O(1).
      */
-    function contains(IERC20ToUint256Map storage map, IERC20 key) internal view returns (bool) {
+    function contains(IERC20ToUint256Map storage map, IERC20 key) internal returns (bool) {
         return map._indexes[key] != 0;
     }
 
     /**
      * @dev Returns the number of key-value pairs in the map. O(1).
      */
-    function length(IERC20ToUint256Map storage map) internal view returns (uint256) {
+    function length(IERC20ToUint256Map storage map) internal returns (uint256) {
         return map._length;
     }
 
@@ -365,7 +365,7 @@
      *
      * - `index` must be strictly less than {length}.
      */
-    function at(IERC20ToUint256Map storage map, uint256 index) internal view returns (IERC20, uint256) {
+    function at(IERC20ToUint256Map storage map, uint256 index) internal returns (IERC20, uint256) {
         _require(map._length > index, Errors.OUT_OF_BOUNDS);
         return unchecked_at(map, index);
     }
@@ -377,7 +377,7 @@
      * This function performs one less storage read than {at}, but should only be used when `index` is known to be
      * within bounds.
      */
-    function unchecked_at(IERC20ToUint256Map storage map, uint256 index) internal view returns (IERC20, uint256) {
+    function unchecked_at(IERC20ToUint256Map storage map, uint256 index) internal returns (IERC20, uint256) {
         IERC20ToUint256MapEntry storage entry = map._entries[index];
         return (entry._key, entry._value);
     }
@@ -386,7 +386,7 @@
      * @dev Same as {unchecked_At}, except it only returns the value and not the key (performing one less storage
      * read). O(1).
      */
-    function unchecked_valueAt(IERC20ToUint256Map storage map, uint256 index) internal view returns (uint256) {
+    function unchecked_valueAt(IERC20ToUint256Map storage map, uint256 index) internal returns (uint256) {
         return map._entries[index]._value;
     }
 
@@ -401,7 +401,7 @@
         IERC20ToUint256Map storage map,
         IERC20 key,
         uint256 errorCode
-    ) internal view returns (uint256) {
+    ) internal returns (uint256) {
         uint256 index = map._indexes[key];
         _require(index > 0, errorCode);
         return unchecked_valueAt(map, index - 1);
@@ -418,7 +418,7 @@
         IERC20ToUint256Map storage map,
         IERC20 key,
         uint256 errorCode
-    ) internal view returns (uint256) {
+    ) internal returns (uint256) {
         uint256 uncheckedIndex = unchecked_indexOf(map, key);
         _require(uncheckedIndex != 0, errorCode);
         return uncheckedIndex - 1;
@@ -428,7 +428,7 @@
      * @dev Returns the index for `key` **plus one**. Does not revert if the key is not in the map, and returns 0
      * instead.
      */
-    function unchecked_indexOf(IERC20ToUint256Map storage map, IERC20 key) internal view returns (uint256) {
+    function unchecked_indexOf(IERC20ToUint256Map storage map, IERC20 key) internal returns (uint256) {
         return map._indexes[key];
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/EnumerableSet.sol solidity-utils/contracts/openzeppelin/EnumerableSet.sol
--- solidity-utils/contracts/openzeppelin/EnumerableSet.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/openzeppelin/EnumerableSet.sol	2022-11-22 00:28:06.000000000 -0800
@@ -7,7 +7,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Library for managing
@@ -106,14 +106,14 @@
     /**
      * @dev Returns true if the value is in the set. O(1).
      */
-    function contains(AddressSet storage set, address value) internal view returns (bool) {
+    function contains(AddressSet storage set, address value) internal returns (bool) {
         return set._indexes[value] != 0;
     }
 
     /**
      * @dev Returns the number of values on the set. O(1).
      */
-    function length(AddressSet storage set) internal view returns (uint256) {
+    function length(AddressSet storage set) internal returns (uint256) {
         return set._values.length;
     }
 
@@ -127,7 +127,7 @@
      *
      * - `index` must be strictly less than {length}.
      */
-    function at(AddressSet storage set, uint256 index) internal view returns (address) {
+    function at(AddressSet storage set, uint256 index) internal returns (address) {
         _require(set._values.length > index, Errors.OUT_OF_BOUNDS);
         return unchecked_at(set, index);
     }
@@ -140,11 +140,11 @@
      * within bounds.
      */
     // solhint-disable-next-line func-name-mixedcase
-    function unchecked_at(AddressSet storage set, uint256 index) internal view returns (address) {
+    function unchecked_at(AddressSet storage set, uint256 index) internal returns (address) {
         return set._values[index];
     }
 
-    function rawIndexOf(AddressSet storage set, address value) internal view returns (uint256) {
+    function rawIndexOf(AddressSet storage set, address value) internal returns (uint256) {
         return set._indexes[value] - 1;
     }
 
@@ -217,14 +217,14 @@
     /**
      * @dev Returns true if the value is in the set. O(1).
      */
-    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
+    function contains(Bytes32Set storage set, bytes32 value) internal returns (bool) {
         return set._indexes[value] != 0;
     }
 
     /**
      * @dev Returns the number of values on the set. O(1).
      */
-    function length(Bytes32Set storage set) internal view returns (uint256) {
+    function length(Bytes32Set storage set) internal returns (uint256) {
         return set._values.length;
     }
 
@@ -238,7 +238,7 @@
      *
      * - `index` must be strictly less than {length}.
      */
-    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
+    function at(Bytes32Set storage set, uint256 index) internal returns (bytes32) {
         _require(set._values.length > index, Errors.OUT_OF_BOUNDS);
         return unchecked_at(set, index);
     }
@@ -251,11 +251,11 @@
      * within bounds.
      */
     // solhint-disable-next-line func-name-mixedcase
-    function unchecked_at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
+    function unchecked_at(Bytes32Set storage set, uint256 index) internal returns (bytes32) {
         return set._values[index];
     }
 
-    function rawIndexOf(Bytes32Set storage set, bytes32 value) internal view returns (uint256) {
+    function rawIndexOf(Bytes32Set storage set, bytes32 value) internal returns (uint256) {
         return set._indexes[value] - 1;
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/Ownable.sol solidity-utils/contracts/openzeppelin/Ownable.sol
--- solidity-utils/contracts/openzeppelin/Ownable.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/openzeppelin/Ownable.sol	2022-11-22 00:28:06.000000000 -0800
@@ -5,7 +5,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Contract module which provides a basic access control mechanism, where
@@ -34,7 +34,7 @@
     /**
      * @dev Returns the address of the current owner.
      */
-    function owner() public view virtual returns (address) {
+    function owner() public virtual returns (address) {
         return _owner;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol
--- solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol	2022-11-22 00:28:06.000000000 -0800
@@ -6,7 +6,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Contract module that helps prevent reentrant calls to a function.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/SafeCast.sol solidity-utils/contracts/openzeppelin/SafeCast.sol
--- solidity-utils/contracts/openzeppelin/SafeCast.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/openzeppelin/SafeCast.sol	2022-11-22 00:28:06.000000000 -0800
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/SafeERC20.sol solidity-utils/contracts/openzeppelin/SafeERC20.sol
--- solidity-utils/contracts/openzeppelin/SafeERC20.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/openzeppelin/SafeERC20.sol	2022-11-22 00:28:06.000000000 -0800
@@ -6,8 +6,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 /**
  * @title SafeERC20
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/openzeppelin/SafeMath.sol solidity-utils/contracts/openzeppelin/SafeMath.sol
--- solidity-utils/contracts/openzeppelin/SafeMath.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/openzeppelin/SafeMath.sol	2022-11-22 00:28:06.000000000 -0800
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Wrappers over Solidity's arithmetic operations with added overflow
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/test/BalancerErrorsMock.sol solidity-utils/contracts/test/BalancerErrorsMock.sol
--- solidity-utils/contracts/test/BalancerErrorsMock.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/test/BalancerErrorsMock.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 contract BalancerErrorsMock {
     function fail(uint256 code) external pure {
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/test/ERC1271Mock.sol solidity-utils/contracts/test/ERC1271Mock.sol
--- solidity-utils/contracts/test/ERC1271Mock.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/test/ERC1271Mock.sol	2022-11-22 00:28:06.000000000 -0800
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
 
 contract ERC1271Mock is IERC1271 {
     mapping(bytes32 => bool) private _approved;
@@ -20,7 +20,7 @@
         return keccak256(abi.encodePacked(digest, signature));
     }
 
-    function isValidSignature(bytes32 digest, bytes memory signature) external view override returns (bytes4) {
+    function isValidSignature(bytes32 digest, bytes memory signature) external override returns (bytes4) {
         require(!_revert, "ERC1271_MOCK_REVERT");
 
         return _approved[getKey(digest, signature)] ? IERC1271.isValidSignature.selector : bytes4(0);
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/test/EnumerableMapMock.sol solidity-utils/contracts/test/EnumerableMapMock.sol
--- solidity-utils/contracts/test/EnumerableMapMock.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/test/EnumerableMapMock.sol	2022-11-22 00:28:06.000000000 -0800
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 import "../openzeppelin/EnumerableMap.sol";
 
@@ -16,7 +16,7 @@
 
     EnumerableMap.IERC20ToBytes32Map private _map;
 
-    function contains(IERC20 key) public view returns (bool) {
+    function contains(IERC20 key) public returns (bool) {
         return _map.contains(key);
     }
 
@@ -25,11 +25,11 @@
         emit OperationResult(result);
     }
 
-    function unchecked_indexOf(IERC20 key) public view returns (uint256) {
+    function unchecked_indexOf(IERC20 key) public returns (uint256) {
         return _map.unchecked_indexOf(key);
     }
 
-    function indexOf(IERC20 key, uint256 errorCode) public view returns (uint256) {
+    function indexOf(IERC20 key, uint256 errorCode) public returns (uint256) {
         return _map.indexOf(key, errorCode);
     }
 
@@ -42,23 +42,23 @@
         emit OperationResult(result);
     }
 
-    function length() public view returns (uint256) {
+    function length() public returns (uint256) {
         return _map.length();
     }
 
-    function at(uint256 index) public view returns (IERC20 key, bytes32 value) {
+    function at(uint256 index) public returns (IERC20 key, bytes32 value) {
         return _map.at(index);
     }
 
-    function unchecked_at(uint256 index) public view returns (IERC20 key, bytes32 value) {
+    function unchecked_at(uint256 index) public returns (IERC20 key, bytes32 value) {
         return _map.unchecked_at(index);
     }
 
-    function unchecked_valueAt(uint256 index) public view returns (bytes32 value) {
+    function unchecked_valueAt(uint256 index) public returns (bytes32 value) {
         return _map.unchecked_valueAt(index);
     }
 
-    function get(IERC20 key, uint256 errorCode) public view returns (bytes32) {
+    function get(IERC20 key, uint256 errorCode) public returns (bytes32) {
         return _map.get(key, errorCode);
     }
 }
@@ -70,7 +70,7 @@
 
     EnumerableMap.IERC20ToUint256Map private _map;
 
-    function contains(IERC20 key) public view returns (bool) {
+    function contains(IERC20 key) public returns (bool) {
         return _map.contains(key);
     }
 
@@ -79,11 +79,11 @@
         emit OperationResult(result);
     }
 
-    function unchecked_indexOf(IERC20 key) public view returns (uint256) {
+    function unchecked_indexOf(IERC20 key) public returns (uint256) {
         return _map.unchecked_indexOf(key);
     }
 
-    function indexOf(IERC20 key, uint256 errorCode) public view returns (uint256) {
+    function indexOf(IERC20 key, uint256 errorCode) public returns (uint256) {
         return _map.indexOf(key, errorCode);
     }
 
@@ -96,23 +96,23 @@
         emit OperationResult(result);
     }
 
-    function length() public view returns (uint256) {
+    function length() public returns (uint256) {
         return _map.length();
     }
 
-    function at(uint256 index) public view returns (IERC20 key, uint256 value) {
+    function at(uint256 index) public returns (IERC20 key, uint256 value) {
         return _map.at(index);
     }
 
-    function unchecked_at(uint256 index) public view returns (IERC20 key, uint256 value) {
+    function unchecked_at(uint256 index) public returns (IERC20 key, uint256 value) {
         return _map.unchecked_at(index);
     }
 
-    function unchecked_valueAt(uint256 index) public view returns (uint256 value) {
+    function unchecked_valueAt(uint256 index) public returns (uint256 value) {
         return _map.unchecked_valueAt(index);
     }
 
-    function get(IERC20 key, uint256 errorCode) public view returns (uint256) {
+    function get(IERC20 key, uint256 errorCode) public returns (uint256) {
         return _map.get(key, errorCode);
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/test/MockSplitCodeFactory.sol solidity-utils/contracts/test/MockSplitCodeFactory.sol
--- solidity-utils/contracts/test/MockSplitCodeFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/test/MockSplitCodeFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -24,7 +24,7 @@
         _id = id;
     }
 
-    function getId() external view returns (bytes32) {
+    function getId() external returns (bytes32) {
         return _id;
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/test/SignaturesValidatorMock.sol solidity-utils/contracts/test/SignaturesValidatorMock.sol
--- solidity-utils/contracts/test/SignaturesValidatorMock.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/test/SignaturesValidatorMock.sol	2022-11-22 00:28:06.000000000 -0800
@@ -17,7 +17,7 @@
         return keccak256(abi.encode(MOCK_AUTHENTICATE_TYPEHASH, amount, nonce));
     }
 
-    function getDigest(uint256 amount, uint256 nonce) public view returns (bytes32) {
+    function getDigest(uint256 amount, uint256 nonce) public returns (bytes32) {
         return _hashTypedDataV4(getStructHash(amount, nonce));
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts solidity-utils/contracts/test/SingletonAuthenticationMock.sol solidity-utils/contracts/test/SingletonAuthenticationMock.sol
--- solidity-utils/contracts/test/SingletonAuthenticationMock.sol	2022-11-21 22:55:10.000000000 -0800
+++ solidity-utils/contracts/test/SingletonAuthenticationMock.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "../helpers/SingletonAuthentication.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/BALTokenHolder.sol standalone-utils/contracts/BALTokenHolder.sol
--- standalone-utils/contracts/BALTokenHolder.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/BALTokenHolder.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBALTokenHolder.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerToken.sol";
+import "../../interfaces/contracts/standalone-utils/IBALTokenHolder.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 /**
  * @dev This contract simply holds the BAL token and delegates to Balancer Governance the permission to withdraw it. It
@@ -48,11 +48,11 @@
         _name = name;
     }
 
-    function getBalancerToken() external view returns (IBalancerToken) {
+    function getBalancerToken() external returns (IBalancerToken) {
         return _balancerToken;
     }
 
-    function getName() external view override returns (string memory) {
+    function getName() external override returns (string memory) {
         return _name;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/BALTokenHolderFactory.sol standalone-utils/contracts/BALTokenHolderFactory.sol
--- standalone-utils/contracts/BALTokenHolderFactory.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/BALTokenHolderFactory.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerToken.sol";
+import "../../interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
 
 import "./BALTokenHolder.sol";
 
@@ -35,15 +35,15 @@
         _vault = vault;
     }
 
-    function getBalancerToken() public view override returns (IBalancerToken) {
+    function getBalancerToken() public override returns (IBalancerToken) {
         return _balancerToken;
     }
 
-    function getVault() public view override returns (IVault) {
+    function getVault() public override returns (IVault) {
         return _vault;
     }
 
-    function isHolderFromFactory(address holder) external view override returns (bool) {
+    function isHolderFromFactory(address holder) external override returns (bool) {
         return _factoryCreatedHolders[holder];
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/BalancerQueries.sol standalone-utils/contracts/BalancerQueries.sol
--- standalone-utils/contracts/BalancerQueries.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/BalancerQueries.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,16 +15,16 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerQueries.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerQueries.sol";
 
-import "@balancer-labs/v2-vault/contracts/AssetHelpers.sol";
+import "../../vault/contracts/AssetHelpers.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
 
 /**
  * @dev This contract simply builds on top of the Balancer V2 architecture to provide useful helpers to users.
@@ -132,7 +132,7 @@
 
     function _validateAssetsAndGetBalances(bytes32 poolId, IAsset[] memory expectedAssets)
         internal
-        view
+       
         returns (uint256[] memory balances, uint256 lastChangeBlock)
     {
         IERC20[] memory actualTokens;
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/ProtocolFeePercentagesProvider.sol standalone-utils/contracts/ProtocolFeePercentagesProvider.sol
--- standalone-utils/contracts/ProtocolFeePercentagesProvider.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/ProtocolFeePercentagesProvider.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+import "../../interfaces/contracts/vault/IProtocolFeesCollector.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
 
 contract ProtocolFeePercentagesProvider is IProtocolFeePercentagesProvider, SingletonAuthentication {
     using SafeCast for uint256;
@@ -103,13 +103,13 @@
         emit ProtocolFeePercentageChanged(feeType, initialValue);
     }
 
-    function isValidFeeType(uint256 feeType) public view override returns (bool) {
+    function isValidFeeType(uint256 feeType) public override returns (bool) {
         return _feeTypeData[feeType].registered;
     }
 
     function isValidFeeTypePercentage(uint256 feeType, uint256 value)
         public
-        view
+       
         override
         withValidFeeType(feeType)
         returns (bool)
@@ -136,7 +136,7 @@
         emit ProtocolFeePercentageChanged(feeType, newValue);
     }
 
-    function getFeeTypePercentage(uint256 feeType) external view override withValidFeeType(feeType) returns (uint256) {
+    function getFeeTypePercentage(uint256 feeType) external override withValidFeeType(feeType) returns (uint256) {
         if (feeType == ProtocolFeeType.SWAP) {
             return _protocolFeesCollector.getSwapFeePercentage();
         } else if (feeType == ProtocolFeeType.FLASH_LOAN) {
@@ -148,7 +148,7 @@
 
     function getFeeTypeMaximumPercentage(uint256 feeType)
         public
-        view
+       
         override
         withValidFeeType(feeType)
         returns (uint256)
@@ -162,7 +162,7 @@
         }
     }
 
-    function getFeeTypeName(uint256 feeType) external view override withValidFeeType(feeType) returns (string memory) {
+    function getFeeTypeName(uint256 feeType) external override withValidFeeType(feeType) returns (string memory) {
         return _feeTypeData[feeType].name;
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/ProtocolFeesWithdrawer.sol standalone-utils/contracts/ProtocolFeesWithdrawer.sol
--- standalone-utils/contracts/ProtocolFeesWithdrawer.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/ProtocolFeesWithdrawer.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
 
 /**
  * @author Balancer Labs
@@ -46,14 +46,14 @@
     /**
      * @notice Returns the address of the Protocol Fee Collector.
      */
-    function getProtocolFeesCollector() external view override returns (IProtocolFeesCollector) {
+    function getProtocolFeesCollector() external override returns (IProtocolFeesCollector) {
         return _protocolFeesCollector;
     }
 
     /**
      * @notice Returns whether the provided token may be withdrawn from the Protocol Fee Collector
      */
-    function isWithdrawableToken(IERC20 token) public view override returns (bool) {
+    function isWithdrawableToken(IERC20 token) public override returns (bool) {
         return !_denylistedTokens.contains(address(token));
     }
 
@@ -61,7 +61,7 @@
      * @notice Returns whether the provided array of tokens may be withdrawn from the Protocol Fee Collector
      * @dev Returns false if any token is denylisted.
      */
-    function isWithdrawableTokens(IERC20[] calldata tokens) public view override returns (bool) {
+    function isWithdrawableTokens(IERC20[] calldata tokens) public override returns (bool) {
         uint256 tokensLength = tokens.length;
         for (uint256 i = 0; i < tokensLength; ++i) {
             if (!isWithdrawableToken(tokens[i])) return false;
@@ -72,14 +72,14 @@
     /**
      * @notice Returns the denylisted token at the given `index`.
      */
-    function getDenylistedToken(uint256 index) external view override returns (IERC20) {
+    function getDenylistedToken(uint256 index) external override returns (IERC20) {
         return IERC20(_denylistedTokens.at(index));
     }
 
     /**
      * @notice Returns the number of denylisted tokens.
      */
-    function getDenylistedTokensLength() external view override returns (uint256) {
+    function getDenylistedTokensLength() external override returns (uint256) {
         return _denylistedTokens.length();
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/AaveWrapping.sol standalone-utils/contracts/relayer/AaveWrapping.sol
--- standalone-utils/contracts/relayer/AaveWrapping.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/relayer/AaveWrapping.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IStaticATokenLM.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IStaticATokenLM.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/BalancerRelayer.sol standalone-utils/contracts/relayer/BalancerRelayer.sol
--- standalone-utils/contracts/relayer/BalancerRelayer.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/relayer/BalancerRelayer.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 /**
  * @title Balancer Relayer
@@ -66,11 +66,11 @@
         _require(msg.sender == address(_vault), Errors.ETH_TRANSFER);
     }
 
-    function getVault() external view override returns (IVault) {
+    function getVault() external override returns (IVault) {
         return _vault;
     }
 
-    function getLibrary() external view override returns (address) {
+    function getLibrary() external override returns (address) {
         return _library;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/BaseRelayerLibrary.sol standalone-utils/contracts/relayer/BaseRelayerLibrary.sol
--- standalone-utils/contracts/relayer/BaseRelayerLibrary.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/relayer/BaseRelayerLibrary.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "./IBaseRelayerLibrary.sol";
 import "./BalancerRelayer.sol";
@@ -47,11 +47,11 @@
         _entrypoint = new BalancerRelayer(vault, address(this));
     }
 
-    function getVault() public view override returns (IVault) {
+    function getVault() public override returns (IVault) {
         return _vault;
     }
 
-    function getEntrypoint() public view returns (IBalancerRelayer) {
+    function getEntrypoint() public returns (IBalancerRelayer) {
         return _entrypoint;
     }
 
@@ -88,7 +88,7 @@
      * @notice Returns the amount referenced by chained reference `ref`.
      * @dev It does not alter the reference (even if it's marked as temporary).
      */
-    function peekChainedReferenceValue(uint256 ref) public view override returns (uint256 value) {
+    function peekChainedReferenceValue(uint256 ref) public override returns (uint256 value) {
         (, value) = _peekChainedReferenceValue(ref);
     }
 
@@ -183,7 +183,7 @@
      * @dev Returns the storage slot for reference `ref` as well as the amount referenced by it.
      * It does not alter the reference (even if it's marked as temporary).
      */
-    function _peekChainedReferenceValue(uint256 ref) private view returns (bytes32 slot, uint256 value) {
+    function _peekChainedReferenceValue(uint256 ref) private returns (bytes32 slot, uint256 value) {
         slot = _getStorageSlot(ref);
 
         // Since we do manual calculation of storage slots, it is easier (and cheaper) to rely on internal assembly to
@@ -197,7 +197,7 @@
     // solhint-disable-next-line var-name-mixedcase
     bytes32 private immutable _TEMP_STORAGE_SUFFIX = keccak256("balancer.base-relayer-library");
 
-    function _getStorageSlot(uint256 ref) private view returns (bytes32) {
+    function _getStorageSlot(uint256 ref) private returns (bytes32) {
         // This replicates the mechanism Solidity uses to allocate storage slots for mappings, but using a hash as the
         // mapping's storage slot, and subtracting 1 at the end. This should be more than enough to prevent collisions
         // with other state variables this or derived contracts might use.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/ERC4626Wrapping.sol standalone-utils/contracts/relayer/ERC4626Wrapping.sol
--- standalone-utils/contracts/relayer/ERC4626Wrapping.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/relayer/ERC4626Wrapping.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IERC4626.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/GaugeActions.sol standalone-utils/contracts/relayer/GaugeActions.sol
--- standalone-utils/contracts/relayer/GaugeActions.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/relayer/GaugeActions.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+import "../../interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol
--- standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-vault/contracts/AssetHelpers.sol";
+import "../../vault/contracts/AssetHelpers.sol";
 
 /**
  * @title IBaseRelayerLibrary
@@ -27,11 +27,11 @@
         // solhint-disable-previous-line no-empty-blocks
     }
 
-    function getVault() public view virtual returns (IVault);
+    function getVault() public virtual returns (IVault);
 
     function approveVault(IERC20 token, uint256 amount) public virtual;
 
-    function peekChainedReferenceValue(uint256 ref) public view virtual returns (uint256);
+    function peekChainedReferenceValue(uint256 ref) public virtual returns (uint256);
 
     function _pullToken(
         address sender,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/LidoWrapping.sol standalone-utils/contracts/relayer/LidoWrapping.sol
--- standalone-utils/contracts/relayer/LidoWrapping.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/relayer/LidoWrapping.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IwstETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IstETH.sol";
+import "../../interfaces/contracts/standalone-utils/IwstETH.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/UnbuttonWrapping.sol standalone-utils/contracts/relayer/UnbuttonWrapping.sol
--- standalone-utils/contracts/relayer/UnbuttonWrapping.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/relayer/UnbuttonWrapping.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IUnbuttonToken.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/pool-linear/IUnbuttonToken.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/VaultActions.sol standalone-utils/contracts/relayer/VaultActions.sol
--- standalone-utils/contracts/relayer/VaultActions.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/relayer/VaultActions.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,12 +15,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/VaultHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/VaultHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/VaultPermit.sol standalone-utils/contracts/relayer/VaultPermit.sol
--- standalone-utils/contracts/relayer/VaultPermit.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/relayer/VaultPermit.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20PermitDAI.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20PermitDAI.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol
--- standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-stable/StablePoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol";
+import "../../interfaces/contracts/pool-stable/StablePoolUserData.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IFlashLoanRecipient.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 import "hardhat/console.sol";
 
@@ -61,7 +61,7 @@
         _protocolFeeCollector = vault.getProtocolFeesCollector();
     }
 
-    function getVault() public view returns (IVault) {
+    function getVault() public returns (IVault) {
         return _vault;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/test/MockBaseRelayerLibrary.sol standalone-utils/contracts/test/MockBaseRelayerLibrary.sol
--- standalone-utils/contracts/test/MockBaseRelayerLibrary.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/test/MockBaseRelayerLibrary.sol	2022-11-22 00:28:06.000000000 -0800
@@ -16,7 +16,7 @@
 
 pragma solidity ^0.7.0;
 
-//import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBaseRelayerLibrary.sol";
+//import "../../interfaces/contracts/standalone-utils/IBaseRelayerLibrary.sol";
 
 import "../relayer/BaseRelayerLibrary.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/test/MockStETH.sol standalone-utils/contracts/test/MockStETH.sol
--- standalone-utils/contracts/test/MockStETH.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/test/MockStETH.sol	2022-11-22 00:28:06.000000000 -0800
@@ -16,10 +16,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol";
+import "../../interfaces/contracts/standalone-utils/IstETH.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/test/TestToken.sol";
 
 contract MockStETH is TestToken, IstETH {
     constructor(
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/test/MockWstETH.sol standalone-utils/contracts/test/MockWstETH.sol
--- standalone-utils/contracts/test/MockWstETH.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/test/MockWstETH.sol	2022-11-22 00:28:06.000000000 -0800
@@ -16,11 +16,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IwstETH.sol";
+import "../../interfaces/contracts/standalone-utils/IstETH.sol";
+import "../../interfaces/contracts/standalone-utils/IwstETH.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
 
 contract MockWstETH is ERC20, IwstETH {
     using FixedPoint for uint256;
@@ -51,19 +51,19 @@
         _mint(msg.sender, getWstETHByStETH(msg.value));
     }
 
-    function getWstETHByStETH(uint256 _stETHAmount) public view override returns (uint256) {
+    function getWstETHByStETH(uint256 _stETHAmount) public override returns (uint256) {
         return _stETHAmount.divDown(rate);
     }
 
-    function getStETHByWstETH(uint256 _wstETHAmount) public view override returns (uint256) {
+    function getStETHByWstETH(uint256 _wstETHAmount) public override returns (uint256) {
         return _wstETHAmount.mulDown(rate);
     }
 
-    function stEthPerToken() external view override returns (uint256) {
+    function stEthPerToken() external override returns (uint256) {
         return getStETHByWstETH(1 ether);
     }
 
-    function tokensPerStEth() external view override returns (uint256) {
+    function tokensPerStEth() external override returns (uint256) {
         return getWstETHByStETH(1 ether);
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts standalone-utils/contracts/test/TestWETH.sol standalone-utils/contracts/test/TestWETH.sol
--- standalone-utils/contracts/test/TestWETH.sol	2022-11-21 22:55:10.000000000 -0800
+++ standalone-utils/contracts/test/TestWETH.sol	2022-11-22 00:28:06.000000000 -0800
@@ -16,7 +16,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
 
 contract TestWETH is IWETH {
     string public name = "Wrapped Ether";
@@ -51,7 +51,7 @@
         emit Deposit(destinatary, amount);
     }
 
-    function totalSupply() public view override returns (uint256) {
+    function totalSupply() public override returns (uint256) {
         return address(this).balance;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/AssetHelpers.sol vault/contracts/AssetHelpers.sol
--- vault/contracts/AssetHelpers.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/AssetHelpers.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IAsset.sol";
 
 abstract contract AssetHelpers {
     // solhint-disable-next-line var-name-mixedcase
@@ -32,7 +32,7 @@
     }
 
     // solhint-disable-next-line func-name-mixedcase
-    function _WETH() internal view returns (IWETH) {
+    function _WETH() internal returns (IWETH) {
         return _weth;
     }
 
@@ -47,14 +47,14 @@
      * @dev Translates `asset` into an equivalent IERC20 token address. If `asset` represents ETH, it will be translated
      * to the WETH contract.
      */
-    function _translateToIERC20(IAsset asset) internal view returns (IERC20) {
+    function _translateToIERC20(IAsset asset) internal returns (IERC20) {
         return _isETH(asset) ? _WETH() : _asIERC20(asset);
     }
 
     /**
      * @dev Same as `_translateToIERC20(IAsset)`, but for an entire array.
      */
-    function _translateToIERC20(IAsset[] memory assets) internal view returns (IERC20[] memory) {
+    function _translateToIERC20(IAsset[] memory assets) internal returns (IERC20[] memory) {
         IERC20[] memory tokens = new IERC20[](assets.length);
         for (uint256 i = 0; i < assets.length; ++i) {
             tokens[i] = _translateToIERC20(assets[i]);
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/AssetManagers.sol vault/contracts/AssetManagers.sol
--- vault/contracts/AssetManagers.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/AssetManagers.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./UserBalance.sol";
 import "./balances/BalanceAllocation.sol";
@@ -177,7 +177,7 @@
     /**
      * @dev Returns true if `token` is registered for `poolId`.
      */
-    function _isTokenRegistered(bytes32 poolId, IERC20 token) private view returns (bool) {
+    function _isTokenRegistered(bytes32 poolId, IERC20 token) private returns (bool) {
         PoolSpecialization specialization = _getPoolSpecialization(poolId);
         if (specialization == PoolSpecialization.TWO_TOKEN) {
             return _isTwoTokenPoolTokenRegistered(poolId, token);
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/AssetTransfersHandler.sol vault/contracts/AssetTransfersHandler.sol
--- vault/contracts/AssetTransfersHandler.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/AssetTransfersHandler.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,15 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IAsset.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./AssetHelpers.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/Fees.sol vault/contracts/Fees.sol
--- vault/contracts/Fees.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/Fees.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 import "./ProtocolFeesCollector.sol";
 import "./VaultAuthorization.sol";
@@ -39,21 +39,21 @@
         _protocolFeesCollector = new ProtocolFeesCollector(IVault(this));
     }
 
-    function getProtocolFeesCollector() public view override returns (IProtocolFeesCollector) {
+    function getProtocolFeesCollector() public override returns (IProtocolFeesCollector) {
         return _protocolFeesCollector;
     }
 
     /**
      * @dev Returns the protocol swap fee percentage.
      */
-    function _getProtocolSwapFeePercentage() internal view returns (uint256) {
+    function _getProtocolSwapFeePercentage() internal returns (uint256) {
         return getProtocolFeesCollector().getSwapFeePercentage();
     }
 
     /**
      * @dev Returns the protocol fee amount to charge for a flash loan of `amount`.
      */
-    function _calculateFlashLoanFeeAmount(uint256 amount) internal view returns (uint256) {
+    function _calculateFlashLoanFeeAmount(uint256 amount) internal returns (uint256) {
         // Fixed point multiplication introduces error: we round up, which means in certain scenarios the charged
         // percentage can be slightly higher than intended.
         uint256 percentage = getProtocolFeesCollector().getFlashLoanFeePercentage();
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/FlashLoans.sol vault/contracts/FlashLoans.sol
--- vault/contracts/FlashLoans.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/FlashLoans.sol	2022-11-22 00:28:06.000000000 -0800
@@ -19,12 +19,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IFlashLoanRecipient.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 import "./Fees.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/PoolBalances.sol vault/contracts/PoolBalances.sol
--- vault/contracts/PoolBalances.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/PoolBalances.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./Fees.sol";
 import "./PoolTokens.sol";
@@ -287,7 +287,7 @@
      */
     function _validateTokensAndGetBalances(bytes32 poolId, IERC20[] memory expectedTokens)
         private
-        view
+       
         returns (bytes32[] memory)
     {
         (IERC20[] memory actualTokens, bytes32[] memory balances) = _getPoolTokens(poolId);
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/PoolRegistry.sol vault/contracts/PoolRegistry.sol
--- vault/contracts/PoolRegistry.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/PoolRegistry.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./VaultAuthorization.sol";
 
@@ -53,14 +53,14 @@
     /**
      * @dev Reverts unless `poolId` corresponds to a registered Pool.
      */
-    function _ensureRegisteredPool(bytes32 poolId) internal view {
+    function _ensureRegisteredPool(bytes32 poolId) internal{
         _require(_isPoolRegistered[poolId], Errors.INVALID_POOL_ID);
     }
 
     /**
      * @dev Reverts unless `poolId` corresponds to a registered Pool, and the caller is the Pool's contract.
      */
-    function _ensurePoolIsSender(bytes32 poolId) private view {
+    function _ensurePoolIsSender(bytes32 poolId) private{
         _ensureRegisteredPool(poolId);
         _require(msg.sender == _getPoolAddress(poolId), Errors.CALLER_NOT_POOL);
     }
@@ -89,7 +89,7 @@
 
     function getPool(bytes32 poolId)
         external
-        view
+       
         override
         withRegisteredPool(poolId)
         returns (address, PoolSpecialization)
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/PoolTokens.sol vault/contracts/PoolTokens.sol
--- vault/contracts/PoolTokens.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/PoolTokens.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./AssetManagers.sol";
 import "./PoolRegistry.sol";
@@ -85,7 +85,7 @@
 
     function getPoolTokens(bytes32 poolId)
         external
-        view
+       
         override
         withRegisteredPool(poolId)
         returns (
@@ -101,7 +101,7 @@
 
     function getPoolTokenInfo(bytes32 poolId, IERC20 token)
         external
-        view
+       
         override
         withRegisteredPool(poolId)
         returns (
@@ -132,7 +132,7 @@
     /**
      * @dev Returns all of `poolId`'s registered tokens, along with their raw balances.
      */
-    function _getPoolTokens(bytes32 poolId) internal view returns (IERC20[] memory tokens, bytes32[] memory balances) {
+    function _getPoolTokens(bytes32 poolId) internal returns (IERC20[] memory tokens, bytes32[] memory balances) {
         PoolSpecialization specialization = _getPoolSpecialization(poolId);
         if (specialization == PoolSpecialization.TWO_TOKEN) {
             return _getTwoTokenPoolTokens(poolId);
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/ProtocolFeesCollector.sol vault/contracts/ProtocolFeesCollector.sol
--- vault/contracts/ProtocolFeesCollector.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/ProtocolFeesCollector.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,12 +15,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol";
+import "../../interfaces/contracts/vault/IProtocolFeesCollector.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 /**
  * @dev This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the
@@ -86,17 +86,17 @@
         emit FlashLoanFeePercentageChanged(newFlashLoanFeePercentage);
     }
 
-    function getSwapFeePercentage() external view override returns (uint256) {
+    function getSwapFeePercentage() external override returns (uint256) {
         return _swapFeePercentage;
     }
 
-    function getFlashLoanFeePercentage() external view override returns (uint256) {
+    function getFlashLoanFeePercentage() external override returns (uint256) {
         return _flashLoanFeePercentage;
     }
 
     function getCollectedFeeAmounts(IERC20[] memory tokens)
         external
-        view
+       
         override
         returns (uint256[] memory feeAmounts)
     {
@@ -106,15 +106,15 @@
         }
     }
 
-    function getAuthorizer() external view override returns (IAuthorizer) {
+    function getAuthorizer() external override returns (IAuthorizer) {
         return _getAuthorizer();
     }
 
-    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {
+    function _canPerform(bytes32 actionId, address account) internal override returns (bool) {
         return _getAuthorizer().canPerform(actionId, account, address(this));
     }
 
-    function _getAuthorizer() internal view returns (IAuthorizer) {
+    function _getAuthorizer() internal returns (IAuthorizer) {
         return vault.getAuthorizer();
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/Swaps.sol vault/contracts/Swaps.sol
--- vault/contracts/Swaps.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/Swaps.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,20 +15,20 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../interfaces/contracts/vault/IPoolSwapStructs.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
+
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./PoolBalances.sol";
 import "./balances/BalanceAllocation.sol";
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/UserBalance.sol vault/contracts/UserBalance.sol
--- vault/contracts/UserBalance.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/UserBalance.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./AssetTransfersHandler.sol";
 import "./VaultAuthorization.sol";
@@ -47,7 +47,7 @@
 
     function getInternalBalance(address user, IERC20[] memory tokens)
         external
-        view
+       
         override
         returns (uint256[] memory balances)
     {
@@ -215,7 +215,7 @@
     /**
      * @dev Returns `account`'s Internal Balance for `token`.
      */
-    function _getInternalBalance(address account, IERC20 token) internal view returns (uint256) {
+    function _getInternalBalance(address account, IERC20 token) internal returns (uint256) {
         return _internalTokenBalance[account][token];
     }
 
@@ -224,7 +224,7 @@
      */
     function _validateUserBalanceOp(UserBalanceOp memory op, bool checkedCallerIsRelayer)
         private
-        view
+       
         returns (
             UserBalanceOpKind,
             IAsset,
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/Vault.sol vault/contracts/Vault.sol
--- vault/contracts/Vault.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/Vault.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
 
 import "./VaultAuthorization.sol";
 import "./FlashLoans.sol";
@@ -72,7 +72,7 @@
     }
 
     // solhint-disable-next-line func-name-mixedcase
-    function WETH() external view override returns (IWETH) {
+    function WETH() external override returns (IWETH) {
         return _WETH();
     }
 }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/VaultAuthorization.sol vault/contracts/VaultAuthorization.sol
--- vault/contracts/VaultAuthorization.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/VaultAuthorization.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
+
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol";
+import "../../solidity-utils/contracts/helpers/TemporarilyPausable.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 /**
  * @dev Manages access control of Vault permissioned functions by relying on the Authorizer and signature validation.
@@ -89,7 +89,7 @@
         _authorizer = newAuthorizer;
     }
 
-    function getAuthorizer() external view override returns (IAuthorizer) {
+    function getAuthorizer() external override returns (IAuthorizer) {
         return _authorizer;
     }
 
@@ -102,7 +102,7 @@
         emit RelayerApprovalChanged(relayer, sender, approved);
     }
 
-    function hasApprovedRelayer(address user, address relayer) external view override returns (bool) {
+    function hasApprovedRelayer(address user, address relayer) external override returns (bool) {
         return _hasApprovedRelayer(user, relayer);
     }
 
@@ -128,11 +128,11 @@
     /**
      * @dev Returns true if `user` approved `relayer` to act as a relayer for them.
      */
-    function _hasApprovedRelayer(address user, address relayer) internal view returns (bool) {
+    function _hasApprovedRelayer(address user, address relayer) internal returns (bool) {
         return _approvedRelayers[user][relayer];
     }
 
-    function _canPerform(bytes32 actionId, address user) internal view override returns (bool) {
+    function _canPerform(bytes32 actionId, address user) internal override returns (bool) {
         // Access control is delegated to the Authorizer.
         return _authorizer.canPerform(actionId, user, address(this));
     }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/authorizer/TimelockAuthorizer.sol vault/contracts/authorizer/TimelockAuthorizer.sol
--- vault/contracts/authorizer/TimelockAuthorizer.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/authorizer/TimelockAuthorizer.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,15 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
+
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 import "./TimelockExecutor.sol";
 
 /**
@@ -191,84 +191,84 @@
     /**
      * @notice Returns true if `account` is the root.
      */
-    function isRoot(address account) public view returns (bool) {
+    function isRoot(address account) public returns (bool) {
         return account == _root;
     }
 
     /**
      * @notice Returns true if `account` is the pending root.
      */
-    function isPendingRoot(address account) public view returns (bool) {
+    function isPendingRoot(address account) public returns (bool) {
         return account == _pendingRoot;
     }
 
     /**
      * @notice Returns the delay required to transfer the root address.
      */
-    function getRootTransferDelay() public view returns (uint256) {
+    function getRootTransferDelay() public returns (uint256) {
         return _rootTransferDelay;
     }
 
     /**
      * @notice Returns the vault address.
      */
-    function getVault() external view returns (address) {
+    function getVault() external returns (address) {
         return address(_vault);
     }
 
     /**
      * @notice Returns the executor address.
      */
-    function getExecutor() external view returns (address) {
+    function getExecutor() external returns (address) {
         return address(_executor);
     }
 
     /**
      * @notice Returns the root address.
      */
-    function getRoot() external view returns (address) {
+    function getRoot() external returns (address) {
         return _root;
     }
 
     /**
      * @notice Returns the currently pending new root address.
      */
-    function getPendingRoot() external view returns (address) {
+    function getPendingRoot() external returns (address) {
         return _pendingRoot;
     }
 
     /**
      * @notice Returns the action ID for function selector `selector`.
      */
-    function getActionId(bytes4 selector) public view override returns (bytes32) {
+    function getActionId(bytes4 selector) public override returns (bytes32) {
         return keccak256(abi.encodePacked(bytes32(uint256(address(this))), selector));
     }
 
     /**
      * @notice Returns the action ID for granting a permission for action `actionId`.
      */
-    function getGrantPermissionActionId(bytes32 actionId) public view returns (bytes32) {
+    function getGrantPermissionActionId(bytes32 actionId) public returns (bytes32) {
         return getExtendedActionId(GRANT_ACTION_ID, actionId);
     }
 
     /**
      * @notice Returns the action ID for revoking a permission for action `actionId`.
      */
-    function getRevokePermissionActionId(bytes32 actionId) public view returns (bytes32) {
+    function getRevokePermissionActionId(bytes32 actionId) public returns (bytes32) {
         return getExtendedActionId(REVOKE_ACTION_ID, actionId);
     }
 
     /**
      * @notice Returns the action ID for executing the scheduled action with execution ID `executionId`.
      */
-    function getExecuteExecutionActionId(uint256 executionId) public view returns (bytes32) {
+    function getExecuteExecutionActionId(uint256 executionId) public returns (bytes32) {
         return getExtendedActionId(EXECUTE_ACTION_ID, bytes32(executionId));
     }
 
     /**
      * @notice Returns the action ID for scheduling setting a new delay for action `actionId`.
      */
-    function getScheduleDelayActionId(bytes32 actionId) public view returns (bytes32) {
+    function getScheduleDelayActionId(bytes32 actionId) public returns (bytes32) {
         return getExtendedActionId(SCHEDULE_DELAY_ACTION_ID, actionId);
     }
 
@@ -282,7 +282,7 @@
     /**
      * @notice Returns the execution delay for action `actionId`.
      */
-    function getActionIdDelay(bytes32 actionId) external view returns (uint256) {
+    function getActionIdDelay(bytes32 actionId) external returns (uint256) {
         return _delaysPerActionId[actionId];
     }
 
@@ -310,7 +310,7 @@
         bytes32 actionId,
         address account,
         address where
-    ) external view returns (bool) {
+    ) external returns (bool) {
         return _isPermissionGranted[getPermissionId(actionId, account, where)];
     }
 
@@ -321,7 +321,7 @@
         bytes32 actionId,
         address account,
         address where
-    ) public view returns (bool) {
+    ) public returns (bool) {
         return
             _isPermissionGranted[getPermissionId(actionId, account, where)] ||
             _isPermissionGranted[getPermissionId(actionId, account, EVERYWHERE)];
@@ -334,7 +334,7 @@
         bytes32 actionId,
         address account,
         address where
-    ) public view returns (bool) {
+    ) public returns (bool) {
         return _hasPermissionSpecificallyOrGenerally(GRANT_ACTION_ID, account, where, actionId);
     }
 
@@ -345,7 +345,7 @@
         bytes32 actionId,
         address account,
         address where
-    ) public view returns (bool) {
+    ) public returns (bool) {
         return _hasPermissionSpecificallyOrGenerally(REVOKE_ACTION_ID, account, where, actionId);
     }
 
@@ -356,7 +356,7 @@
         bytes32 actionId,
         address account,
         address where
-    ) public view override returns (bool) {
+    ) public override returns (bool) {
         return
             _delaysPerActionId[actionId] > 0 ? account == address(_executor) : hasPermission(actionId, account, where);
     }
@@ -368,7 +368,7 @@
         bytes32 actionId,
         address account,
         address where
-    ) public view returns (bool) {
+    ) public returns (bool) {
         return _canPerformSpecificallyOrGenerally(GRANT_ACTION_ID, account, where, actionId);
     }
 
@@ -379,14 +379,14 @@
         bytes32 actionId,
         address account,
         address where
-    ) public view returns (bool) {
+    ) public returns (bool) {
         return _canPerformSpecificallyOrGenerally(REVOKE_ACTION_ID, account, where, actionId);
     }
 
     /**
      * @notice Returns the scheduled execution `scheduledExecutionId`.
      */
-    function getScheduledExecution(uint256 scheduledExecutionId) external view returns (ScheduledExecution memory) {
+    function getScheduledExecution(uint256 scheduledExecutionId) external returns (ScheduledExecution memory) {
         return _scheduledExecutions[scheduledExecutionId];
     }
 
@@ -394,7 +394,7 @@
      * @notice Returns true if execution `scheduledExecutionId` can be executed.
      * Only true if it is not already executed or cancelled, and if the execution delay has passed.
      */
-    function canExecute(uint256 scheduledExecutionId) external view returns (bool) {
+    function canExecute(uint256 scheduledExecutionId) external returns (bool) {
         require(scheduledExecutionId < _scheduledExecutions.length, "ACTION_DOES_NOT_EXIST");
         ScheduledExecution storage scheduledExecution = _scheduledExecutions[scheduledExecutionId];
         return
@@ -796,7 +796,7 @@
         address account,
         address where,
         bytes32 specifier
-    ) internal view returns (bool) {
+    ) internal returns (bool) {
         bytes32 specificActionId = getExtendedActionId(baseActionId, specifier);
         bytes32 generalActionId = getExtendedActionId(baseActionId, GENERAL_PERMISSION_SPECIFIER);
         return hasPermission(specificActionId, account, where) || hasPermission(generalActionId, account, where);
@@ -819,7 +819,7 @@
         address account,
         address where,
         bytes32 specifier
-    ) internal view returns (bool) {
+    ) internal returns (bool) {
         // If there is a delay defined for the specific action ID, then the sender must be the authorizer (scheduled
         // execution)
         bytes32 specificActionId = getExtendedActionId(baseActionId, specifier);
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/authorizer/TimelockExecutor.sol vault/contracts/authorizer/TimelockExecutor.sol
--- vault/contracts/authorizer/TimelockExecutor.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/authorizer/TimelockExecutor.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./TimelockAuthorizer.sol";
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/balances/BalanceAllocation.sol vault/contracts/balances/BalanceAllocation.sol
--- vault/contracts/balances/BalanceAllocation.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/balances/BalanceAllocation.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../../solidity-utils/contracts/math/Math.sol";
 
 // This library is used to create a data structure that represents a token's balance for a Pool. 'cash' is how many
 // tokens the Pool has sitting inside of the Vault. 'managed' is how many tokens were withdrawn from the Vault by the
@@ -157,7 +157,7 @@
      *
      * Updates the last total balance change block, even if `amount` is zero.
      */
-    function increaseCash(bytes32 balance, uint256 amount) internal view returns (bytes32) {
+    function increaseCash(bytes32 balance, uint256 amount) internal returns (bytes32) {
         uint256 newCash = cash(balance).add(amount);
         uint256 currentManaged = managed(balance);
         uint256 newLastChangeBlock = block.number;
@@ -171,7 +171,7 @@
      *
      * Updates the last total balance change block, even if `amount` is zero.
      */
-    function decreaseCash(bytes32 balance, uint256 amount) internal view returns (bytes32) {
+    function decreaseCash(bytes32 balance, uint256 amount) internal returns (bytes32) {
         uint256 newCash = cash(balance).sub(amount);
         uint256 currentManaged = managed(balance);
         uint256 newLastChangeBlock = block.number;
@@ -209,7 +209,7 @@
      *
      * Updates the last total balance change block, even if `newManaged` is equal to the current 'managed' value.
      */
-    function setManaged(bytes32 balance, uint256 newManaged) internal view returns (bytes32) {
+    function setManaged(bytes32 balance, uint256 newManaged) internal returns (bytes32) {
         uint256 currentCash = cash(balance);
         uint256 newLastChangeBlock = block.number;
         return toBalance(currentCash, newManaged, newLastChangeBlock);
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/balances/GeneralPoolsBalance.sol vault/contracts/balances/GeneralPoolsBalance.sol
--- vault/contracts/balances/GeneralPoolsBalance.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/balances/GeneralPoolsBalance.sol	2022-11-22 00:28:06.000000000 -0800
@@ -14,10 +14,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
+import "../../../solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
 
 import "./BalanceAllocation.sol";
 
@@ -176,7 +176,7 @@
      */
     function _getGeneralPoolTokens(bytes32 poolId)
         internal
-        view
+       
         returns (IERC20[] memory tokens, bytes32[] memory balances)
     {
         EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];
@@ -199,7 +199,7 @@
      *
      * - `token` must be registered in the Pool
      */
-    function _getGeneralPoolBalance(bytes32 poolId, IERC20 token) internal view returns (bytes32) {
+    function _getGeneralPoolBalance(bytes32 poolId, IERC20 token) internal returns (bytes32) {
         EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];
         return _getGeneralPoolBalance(poolBalances, token);
     }
@@ -210,7 +210,7 @@
      */
     function _getGeneralPoolBalance(EnumerableMap.IERC20ToBytes32Map storage poolBalances, IERC20 token)
         private
-        view
+       
         returns (bytes32)
     {
         return poolBalances.get(token, Errors.TOKEN_NOT_REGISTERED);
@@ -221,7 +221,7 @@
      *
      * This function assumes `poolId` exists and corresponds to the General specialization setting.
      */
-    function _isGeneralPoolTokenRegistered(bytes32 poolId, IERC20 token) internal view returns (bool) {
+    function _isGeneralPoolTokenRegistered(bytes32 poolId, IERC20 token) internal returns (bool) {
         EnumerableMap.IERC20ToBytes32Map storage poolBalances = _generalPoolsBalances[poolId];
         return poolBalances.contains(token);
     }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol
--- vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
 
 import "./BalanceAllocation.sol";
 import "../PoolRegistry.sol";
@@ -178,7 +178,7 @@
      */
     function _getMinimalSwapInfoPoolTokens(bytes32 poolId)
         internal
-        view
+       
         returns (IERC20[] memory tokens, bytes32[] memory balances)
     {
         EnumerableSet.AddressSet storage poolTokens = _minimalSwapInfoPoolsTokens[poolId];
@@ -202,7 +202,7 @@
      * - `poolId` must be a Minimal Swap Info Pool
      * - `token` must be registered in the Pool
      */
-    function _getMinimalSwapInfoPoolBalance(bytes32 poolId, IERC20 token) internal view returns (bytes32) {
+    function _getMinimalSwapInfoPoolBalance(bytes32 poolId, IERC20 token) internal returns (bytes32) {
         bytes32 balance = _minimalSwapInfoPoolsBalances[poolId][token];
 
         // A non-zero balance guarantees that the token is registered. If zero, we manually check if the token is
@@ -225,7 +225,7 @@
      *
      * This function assumes `poolId` exists and corresponds to the Minimal Swap Info specialization setting.
      */
-    function _isMinimalSwapInfoPoolTokenRegistered(bytes32 poolId, IERC20 token) internal view returns (bool) {
+    function _isMinimalSwapInfoPoolTokenRegistered(bytes32 poolId, IERC20 token) internal returns (bool) {
         EnumerableSet.AddressSet storage poolTokens = _minimalSwapInfoPoolsTokens[poolId];
         return poolTokens.contains(address(token));
     }
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/balances/TwoTokenPoolsBalance.sol vault/contracts/balances/TwoTokenPoolsBalance.sol
--- vault/contracts/balances/TwoTokenPoolsBalance.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/balances/TwoTokenPoolsBalance.sol	2022-11-22 00:28:06.000000000 -0800
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 import "./BalanceAllocation.sol";
 import "../PoolRegistry.sol";
@@ -238,7 +238,7 @@
      */
     function _getTwoTokenPoolTokens(bytes32 poolId)
         internal
-        view
+       
         returns (IERC20[] memory tokens, bytes32[] memory balances)
     {
         (, IERC20 tokenA, bytes32 balanceA, IERC20 tokenB, bytes32 balanceB) = _getTwoTokenPoolBalances(poolId);
@@ -268,7 +268,7 @@
      */
     function _getTwoTokenPoolBalances(bytes32 poolId)
         private
-        view
+       
         returns (
             TwoTokenPoolBalances storage poolBalances,
             IERC20 tokenA,
@@ -303,7 +303,7 @@
      *
      * - `token` must be registered in the Pool
      */
-    function _getTwoTokenPoolBalance(bytes32 poolId, IERC20 token) internal view returns (bytes32) {
+    function _getTwoTokenPoolBalance(bytes32 poolId, IERC20 token) internal returns (bytes32) {
         // We can't just read the balance of token, because we need to know the full pair in order to compute the pair
         // hash and access the balance mapping. We therefore rely on `_getTwoTokenPoolBalances`.
         (, IERC20 tokenA, bytes32 balanceA, IERC20 tokenB, bytes32 balanceB) = _getTwoTokenPoolBalances(poolId);
@@ -337,7 +337,7 @@
         IERC20 tokenY
     )
         internal
-        view
+       
         returns (
             bytes32 balanceA,
             bytes32 balanceB,
@@ -377,7 +377,7 @@
      *
      * This function assumes `poolId` exists and corresponds to the Two Token specialization setting.
      */
-    function _isTwoTokenPoolTokenRegistered(bytes32 poolId, IERC20 token) internal view returns (bool) {
+    function _isTwoTokenPoolTokenRegistered(bytes32 poolId, IERC20 token) internal returns (bool) {
         TwoTokenPoolTokens storage poolTokens = _twoTokenPoolTokens[poolId];
 
         // The zero address can never be a registered token.
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/test/BalanceAllocationMock.sol vault/contracts/test/BalanceAllocationMock.sol
--- vault/contracts/test/BalanceAllocationMock.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/test/BalanceAllocationMock.sol	2022-11-22 00:28:06.000000000 -0800
@@ -55,11 +55,11 @@
         return BalanceAllocation.toBalance(_cash, _managed, _lastChangeBlock);
     }
 
-    function increaseCash(bytes32 balance, uint256 amount) public view returns (bytes32) {
+    function increaseCash(bytes32 balance, uint256 amount) public returns (bytes32) {
         return balance.increaseCash(amount);
     }
 
-    function decreaseCash(bytes32 balance, uint256 amount) public view returns (bytes32) {
+    function decreaseCash(bytes32 balance, uint256 amount) public returns (bytes32) {
         return balance.decreaseCash(amount);
     }
 
@@ -71,7 +71,7 @@
         return balance.managedToCash(amount);
     }
 
-    function setManaged(bytes32 balance, uint256 newManaged) public view returns (bytes32) {
+    function setManaged(bytes32 balance, uint256 newManaged) public returns (bytes32) {
         return balance.setManaged(newManaged);
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/test/MockAssetTransfersHandler.sol vault/contracts/test/MockAssetTransfersHandler.sol
--- vault/contracts/test/MockAssetTransfersHandler.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/test/MockAssetTransfersHandler.sol	2022-11-22 00:28:06.000000000 -0800
@@ -47,7 +47,7 @@
         _sendAsset(asset, amount, recipient, toInternalBalance);
     }
 
-    function getInternalBalance(address account, IERC20 token) external view returns (uint256) {
+    function getInternalBalance(address account, IERC20 token) external returns (uint256) {
         return _internalTokenBalance[account][token];
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/test/MockBasicAuthorizer.sol vault/contracts/test/MockBasicAuthorizer.sol
--- vault/contracts/test/MockBasicAuthorizer.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/test/MockBasicAuthorizer.sol	2022-11-22 00:28:06.000000000 -0800
@@ -37,7 +37,7 @@
         _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
     }
 
-    function hasRole(bytes32 role, address account) public view returns (bool) {
+    function hasRole(bytes32 role, address account) public returns (bool) {
         return _roles[role].members.contains(account);
     }
 
@@ -45,19 +45,19 @@
         bytes32 actionId,
         address account,
         address
-    ) external view override returns (bool) {
+    ) external override returns (bool) {
         return hasRole(actionId, account);
     }
 
-    function getRoleMemberCount(bytes32 role) external view override returns (uint256) {
+    function getRoleMemberCount(bytes32 role) external override returns (uint256) {
         return _roles[role].members.length();
     }
 
-    function getRoleMember(bytes32 role, uint256 index) external view override returns (address) {
+    function getRoleMember(bytes32 role, uint256 index) external override returns (address) {
         return _roles[role].members.at(index);
     }
 
-    function getRoleAdmin(bytes32 role) external view override returns (bytes32) {
+    function getRoleAdmin(bytes32 role) external override returns (bytes32) {
         return _roles[role].adminRole;
     }
 
diff -ruN --exclude=node_modules --exclude=deployments --exclude=governance-scripts vault/contracts/test/MockPool.sol vault/contracts/test/MockPool.sol
--- vault/contracts/test/MockPool.sol	2022-11-21 22:55:11.000000000 -0800
+++ vault/contracts/test/MockPool.sol	2022-11-22 00:28:06.000000000 -0800
@@ -33,11 +33,11 @@
         _vault = vault;
     }
 
-    function getVault() external view returns (IVault) {
+    function getVault() external returns (IVault) {
         return _vault;
     }
 
-    function getPoolId() public view override returns (bytes32) {
+    function getPoolId() public override returns (bytes32) {
         return _poolId;
     }
 
@@ -134,7 +134,7 @@
         uint256[] memory,
         uint256,
         uint256
-    ) external view override returns (uint256 amount) {
+    ) external override returns (uint256 amount) {
         return
             swapRequest.kind == IVault.SwapKind.GIVEN_IN
                 ? swapRequest.amount.mulDown(_multiplier)
@@ -146,7 +146,7 @@
         SwapRequest memory swapRequest,
         uint256,
         uint256
-    ) external view override returns (uint256) {
+    ) external override returns (uint256) {
         return
             swapRequest.kind == IVault.SwapKind.GIVEN_IN
                 ? swapRequest.amount.mulDown(_multiplier)
