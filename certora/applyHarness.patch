diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' .gitignore .gitignore
--- .gitignore	1969-12-31 19:00:00.000000000 -0500
+++ .gitignore	2022-08-23 19:17:12.878895600 -0400
@@ -0,0 +1,2 @@
+*
+!.gitignore
\ No newline at end of file
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' distributors/contracts/MerkleOrchard.sol distributors/contracts/MerkleOrchard.sol
--- distributors/contracts/MerkleOrchard.sol	2022-08-15 14:38:42.807716500 -0400
+++ distributors/contracts/MerkleOrchard.sol	2022-08-23 19:16:50.432418100 -0400
@@ -14,13 +14,13 @@
 
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../../interfaces/contracts/vault/IVault.sol";
+import "../../../interfaces/contracts/vault/IAsset.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../../solidity-utils/contracts/openzeppelin/MerkleProof.sol";
+import "../../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 pragma solidity ^0.7.0;
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' distributors/contracts/MerkleRedeem.sol distributors/contracts/MerkleRedeem.sol
--- distributors/contracts/MerkleRedeem.sol	2022-08-15 14:38:42.822718000 -0400
+++ distributors/contracts/MerkleRedeem.sol	2022-08-23 19:16:50.468413400 -0400
@@ -14,15 +14,15 @@
 
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../../interfaces/contracts/vault/IVault.sol";
+import "../../../interfaces/contracts/vault/IAsset.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../../solidity-utils/contracts/openzeppelin/MerkleProof.sol";
+import "../../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../../solidity-utils/contracts/openzeppelin/Ownable.sol";
+import "../../../solidity-utils/contracts/math/FixedPoint.sol";
 
 pragma solidity ^0.7.0;
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' distributors/contracts/test/MockRewardCallback.sol distributors/contracts/test/MockRewardCallback.sol
--- distributors/contracts/test/MockRewardCallback.sol	2022-08-15 14:38:42.836717200 -0400
+++ distributors/contracts/test/MockRewardCallback.sol	2022-08-23 19:16:50.416414800 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../interfaces/contracts/distributors/IDistributorCallback.sol";
 
 contract MockRewardCallback is IDistributorCallback {
     event CallbackReceived();
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol
--- interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol	2022-08-23 22:27:39.159476200 -0400
+++ interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol	2022-08-23 19:16:52.859415000 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "./IBasePoolFactory.sol";
+import "./IBasePoolSplitCodeFactory.sol";
 
-interface ILastCreatedPoolFactory is IBasePoolFactory {
+interface ILastCreatedPoolFactory is IBasePoolSplitCodeFactory {
     /**
      * @dev Returns the address of the last Pool created by this factory.
      *
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/BalancerMinter.sol liquidity-mining/contracts/BalancerMinter.sol
--- liquidity-mining/contracts/BalancerMinter.sol	2022-08-15 14:38:44.377629600 -0400
+++ liquidity-mining/contracts/BalancerMinter.sol	2022-08-23 19:16:54.874422300 -0400
@@ -14,15 +14,15 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeController.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeController.sol";
+import "../../interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeMath.sol";
+import "../../solidity-utils/contracts/openzeppelin/EIP712.sol";
+import "../../solidity-utils/contracts/helpers/EOASignaturesValidator.sol";
 
 contract BalancerMinter is IBalancerMinter, ReentrancyGuard, EOASignaturesValidator {
     using SafeMath for uint256;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/BalancerTokenAdmin.sol liquidity-mining/contracts/BalancerTokenAdmin.sol
--- liquidity-mining/contracts/BalancerTokenAdmin.sol	2022-08-15 14:38:44.405631200 -0400
+++ liquidity-mining/contracts/BalancerTokenAdmin.sol	2022-08-23 19:16:54.910415000 -0400
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // solhint-disable not-rely-on-time
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/SmartWalletChecker.sol liquidity-mining/contracts/SmartWalletChecker.sol
--- liquidity-mining/contracts/SmartWalletChecker.sol	2022-08-15 14:38:44.472210100 -0400
+++ liquidity-mining/contracts/SmartWalletChecker.sol	2022-08-23 19:16:54.943413800 -0400
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
 
 contract SmartWalletChecker is ISmartWalletChecker, SingletonAuthentication {
     using EnumerableSet for EnumerableSet.AddressSet;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/VotingEscrowDelegationProxy.sol liquidity-mining/contracts/VotingEscrowDelegationProxy.sol
--- liquidity-mining/contracts/VotingEscrowDelegationProxy.sol	2022-08-15 14:38:44.501659500 -0400
+++ liquidity-mining/contracts/VotingEscrowDelegationProxy.sol	2022-08-23 19:16:54.956415500 -0400
@@ -14,10 +14,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IVeDelegation.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IVeDelegation.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
 
 contract VotingEscrowDelegationProxy is SingletonAuthentication {
     IERC20 private immutable _votingEscrow;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/admin/AuthorizerAdaptor.sol liquidity-mining/contracts/admin/AuthorizerAdaptor.sol
--- liquidity-mining/contracts/admin/AuthorizerAdaptor.sol	2022-08-15 14:38:44.518787000 -0400
+++ liquidity-mining/contracts/admin/AuthorizerAdaptor.sol	2022-08-23 19:16:54.299412100 -0400
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 /**
  * @title Authorizer Adaptor
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol
--- liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol	2022-08-15 14:38:44.534055200 -0400
+++ liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol	2022-08-23 19:16:54.315416200 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
+import "../../interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
 
 /**
  * @title ChildChainGaugeTokenAdder
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/admin/DistributionScheduler.sol liquidity-mining/contracts/admin/DistributionScheduler.sol
--- liquidity-mining/contracts/admin/DistributionScheduler.sol	2022-08-15 14:38:44.550624400 -0400
+++ liquidity-mining/contracts/admin/DistributionScheduler.sol	2022-08-23 19:16:54.334414200 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
+import "../../interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 // solhint-disable not-rely-on-time
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/admin/GaugeAdder.sol liquidity-mining/contracts/admin/GaugeAdder.sol
--- liquidity-mining/contracts/admin/GaugeAdder.sol	2022-08-15 14:38:44.572902000 -0400
+++ liquidity-mining/contracts/admin/GaugeAdder.sol	2022-08-23 19:16:54.365413900 -0400
@@ -14,14 +14,14 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeAdder.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeAdder.sol";
+import "../../interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
 
 contract GaugeAdder is IGaugeAdder, SingletonAuthentication, ReentrancyGuard {
     using EnumerableSet for EnumerableSet.AddressSet;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/fee-distribution/FeeDistributor.sol liquidity-mining/contracts/fee-distribution/FeeDistributor.sol
--- liquidity-mining/contracts/fee-distribution/FeeDistributor.sol	2022-08-15 14:38:44.595219700 -0400
+++ liquidity-mining/contracts/fee-distribution/FeeDistributor.sol	2022-08-23 19:16:54.400415200 -0400
@@ -15,16 +15,16 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IFeeDistributor.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IVotingEscrow.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
+import "../../interfaces/contracts/liquidity-mining/IFeeDistributor.sol";
+import "../../interfaces/contracts/liquidity-mining/IVotingEscrow.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/OptionalOnlyCaller.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/OptionalOnlyCaller.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeMath.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // solhint-disable not-rely-on-time
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol
--- liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol	2022-08-15 14:38:44.620218400 -0400
+++ liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol	2022-08-23 19:16:54.647415300 -0400
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainStreamer.sol";
+import "../../interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainStreamer.sol";
 
 /**
  * @title ChildChainGaugeRewardHelper
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol
--- liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol	2022-08-23 22:27:39.181475900 -0400
+++ liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol	2022-08-23 19:16:54.662413700 -0400
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
+import "../../interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+import "../../solidity-utils/contracts/openzeppelin/Clones.sol";

  contract ChildChainLiquidityGaugeFactory is IChildChainLiquidityGaugeFactory {
     // RewardsOnlyGauge expects the claim function selector to be left padded with zeros.

diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/StakelessGauge.sol liquidity-mining/contracts/gauges/StakelessGauge.sol
--- liquidity-mining/contracts/gauges/StakelessGauge.sol	2022-08-23 22:27:39.205494600 -0400
+++ liquidity-mining/contracts/gauges/StakelessGauge.sol	2022-08-23 19:16:54.676411800 -0400
@@ -14,18 +14,15 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeController.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakelessGauge.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeController.sol";
+import "../../interfaces/contracts/liquidity-mining/IStakelessGauge.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";

 abstract contract StakelessGauge is IStakelessGauge, ReentrancyGuard {
-    uint256 public constant MAX_RELATIVE_WEIGHT_CAP = 1e18;
-
     IERC20 internal immutable _balToken;
     IBalancerTokenAdmin private immutable _tokenAdmin;
     IBalancerMinter private immutable _minter;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol
--- liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol	2022-08-23 22:27:39.238476200 -0400
+++ liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGauge.sol	2022-08-23 19:16:54.480415700 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IArbitrumFeeProvider.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
+import "../../interfaces/contracts/liquidity-mining/IArbitrumFeeProvider.sol";
+import "../../interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
 
 import "../StakelessGauge.sol";
 import "./IGatewayRouter.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol
--- liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol	2022-08-23 22:27:39.291475300 -0400
+++ liquidity-mining/contracts/gauges/arbitrum/ArbitrumRootGaugeFactory.sol	2022-08-23 19:16:54.493413900 -0400
@@ -15,15 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGaugeFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
 
 import "./ArbitrumRootGauge.sol";
 
-contract ArbitrumRootGaugeFactory is ISingleRecipientGaugeFactory, IArbitrumFeeProvider, SingletonAuthentication {
+contract ArbitrumRootGaugeFactory is ILiquidityGaugeFactory, IArbitrumFeeProvider, SingletonAuthentication {
     ArbitrumRootGauge private _gaugeImplementation;
 
     mapping(address => bool) private _isGaugeFromFactory;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol
--- liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol	2022-08-15 14:38:44.738282400 -0400
+++ liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol	2022-08-23 19:16:54.505415400 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 interface IGatewayRouter {
     function outboundTransfer(
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeFactory.sol liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeFactory.sol
--- liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeFactory.sol	2022-08-23 22:27:39.308478600 -0400
+++ liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeFactory.sol	2022-08-23 19:16:54.542412100 -0400
@@ -15,12 +15,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBaseRootGaugeFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
+import "../../interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
+import "../../interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
 
-contract LiquidityGaugeFactory is IBaseRootGaugeFactory {
+contract LiquidityGaugeFactory is ILiquidityGaugeFactory {
     ILiquidityGauge private immutable _gaugeImplementation;
 
     mapping(address => bool) private _isGaugeFromFactory;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol
--- liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol	2022-08-23 22:27:39.357006200 -0400
+++ liquidity-mining/contracts/gauges/ethereum/SingleRecipientGauge.sol	2022-08-23 19:16:54.555413500 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
+import "../../interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 import "../StakelessGauge.sol";

diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/ethereum/SingleRecipientGaugeFactory.sol liquidity-mining/contracts/gauges/ethereum/SingleRecipientGaugeFactory.sol
--- liquidity-mining/contracts/gauges/ethereum/SingleRecipientGaugeFactory.sol	2022-08-23 22:27:39.375998400 -0400
+++ liquidity-mining/contracts/gauges/ethereum/SingleRecipientGaugeFactory.sol	2022-08-23 19:16:54.568413500 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGaugeFactory.sol";
+import "../../interfaces/contracts/liquidity-mining/ISingleRecipientGaugeFactory.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
 
 import "./SingleRecipientGauge.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol
--- liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol	2022-08-23 22:27:39.393996300 -0400
+++ liquidity-mining/contracts/gauges/optimism/OptimismRootGauge.sol	2022-08-23 19:16:54.583413400 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IOptimismGasLimitProvider.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
+import "../../interfaces/contracts/liquidity-mining/IOptimismGasLimitProvider.sol";
+import "../../interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
 
 import "../StakelessGauge.sol";

diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol
--- liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol	2022-08-23 22:27:39.416007800 -0400
+++ liquidity-mining/contracts/gauges/optimism/OptimismRootGaugeFactory.sol	2022-08-23 19:16:54.599416300 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGaugeFactory.sol";
+import "../../interfaces/contracts/liquidity-mining/ISingleRecipientGaugeFactory.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
 
 import "./OptimismRootGauge.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol
--- liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol	2022-08-23 22:27:39.440995700 -0400
+++ liquidity-mining/contracts/gauges/polygon/PolygonRootGauge.sol	2022-08-23 19:16:54.619415500 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
+import "../../interfaces/contracts/liquidity-mining/ISingleRecipientGauge.sol";
 
 import "../StakelessGauge.sol";

diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/polygon/PolygonRootGaugeFactory.sol liquidity-mining/contracts/gauges/polygon/PolygonRootGaugeFactory.sol
--- liquidity-mining/contracts/gauges/polygon/PolygonRootGaugeFactory.sol	2022-08-23 22:27:39.470995100 -0400
+++ liquidity-mining/contracts/gauges/polygon/PolygonRootGaugeFactory.sol	2022-08-23 19:16:54.632413900 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISingleRecipientGaugeFactory.sol";
+import "../../interfaces/contracts/liquidity-mining/ISingleRecipientGaugeFactory.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
 
 import "./PolygonRootGauge.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/test/MockGaugeController.sol liquidity-mining/contracts/test/MockGaugeController.sol
--- liquidity-mining/contracts/test/MockGaugeController.sol	2022-08-23 22:27:39.511994000 -0400
+++ liquidity-mining/contracts/test/MockGaugeController.sol	2022-08-23 19:16:54.734414500 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeController.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeController.sol";
 
 // For compatibility, we're keeping the same function names as in the original Curve code, including the mixed-case
 // naming convention.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/test/MockLiquidityGaugeFactory.sol liquidity-mining/contracts/test/MockLiquidityGaugeFactory.sol
--- liquidity-mining/contracts/test/MockLiquidityGaugeFactory.sol	2022-08-23 22:27:39.707996300 -0400
+++ liquidity-mining/contracts/test/MockLiquidityGaugeFactory.sol	2022-08-23 19:16:54.756414700 -0400
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/ILiquidityGaugeFactory.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
 
 import "./MockLiquidityGauge.sol";

diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/test/MockRewardTokenDistributor.sol liquidity-mining/contracts/test/MockRewardTokenDistributor.sol
--- liquidity-mining/contracts/test/MockRewardTokenDistributor.sol	2022-08-15 14:38:45.005717100 -0400
+++ liquidity-mining/contracts/test/MockRewardTokenDistributor.sol	2022-08-23 19:16:54.804414300 -0400
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
 
 // solhint-disable func-name-mixedcase, var-name-mixedcase, not-rely-on-time
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/test/TestAccessControl.sol liquidity-mining/contracts/test/TestAccessControl.sol
--- liquidity-mining/contracts/test/TestAccessControl.sol	2022-08-15 14:38:45.035432900 -0400
+++ liquidity-mining/contracts/test/TestAccessControl.sol	2022-08-23 19:16:54.825418400 -0400
@@ -2,8 +2,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 // This contract maintains the old AccessControl behaviour which is used by BalancerGovernanceToken in production
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/test/TestBalancerToken.sol liquidity-mining/contracts/test/TestBalancerToken.sol
--- liquidity-mining/contracts/test/TestBalancerToken.sol	2022-08-15 14:38:45.118162200 -0400
+++ liquidity-mining/contracts/test/TestBalancerToken.sol	2022-08-23 19:16:54.847415600 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Burnable.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20Burnable.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20Permit.sol";
 
 import "./TestAccessControl.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/LinearMath.sol pool-linear/contracts/LinearMath.sol
--- pool-linear/contracts/LinearMath.sol	2022-08-15 14:38:45.586868800 -0400
+++ pool-linear/contracts/LinearMath.sol	2022-08-23 19:16:56.065411800 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // These functions start with an underscore, as if they were part of a contract and not a library. At some point this
 // should be fixed.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/LinearPool.sol pool-linear/contracts/LinearPool.sol
--- pool-linear/contracts/LinearPool.sol	2022-08-23 22:27:39.770997600 -0400
+++ pool-linear/contracts/LinearPool.sol	2022-08-23 19:16:56.088412700 -0400
@@ -15,17 +15,18 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/ILinearPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/pool-linear/LinearPoolUserData.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
+import "../../interfaces/contracts/pool-linear/ILinearPool.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
+
+// import "../../pool-utils/contracts/BasePool.sol";
+import "../../pool-utils/contracts/BasePool.sol";
+import "../../pool-utils/contracts/rates/PriceRateCache.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/BasePool.sol";
-import "@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 import "./LinearMath.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/LinearPoolRebalancer.sol pool-linear/contracts/LinearPoolRebalancer.sol
--- pool-linear/contracts/LinearPoolRebalancer.sol	2022-08-15 14:38:45.622998100 -0400
+++ pool-linear/contracts/LinearPoolRebalancer.sol	2022-08-23 19:16:56.112426000 -0400
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerQueries.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/ILinearPool.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerQueries.sol";
+import "../../interfaces/contracts/pool-linear/ILinearPool.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 abstract contract LinearPoolRebalancer {
     using SafeERC20 for IERC20;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/aave/AaveLinearPool.sol pool-linear/contracts/aave/AaveLinearPool.sol
--- pool-linear/contracts/aave/AaveLinearPool.sol	2022-08-15 14:38:45.641334800 -0400
+++ pool-linear/contracts/aave/AaveLinearPool.sol	2022-08-23 19:16:55.899412900 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IStaticAToken.sol";
+import "../../interfaces/contracts/pool-linear/IStaticAToken.sol";
 
 import "../LinearPool.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/aave/AaveLinearPoolFactory.sol pool-linear/contracts/aave/AaveLinearPoolFactory.sol
--- pool-linear/contracts/aave/AaveLinearPoolFactory.sol	2022-08-23 22:27:39.809538100 -0400
+++ pool-linear/contracts/aave/AaveLinearPoolFactory.sol	2022-08-23 19:16:55.912414000 -0400
@@ -15,20 +15,25 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerQueries.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerQueries.sol";
+import "../../interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Create2.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Create2.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./AaveLinearPool.sol";
 import "./AaveLinearPoolRebalancer.sol";
 
-contract AaveLinearPoolFactory is ILastCreatedPoolFactory, BasePoolFactory, ReentrancyGuard, FactoryWidePauseWindow {
+contract AaveLinearPoolFactory is
+    ILastCreatedPoolFactory,
+    BasePoolSplitCodeFactory,
+    ReentrancyGuard,
+    FactoryWidePauseWindow
+{
     // Used for create2 deployments
     uint256 private _nextRebalancerSalt;
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol
--- pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol	2022-08-15 14:38:45.672785400 -0400
+++ pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol	2022-08-23 19:16:55.924411200 -0400
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IStaticAToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol";
+import "../../interfaces/contracts/pool-linear/IStaticAToken.sol";
+import "../../interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol";
 
 import "../LinearPoolRebalancer.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol
--- pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol	2022-08-15 14:38:45.698062400 -0400
+++ pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol	2022-08-23 19:16:55.938414300 -0400
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IUnbuttonToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IAToken.sol";
+import "../../interfaces/contracts/pool-linear/IUnbuttonToken.sol";
+import "../../interfaces/contracts/pool-linear/IAToken.sol";
 
 import "../LinearPool.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol
--- pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol	2022-08-23 22:27:39.849540500 -0400
+++ pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol	2022-08-23 19:16:55.951413500 -0400
@@ -15,17 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./UnbuttonAaveLinearPool.sol";
 
-contract UnbuttonAaveLinearPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
-    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(UnbuttonAaveLinearPool).creationCode)
-    {
+contract UnbuttonAaveLinearPoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    constructor(IVault vault) BasePoolSplitCodeFactory(vault, type(UnbuttonAaveLinearPool).creationCode) {
         // solhint-disable-previous-line no-empty-blocks
     }
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/erc4626/ERC4626LinearPool.sol pool-linear/contracts/erc4626/ERC4626LinearPool.sol
--- pool-linear/contracts/erc4626/ERC4626LinearPool.sol	2022-08-15 14:38:45.742753600 -0400
+++ pool-linear/contracts/erc4626/ERC4626LinearPool.sol	2022-08-23 19:16:55.964413600 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IERC4626.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "../LinearPool.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol
--- pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol	2022-08-23 22:27:39.866538100 -0400
+++ pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol	2022-08-23 19:16:55.975428100 -0400
@@ -15,17 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./ERC4626LinearPool.sol";
 
-contract ERC4626LinearPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
-    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(ERC4626LinearPool).creationCode)
-    {
+contract ERC4626LinearPoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    constructor(IVault vault) BasePoolSplitCodeFactory(vault, type(ERC4626LinearPool).creationCode) {
         // solhint-disable-previous-line no-empty-blocks
     }
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/test/MockAaveAMPLToken.sol pool-linear/contracts/test/MockAaveAMPLToken.sol
--- pool-linear/contracts/test/MockAaveAMPLToken.sol	2022-08-15 14:38:45.802384200 -0400
+++ pool-linear/contracts/test/MockAaveAMPLToken.sol	2022-08-23 19:16:56.013419300 -0400
@@ -16,7 +16,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IAToken.sol";
+import "../../interfaces/contracts/pool-linear/IAToken.sol";
 
 import "./MockUnbuttonERC20.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/test/MockERC4626Token.sol pool-linear/contracts/test/MockERC4626Token.sol
--- pool-linear/contracts/test/MockERC4626Token.sol	2022-08-15 14:38:45.816388900 -0400
+++ pool-linear/contracts/test/MockERC4626Token.sol	2022-08-23 19:16:56.027411600 -0400
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IERC4626.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/test/TestToken.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 contract MockERC4626Token is TestToken, IERC4626 {
     using FixedPoint for uint256;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/test/MockLinearPool.sol pool-linear/contracts/test/MockLinearPool.sol
--- pool-linear/contracts/test/MockLinearPool.sol	2022-08-23 22:27:39.893535900 -0400
+++ pool-linear/contracts/test/MockLinearPool.sol	2022-08-23 19:16:56.001412200 -0400
@@ -51,10 +51,6 @@
         // solhint-disable-previous-line no-empty-blocks
     }
 
-    function setTotalSupply(uint256 value) external {
-        _setTotalSupply(value);
-    }
-
     function getScalingFactor(IERC20 token) external view returns (uint256) {
         return _scalingFactor(token);
     }
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/test/MockStaticAToken.sol pool-linear/contracts/test/MockStaticAToken.sol
--- pool-linear/contracts/test/MockStaticAToken.sol	2022-08-15 14:38:45.895547400 -0400
+++ pool-linear/contracts/test/MockStaticAToken.sol	2022-08-23 19:16:56.039412500 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IStaticAToken.sol";
+import "../../interfaces/contracts/pool-linear/IStaticAToken.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol";
+import "../../solidity-utils/contracts/test/TestToken.sol";
 
 contract MockStaticAToken is TestToken, IStaticAToken, ILendingPool {
     uint256 private _rate = 1e27;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/test/MockUnbuttonERC20.sol pool-linear/contracts/test/MockUnbuttonERC20.sol
--- pool-linear/contracts/test/MockUnbuttonERC20.sol	2022-08-15 14:38:45.910189700 -0400
+++ pool-linear/contracts/test/MockUnbuttonERC20.sol	2022-08-23 19:16:56.052411500 -0400
@@ -16,10 +16,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IButtonWrapper.sol";
+import "../../interfaces/contracts/pool-linear/IButtonWrapper.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 contract MockUnbuttonERC20 is ERC20, IButtonWrapper {
     using SafeERC20 for IERC20;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/ComposableStablePool.sol pool-stable/contracts/ComposableStablePool.sol
--- pool-stable/contracts/ComposableStablePool.sol	2022-08-23 22:27:40.077055900 -0400
+++ pool-stable/contracts/ComposableStablePool.sol	2022-08-24 15:31:18.297556500 -0400
@@ -15,26 +15,25 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-stable/StablePoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../interfaces/contracts/pool-stable/StablePoolUserData.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
+
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+
+// import "../../pool-utils/contracts/BaseGeneralPool.sol";
+import "../../pool-utils/contracts/BaseGeneralPool.sol";
+import "../../pool-utils/contracts/rates/PriceRateCache.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/BaseGeneralPool.sol";
-import "@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol";
-
-import "./ComposableStablePoolStorage.sol";
-import "./ComposableStablePoolRates.sol";
 import "./ComposableStablePoolStorage.sol";
 import "./ComposableStablePoolRates.sol";
 import "./ComposableStablePoolProtocolFees.sol";
 import "./StablePoolAmplification.sol";
-import "./StableMath.sol";
+import "../../../harnesses/StableMathHarness.sol";
 
 /**
  * @dev StablePool with preminted BPT and rate providers for each token, allowing for e.g. wrapped tokens with a known
@@ -308,17 +307,21 @@
         bool isGivenIn = swapRequest.kind == IVault.SwapKind.GIVEN_IN;
 
         _upscaleArray(registeredBalances, scalingFactors);
-        swapRequest.amount = _upscale(
-            swapRequest.amount,
-            scalingFactors[isGivenIn ? registeredIndexIn : registeredIndexOut]
-        );
+        if (isGivenIn)
+            swapRequest.amount = _upscale(
+                swapRequest.amount,
+                scalingFactors[registeredIndexIn]
+            );
+        else
+            swapRequest.amount = _upscale(
+                swapRequest.amount,
+                scalingFactors[registeredIndexOut]
+            );
+
+        (uint256 preJoinExitSupply, uint256[] memory balances) = _payProtocolFeesBeforeJoinExit(registeredBalances);
+        (uint256 currentAmp, ) = _getAmplificationParameter();
 
-        (
-            uint256 preJoinExitSupply,
-            uint256[] memory balances,
-            uint256 currentAmp,
-            uint256 preJoinExitInvariant
-        ) = _beforeJoinExit(registeredBalances);
+        uint256 preJoinExitInvariant = StableMath._calculateInvariant(currentAmp, balances);
 
         // These calls mutate `balances` so that it holds the post join-exit balances.
         (uint256 amountCalculated, uint256 postJoinExitSupply) = registeredIndexOut == getBptIndex()
@@ -638,34 +641,41 @@
         uint256[] memory scalingFactors,
         bytes memory userData
     ) internal returns (uint256, uint256[] memory) {
-        (
-            uint256 preJoinExitSupply,
-            uint256[] memory balances,
-            uint256 currentAmp,
-            uint256 preJoinExitInvariant
-        ) = _beforeJoinExit(registeredBalances);
-
-
-            function(uint256[] memory, uint256, uint256, uint256, uint256[] memory, bytes memory)
-                internal
-                view
-                returns (uint256, uint256[] memory) _doJoinOrExit
-         = (isJoin ? _doJoin : _doExit);
+        (uint256 preJoinExitSupply, uint256[] memory balances) = _payProtocolFeesBeforeJoinExit(registeredBalances);
+        (uint256 currentAmp, ) = _getAmplificationParameter();
 
-        (uint256 bptAmount, uint256[] memory amountsDelta) = _doJoinOrExit(
-            balances,
-            currentAmp,
-            preJoinExitSupply,
-            preJoinExitInvariant,
-            scalingFactors,
-            userData
-        );
+        uint256 preJoinExitInvariant = StableMath._calculateInvariant(currentAmp, balances);
 
+        uint256 bptAmount;
+        uint256[] memory amountsDelta;
+        if (isJoin) {
+            (bptAmount, amountsDelta) = _doJoin(
+                balances,
+                currentAmp,
+                preJoinExitSupply,
+                preJoinExitInvariant,
+                scalingFactors,
+                userData
+            );
+        } else {
+            (bptAmount, amountsDelta) = _doExit(
+                balances,
+                currentAmp,
+                preJoinExitSupply,
+                preJoinExitInvariant,
+                scalingFactors,
+                userData
+            );
+        }
         // Unlike joinswaps, explicit joins do not mutate balances into the post join-exit balances so we must perform
         // this mutation here.
-        function(uint256, uint256) internal pure returns (uint256) _addOrSub = isJoin ? FixedPoint.add : FixedPoint.sub;
-        _mutateAmounts(balances, amountsDelta, _addOrSub);
-        uint256 postJoinExitSupply = _addOrSub(preJoinExitSupply, bptAmount);
+                function(uint256, uint256) internal pure returns (uint256) _addOrSub = isJoin ? FixedPoint.add : FixedPoint.sub;
+        _mutateAmounts(balances, amountsDelta, isJoin);
+        uint256 postJoinExitSupply;
+        if (isJoin)
+            postJoinExitSupply = FixedPoint.add(preJoinExitSupply, bptAmount);
+        else
+            postJoinExitSupply = FixedPoint.sub(preJoinExitSupply, bptAmount);
 
         // Pass in the post-join balances to reset the protocol fee basis.
         // We are minting bptAmount, increasing the total (and virtual) supply post-join
@@ -683,35 +693,6 @@
     }
 
     /**
-     * @dev Pay any due protocol fees and calculate values necessary for performing the join/exit.
-     */
-    function _beforeJoinExit(uint256[] memory registeredBalances)
-        internal
-        returns (
-            uint256,
-            uint256[] memory,
-            uint256,
-            uint256
-        )
-    {
-        (uint256 lastJoinExitAmp, uint256 lastPostJoinExitInvariant) = getLastJoinExitData();
-        (
-            uint256 preJoinExitSupply,
-            uint256[] memory balances,
-            uint256 oldAmpPreJoinExitInvariant
-        ) = _payProtocolFeesBeforeJoinExit(registeredBalances, lastJoinExitAmp, lastPostJoinExitInvariant);
-
-        // If the amplification factor is the same as it was during the last join/exit then we can reuse the
-        // value calculated using the "old" amplification factor. If not, then we have to calculate this now.
-        (uint256 currentAmp, ) = _getAmplificationParameter();
-        uint256 preJoinExitInvariant = currentAmp == lastJoinExitAmp
-            ? oldAmpPreJoinExitInvariant
-            : StableMath._calculateInvariant(currentAmp, balances);
-
-        return (preJoinExitSupply, balances, currentAmp, preJoinExitInvariant);
-    }
-
-    /**
      * @dev Support single- and multi-token joins, but not explicit proportional joins.
      */
     function _doJoin(
@@ -950,13 +931,16 @@
     function _mutateAmounts(
         uint256[] memory toMutate,
         uint256[] memory arguments,
-        function(uint256, uint256) pure returns (uint256) mutation
+        bool isJoin
     ) private pure {
         uint256 length = toMutate.length;
         InputHelpers.ensureInputLengthMatch(length, arguments.length);
 
         for (uint256 i = 0; i < length; ++i) {
-            toMutate[i] = mutation(toMutate[i], arguments[i]);
+            if (isJoin) 
+                toMutate[i] = FixedPoint.add(toMutate[i], arguments[i]);
+            else
+                toMutate[i] = FixedPoint.sub(toMutate[i], arguments[i]);
         }
     }
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/ComposableStablePoolFactory.sol pool-stable/contracts/ComposableStablePoolFactory.sol
--- pool-stable/contracts/ComposableStablePoolFactory.sol	2022-08-23 22:27:40.099057900 -0400
+++ pool-stable/contracts/ComposableStablePoolFactory.sol	2022-08-23 19:16:57.080806500 -0400
@@ -15,18 +15,21 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./ComposableStablePool.sol";
 
-contract ComposableStablePoolFactory is BasePoolFactory, FactoryWidePauseWindow {
+contract ComposableStablePoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    IProtocolFeePercentagesProvider private _protocolFeeProvider;
+
     constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(ComposableStablePool).creationCode)
+        BasePoolSplitCodeFactory(vault, type(ComposableStablePool).creationCode)
     {
-        // solhint-disable-previous-line no-empty-blocks
+        _protocolFeeProvider = protocolFeeProvider;
     }
 
     /**
@@ -50,7 +53,7 @@
                     abi.encode(
                         ComposableStablePool.NewPoolParams({
                             vault: getVault(),
-                            protocolFeeProvider: getProtocolFeePercentagesProvider(),
+                            protocolFeeProvider: _protocolFeeProvider,
                             name: name,
                             symbol: symbol,
                             tokens: tokens,
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/ComposableStablePoolProtocolFees.sol pool-stable/contracts/ComposableStablePoolProtocolFees.sol
--- pool-stable/contracts/ComposableStablePoolProtocolFees.sol	2022-08-23 22:27:40.117059900 -0400
+++ pool-stable/contracts/ComposableStablePoolProtocolFees.sol	2022-08-23 19:16:57.093805600 -0400
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
-import "@balancer-labs/v2-pool-utils/contracts/ProtocolFeeCache.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../pool-utils/contracts/ProtocolFeeCache.sol";
 
 import "./ComposableStablePoolStorage.sol";
 import "./ComposableStablePoolRates.sol";
-import "./StableMath.sol";
+import "../../../harnesses/StableMathHarness.sol";
 
 abstract contract ComposableStablePoolProtocolFees is
     ComposableStablePoolStorage,
@@ -57,33 +57,25 @@
      * @dev Calculates due protocol fees originating from accumulated swap fees and yield of non-exempt tokens, pays
      * them by minting BPT, and returns the updated virtual supply and current balances.
      */
-    function _payProtocolFeesBeforeJoinExit(
-        uint256[] memory registeredBalances,
-        uint256 lastJoinExitAmp,
-        uint256 lastPostJoinExitInvariant
-    )
+    function _payProtocolFeesBeforeJoinExit(uint256[] memory registeredBalances)
         internal
-        returns (
-            uint256,
-            uint256[] memory,
-            uint256
-        )
+        returns (uint256, uint256[] memory)
     {
         (uint256 virtualSupply, uint256[] memory balances) = _dropBptItemFromBalances(registeredBalances);
 
         // First, we'll compute what percentage of the Pool the protocol should own due to charging protocol fees on
         // swap fees and yield.
-        (
-            uint256 expectedProtocolOwnershipPercentage,
-            uint256 totalGrowthInvariant
-        ) = _getProtocolPoolOwnershipPercentage(balances, lastJoinExitAmp, lastPostJoinExitInvariant);
+        uint256 expectedProtocolOwnershipPercentage = _getProtocolPoolOwnershipPercentage(balances);
 
-        // Now that we know what percentage of the Pool's current value the protocol should own, we can compute how
-        // much BPT we need to mint to get to this state. Since we're going to mint BPT for the protocol, the value
-        // of each BPT is going to be reduced as all LPs get diluted.
-        uint256 protocolFeeAmount = _calculateAdjustedProtocolFeeAmount(
-            virtualSupply,
-            expectedProtocolOwnershipPercentage
+        // Now that we know what percentage of the Pool's current value the protocol should own, we can compute how much
+        // BPT we need to mint to get to this state. Since we're going to mint BPT for the protocol, the value of each
+        // BPT is going to be reduced as all LPs get diluted. The percentage of the Pool the protocol will own after
+        // minting is given by `protocol percentage = to mint / (current supply + to mint)`.
+        // Solving for `to mint`, we arrive at:
+        // `to mint = current supply * protocol percentage / (1 - protocol percentage)`.
+
+        uint256 protocolFeeAmount = virtualSupply.mulDown(expectedProtocolOwnershipPercentage).divDown(
+            expectedProtocolOwnershipPercentage.complement()
         );
 
         if (protocolFeeAmount > 0) {
@@ -95,14 +87,10 @@
         // supply by minting the protocol fee tokens, so those are included in the return value.
         //
         // For this addition to overflow, the actual total supply would have already overflowed.
-        return (virtualSupply + protocolFeeAmount, balances, totalGrowthInvariant);
+        return (virtualSupply + protocolFeeAmount, balances);
     }
 
-    function _getProtocolPoolOwnershipPercentage(
-        uint256[] memory balances,
-        uint256 lastJoinExitAmp,
-        uint256 lastPostJoinExitInvariant
-    ) internal view returns (uint256, uint256) {
+    function _getProtocolPoolOwnershipPercentage(uint256[] memory balances) internal view returns (uint256) {
         // We compute three invariants, adjusting the balances of tokens that have rate providers by undoing the current
         // rate adjustment and then applying the old rate. This is equivalent to multiplying by old rate / current rate.
         //
@@ -120,6 +108,8 @@
         // growth. If the last join-exit amplification equals the current one, this invariant equals the current
         // invariant.
 
+        (uint256 lastJoinExitAmp, uint256 lastPostJoinExitInvariant) = getLastJoinExitData();
+
         (
             uint256 swapFeeGrowthInvariant,
             uint256 totalNonExemptGrowthInvariant,
@@ -172,8 +162,7 @@
         );
 
         // These percentages can then be simply added to compute the total protocol Pool ownership percentage.
-        // This is naturally bounded above by FixedPoint.ONE so this addition cannot overflow.
-        return (protocolSwapFeePercentage + protocolYieldPercentage, totalGrowthInvariant);
+        return protocolSwapFeePercentage.add(protocolYieldPercentage);
     }
 
     function _getGrowthInvariants(uint256[] memory balances, uint256 lastJoinExitAmp)
@@ -222,12 +211,8 @@
         }
     }
 
-    /**
-     * @dev Store the latest invariant based on the adjusted balances after the join or exit, using current rates.
-     * Also cache the amp factor, so that the invariant is not affected by amp updates between joins and exits.
-     *
-     * Pay protocol fees due on any current join or exit swap.
-     */
+    // Store the latest invariant based on the adjusted balances after the join or exit, using current rates.
+    // Also cache the amp factor, so that the invariant is not affected by amp updates between joins and exits.
     function _updateInvariantAfterJoinExit(
         uint256 currentAmp,
         uint256[] memory balances,
@@ -241,69 +226,44 @@
         // Note that the pre-join/exit invariant is *not* the invariant from the last join,
         // but computed from the balances before this particular join/exit.
 
-        // `_payProtocolFeesBeforeJoinExit` paid protocol fees accumulated between the previous and current
-        // join or exit, while this code pays any protocol fees due on the current join or exit.
-        // The amp and rates are constant during a single transaction, so it doesn't matter if there
-        // is an ongoing amp change, and we can ignore yield.
-
-        // Joins and exits are symmetrical; for simplicity, we consider a join, where the invariant and supply
-        // both increase.
-
-        // |-------------------------|-- postJoinExitInvariant
-        // |   increase from fees    |
-        // |-------------------------|-- original invariant * supply growth ratio (fee-less invariant)
-        // |                         |
-        // | increase from balances  |
-        // |-------------------------|-- preJoinExitInvariant
-        // |                         |
-        // |                         |  |------------------|-- postJoinExitSupply
-        // |                         |  |    BPT minted    |
-        // |                         |  |------------------|-- preJoinExitSupply
-        // |   original invariant    |  |  original supply |
-        // |_________________________|  |__________________|
-        //
-        // If the join is proportional, the invariant and supply will likewise increase proportionally,
-        // so the growth ratios (postJoinExit / preJoinExit) will be equal. In this case, we do not charge
-        // any protocol fees.
-        //
-        // If the join is non-proportional, the supply increase will be proportionally less than the invariant increase,
-        // since the BPT minted will be based on fewer tokens (because swap fees are not included). So the supply growth
-        // is due entirely to the balance changes, while the invariant growth also includes swap fees.
-        //
-        // To isolate the amount of increase by fees then, we multiply the original invariant by the supply growth
-        // ratio to get the "feeless invariant". The difference between the final invariant and this value is then
-        // the amount of the invariant due to fees, which we convert to a percentage by normalizing against the
-        // final (postJoinExit) invariant.
-        //
-        // Compute the portion of the invariant increase due to fees
-        uint256 supplyGrowthRatio = postJoinExitSupply.divDown(preJoinExitSupply);
-        uint256 feelessInvariant = preJoinExitInvariant.mulDown(supplyGrowthRatio);
-
-        uint256 invariantDeltaFromFees = postJoinExitInvariant - feelessInvariant;
-
-        // To convert to a percentage of pool ownership, multiply by the rate,
-        // then normalize against the final invariant
-        uint256 protocolOwnershipPercentage = invariantDeltaFromFees.divDown(postJoinExitInvariant).mulDown(
-            getProtocolFeePercentageCache(ProtocolFeeType.SWAP)
-        );
+        uint256 protocolSwapFeePercentage = getProtocolFeePercentageCache(ProtocolFeeType.SWAP);
 
-        if (protocolOwnershipPercentage > 0) {
-            uint256 protocolFeeAmount = _calculateAdjustedProtocolFeeAmount(
-                postJoinExitSupply,
-                protocolOwnershipPercentage
-            );
+        if (protocolSwapFeePercentage > 0) {
+            uint256 invariantGrowthRatio = (
+                postJoinExitInvariant > preJoinExitInvariant
+                    ? postJoinExitInvariant.sub(preJoinExitInvariant)
+                    : preJoinExitInvariant.sub(postJoinExitInvariant)
+            )
+                .divDown(preJoinExitInvariant);
+
+            // Compute the bpt ratio
+            uint256 bptGrowthRatio = (
+                postJoinExitSupply > preJoinExitInvariant
+                    ? postJoinExitSupply.sub(preJoinExitSupply)
+                    : preJoinExitSupply.sub(postJoinExitSupply)
+            )
+                .divDown(preJoinExitSupply);
+
+            // The difference between the invariant growth and bpt increase rates must be due to the
+            // balance change from this join/exit.
+            // Protocol fees due = (invariant growth / bpt increase - 1) * virtual supply * protocol fee %
+            // For instance, if the invariant growth is 1.05, and the bpt increase is 1.0475, with 1000 supply,
+            // and a protocol fee of 50%, we would mint (1.05/1.0475 - 1) * 1000 * 0.5 = 1.193 BPT.
+
+            if (invariantGrowthRatio > bptGrowthRatio) {
+                uint256 protocolFeeAmount = invariantGrowthRatio
+                    .divDown(bptGrowthRatio)
+                    .sub(FixedPoint.ONE)
+                    .mulDown(preJoinExitSupply)
+                    .mulDown(protocolSwapFeePercentage);
 
-            _payProtocolFees(protocolFeeAmount);
+                _payProtocolFees(protocolFeeAmount);
+            }
         }
 
         _updatePostJoinExit(currentAmp, postJoinExitInvariant);
     }
 
-    /**
-     * @dev Update the stored values of the amp and final post-join/exit invariant, to reset the basis for protocol
-     * swap fees. Also copy the current rates to the old rates, to establish the new protocol yield basis for protocol
-     * yield fees.
-     */
     function _updatePostJoinExit(uint256 currentAmp, uint256 postJoinExitInvariant) internal {
         _lastJoinExitData =
             WordCodec.encodeUint(currentAmp, _LAST_JOIN_EXIT_AMPLIFICATION_OFFSET, _LAST_JOIN_EXIT_AMPLIFICATION_SIZE) |
@@ -316,44 +276,20 @@
         _updateOldRates();
     }
 
-    /**
-     * @dev Adjust a protocol fee percentage calculated before minting, to the equivalent value after minting.
-     */
-    function _calculateAdjustedProtocolFeeAmount(uint256 supply, uint256 basePercentage)
-        internal
-        pure
-        returns (uint256)
-    {
-        // Since this fee amount will be minted as BPT, which increases the total supply, we need to mint
-        // slightly more so that it reflects this percentage of the total supply after minting.
-        //
-        // The percentage of the Pool the protocol will own after minting is given by:
-        // `protocol percentage = to mint / (current supply + to mint)`.
-        // Solving for `to mint`, we arrive at:
-        // `to mint = current supply * protocol percentage / (1 - protocol percentage)`.
-        //
-        return supply.mulDown(basePercentage).divDown(basePercentage.complement());
-    }
-
-    /**
-     * @notice Return the amplification factor and invariant as of the most recent join or exit (including BPT swaps)
-     */
-    function getLastJoinExitData()
-        public
-        view
-        returns (uint256 lastJoinExitAmplification, uint256 lastPostJoinExitInvariant)
-    {
+    function getLastJoinExitData() public view returns (uint256, uint256) {
         bytes32 rawData = _lastJoinExitData;
 
-        lastJoinExitAmplification = rawData.decodeUint(
+        uint256 lastJoinExitAmplification = rawData.decodeUint(
             _LAST_JOIN_EXIT_AMPLIFICATION_OFFSET,
             _LAST_JOIN_EXIT_AMPLIFICATION_SIZE
         );
 
-        lastPostJoinExitInvariant = rawData.decodeUint(
+        uint256 lastPostJoinExitInvariant = rawData.decodeUint(
             _LAST_POST_JOIN_EXIT_INVARIANT_OFFSET,
             _LAST_POST_JOIN_EXIT_INVARIANT_SIZE
         );
+
+        return (lastJoinExitAmplification, lastPostJoinExitInvariant);
     }
 
     /**
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/ComposableStablePoolRates.sol pool-stable/contracts/ComposableStablePoolRates.sol
--- pool-stable/contracts/ComposableStablePoolRates.sol	2022-08-15 14:38:46.175987300 -0400
+++ pool-stable/contracts/ComposableStablePoolRates.sol	2022-08-23 19:16:57.115806300 -0400
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../pool-utils/contracts/rates/PriceRateCache.sol";
 
 import "./ComposableStablePoolStorage.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/ComposableStablePoolStorage.sol pool-stable/contracts/ComposableStablePoolStorage.sol
--- pool-stable/contracts/ComposableStablePoolStorage.sol	2022-08-15 14:38:46.198272300 -0400
+++ pool-stable/contracts/ComposableStablePoolStorage.sol	2022-08-23 19:16:57.138818200 -0400
@@ -14,13 +14,14 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/BasePool.sol";
+// import "../../pool-utils/contracts/BasePool.sol";
+import "../../pool-utils/contracts/BasePool.sol";
 
-import "./StableMath.sol";
+import "../../../harnesses/StableMathHarness.sol";
 
 abstract contract ComposableStablePoolStorage is BasePool {
     using FixedPoint for uint256;
@@ -44,12 +45,12 @@
     uint256 private immutable _bptIndex;
 
     // These are the registered tokens: one of them will be the BPT.
-    IERC20 private immutable _token0;
-    IERC20 private immutable _token1;
-    IERC20 private immutable _token2;
-    IERC20 private immutable _token3;
-    IERC20 private immutable _token4;
-    IERC20 private immutable _token5;
+    IERC20 internal immutable _token0;
+    IERC20 internal immutable _token1;
+    IERC20 internal immutable _token2;
+    IERC20 internal immutable _token3;
+    IERC20 internal immutable _token4;
+    IERC20 internal immutable _token5;
 
     // All token balances are normalized to behave as if the token had 18 decimals. We assume a token's decimals will
     // not change throughout its lifetime, and store the corresponding scaling factor for each at construction time.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/StableMath.sol pool-stable/contracts/StableMath.sol
--- pool-stable/contracts/StableMath.sol	2022-08-15 14:38:46.217273900 -0400
+++ pool-stable/contracts/StableMath.sol	2022-08-23 19:16:57.166805700 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // These functions start with an underscore, as if they were part of a contract and not a library. At some point this
 // should be fixed. Additionally, some variables have non mixed case names (e.g. P_D) that relate to the mathematical
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/StablePoolAmplification.sol pool-stable/contracts/StablePoolAmplification.sol
--- pool-stable/contracts/StablePoolAmplification.sol	2022-08-15 14:38:46.251273400 -0400
+++ pool-stable/contracts/StablePoolAmplification.sol	2022-08-23 19:16:57.193805400 -0400
@@ -14,10 +14,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../pool-utils/contracts/BasePoolAuthorization.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
 
-import "./StableMath.sol";
+import "../../../harnesses/StableMathHarness.sol";
 
 abstract contract StablePoolAmplification is BasePoolAuthorization {
     using WordCodec for bytes32;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/test/MockComposableStablePool.sol pool-stable/contracts/test/MockComposableStablePool.sol
--- pool-stable/contracts/test/MockComposableStablePool.sol	2022-08-23 22:27:40.139055100 -0400
+++ pool-stable/contracts/test/MockComposableStablePool.sol	2022-08-23 19:16:56.988805500 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-pool-utils/contracts/test/MockFailureModes.sol";
+import "../../pool-utils/contracts/test/MockFailureModes.sol";
 
 import "../ComposableStablePool.sol";
 
@@ -53,16 +53,4 @@
     ) internal virtual override whenNotInFailureMode(FailureMode.INVARIANT) returns (uint256 amountIn) {
         return super._onSwapGivenOut(request, balancesIncludingBpt, indexIn, indexOut);
     }
-
-    function beforeJoinExit(uint256[] memory registeredBalances)
-        external
-        returns (
-            uint256 preJoinExitSupply,
-            uint256[] memory balances,
-            uint256 currentAmp,
-            uint256 preJoinExitInvariant
-        )
-    {
-        return _beforeJoinExit(registeredBalances);
-    }
 }
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/test/MockComposableStablePoolProtocolFees.sol pool-stable/contracts/test/MockComposableStablePoolProtocolFees.sol
--- pool-stable/contracts/test/MockComposableStablePoolProtocolFees.sol	2022-08-23 22:27:40.159054200 -0400
+++ pool-stable/contracts/test/MockComposableStablePoolProtocolFees.sol	2022-08-23 19:16:57.001806100 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
 
 import "../ComposableStablePoolProtocolFees.sol";
 
@@ -59,21 +59,16 @@
         // solhint-disable-previous-line no-empty-blocks
     }
 
-    function payProtocolFeesBeforeJoinExit(
-        uint256[] memory registeredBalances,
-        uint256 lastJoinExitAmp,
-        uint256 lastPostJoinExitInvariant
-    ) external returns (uint256 virtualSupply, uint256[] memory balances) {
-        (virtualSupply, balances, ) = _payProtocolFeesBeforeJoinExit(
-            registeredBalances,
-            lastJoinExitAmp,
-            lastPostJoinExitInvariant
-        );
+    function payProtocolFeesBeforeJoinExit(uint256[] memory balancesWithBpt)
+        external
+        returns (uint256 virtualSupply, uint256[] memory balances)
+    {
+        return _payProtocolFeesBeforeJoinExit(balancesWithBpt);
     }
 
     function updateInvariantAfterJoinExit(
         uint256 currentAmp,
-        uint256[] memory balances,
+        uint256[] memory balancesWithoutBpt,
         uint256 preJoinExitInvariant,
         uint256 preJoinExitSupply,
         uint256 postJoinExitSupply
@@ -81,7 +76,7 @@
         return
             _updateInvariantAfterJoinExit(
                 currentAmp,
-                balances,
+                balancesWithoutBpt,
                 preJoinExitInvariant,
                 preJoinExitSupply,
                 postJoinExitSupply
@@ -108,17 +103,8 @@
         return _getGrowthInvariants(balances, lastPostJoinExitAmp);
     }
 
-    function getProtocolPoolOwnershipPercentage(
-        uint256[] memory balances,
-        uint256 lastJoinExitAmp,
-        uint256 lastPostJoinExitInvariant
-    ) external view returns (uint256) {
-        (uint256 percentage, ) = _getProtocolPoolOwnershipPercentage(
-            balances,
-            lastJoinExitAmp,
-            lastPostJoinExitInvariant
-        );
-        return percentage;
+    function getProtocolPoolOwnershipPercentage(uint256[] memory balances) external view returns (uint256) {
+        return _getProtocolPoolOwnershipPercentage(balances);
     }
 
     // Stubbed functions
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/test/MockComposableStablePoolRates.sol pool-stable/contracts/test/MockComposableStablePoolRates.sol
--- pool-stable/contracts/test/MockComposableStablePoolRates.sol	2022-08-15 14:38:46.316540400 -0400
+++ pool-stable/contracts/test/MockComposableStablePoolRates.sol	2022-08-23 19:16:57.014819900 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
 
 import "../ComposableStablePoolRates.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/test/MockComposableStablePoolStorage.sol pool-stable/contracts/test/MockComposableStablePoolStorage.sol
--- pool-stable/contracts/test/MockComposableStablePoolStorage.sol	2022-08-15 14:38:46.334485900 -0400
+++ pool-stable/contracts/test/MockComposableStablePoolStorage.sol	2022-08-23 19:16:57.028824500 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
 
 import "../ComposableStablePoolStorage.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/test/MockStablePoolAmplification.sol pool-stable/contracts/test/MockStablePoolAmplification.sol
--- pool-stable/contracts/test/MockStablePoolAmplification.sol	2022-08-15 14:38:46.369392800 -0400
+++ pool-stable/contracts/test/MockStablePoolAmplification.sol	2022-08-23 19:16:57.039805500 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "../StablePoolAmplification.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/BalancerPoolToken.sol pool-utils/contracts/BalancerPoolToken.sol
--- pool-utils/contracts/BalancerPoolToken.sol	2022-08-15 14:38:46.836910000 -0400
+++ pool-utils/contracts/BalancerPoolToken.sol	2022-08-23 19:16:58.634805300 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20Permit.sol";
 
 /**
  * @title Highly opinionated token implementation
@@ -33,7 +33,7 @@
  * - Assigns infinite allowance for all token holders to the Vault
  */
 contract BalancerPoolToken is ERC20Permit {
-    IVault private immutable _vault;
+    IVault internal immutable _vault;
 
     constructor(
         string memory tokenName,
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/BaseGeneralPool.sol pool-utils/contracts/BaseGeneralPool.sol
--- pool-utils/contracts/BaseGeneralPool.sol	2022-08-15 14:38:46.862913600 -0400
+++ pool-utils/contracts/BaseGeneralPool.sol	2022-08-23 19:16:58.646805500 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
 
 import "./BasePool.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/BaseMinimalSwapInfoPool.sol pool-utils/contracts/BaseMinimalSwapInfoPool.sol
--- pool-utils/contracts/BaseMinimalSwapInfoPool.sol	2022-08-15 14:38:46.879075800 -0400
+++ pool-utils/contracts/BaseMinimalSwapInfoPool.sol	2022-08-23 19:16:58.661805800 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
+import "../../interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
 
 import "./BasePool.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/BasePool.sol pool-utils/contracts/BasePool.sol
--- pool-utils/contracts/BasePool.sol	2022-08-15 14:38:46.893401600 -0400
+++ pool-utils/contracts/BasePool.sol	2022-08-24 15:28:46.735010400 -0400
@@ -15,16 +15,16 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IAssetManager.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../interfaces/contracts/pool-utils/IAssetManager.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
+
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../solidity-utils/contracts/helpers/TemporarilyPausable.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./BalancerPoolToken.sol";
 import "./BasePoolAuthorization.sol";
@@ -438,8 +438,8 @@
             lastChangeBlock,
             protocolSwapFeePercentage,
             userData,
-            _onJoinPool,
-            _downscaleUpArray
+            true, // _onJoinPool,
+            true // _downscaleUpArray
         );
 
         // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,
@@ -477,8 +477,8 @@
             lastChangeBlock,
             protocolSwapFeePercentage,
             userData,
-            _onExitPool,
-            _downscaleDownArray
+            false, // _onExitPool,
+            false // _downscaleDownArray
         );
 
         // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,
@@ -736,10 +736,12 @@
         uint256 lastChangeBlock,
         uint256 protocolSwapFeePercentage,
         bytes memory userData,
-        function(bytes32, address, address, uint256[] memory, uint256, uint256, uint256[] memory, bytes memory)
-            internal
-            returns (uint256, uint256[] memory) _action,
-        function(uint256[] memory, uint256[] memory) internal view _downscaleArray
+        bool isJoin,
+        bool scaleUp
+        // function(bytes32, address, address, uint256[] memory, uint256, uint256, uint256[] memory, bytes memory)
+        //     internal
+        //     returns (uint256, uint256[] memory) _action,
+        // function(uint256[] memory, uint256[] memory) internal view _downscaleArray
     ) private {
         // This uses the same technique used by the Vault in queryBatchSwap. Refer to that function for a detailed
         // explanation.
@@ -817,18 +819,35 @@
             uint256[] memory scalingFactors = _scalingFactors();
             _upscaleArray(balances, scalingFactors);
 
-            (uint256 bptAmount, uint256[] memory tokenAmounts) = _action(
-                poolId,
-                sender,
-                recipient,
-                balances,
-                lastChangeBlock,
-                protocolSwapFeePercentage,
-                scalingFactors,
-                userData
-            );
-
-            _downscaleArray(tokenAmounts, scalingFactors);
+            uint256 bptAmount; uint256[] memory tokenAmounts;
+            if (isJoin)
+                (bptAmount, tokenAmounts) = _onJoinPool(
+                    poolId,
+                    sender,
+                    recipient,
+                    balances,
+                    lastChangeBlock,
+                    protocolSwapFeePercentage,
+                    scalingFactors,
+                    userData
+                );
+            else
+                (bptAmount, tokenAmounts) = _onExitPool(
+                    poolId,
+                    sender,
+                    recipient,
+                    balances,
+                    lastChangeBlock,
+                    protocolSwapFeePercentage,
+                    scalingFactors,
+                    userData
+                );
+
+
+            if (scaleUp) 
+                _downscaleUpArray(tokenAmounts, scalingFactors);
+            else
+                _downscaleDownArray(tokenAmounts, scalingFactors);
 
             // solhint-disable-next-line no-inline-assembly
             assembly {
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/BasePoolAuthorization.sol pool-utils/contracts/BasePoolAuthorization.sol
--- pool-utils/contracts/BasePoolAuthorization.sol	2022-08-15 14:38:46.911394900 -0400
+++ pool-utils/contracts/BasePoolAuthorization.sol	2022-08-23 19:16:58.622811100 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
 
 /**
  * @dev Base authorization layer implementation for Pools.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/ProtocolFeeCache.sol pool-utils/contracts/ProtocolFeeCache.sol
--- pool-utils/contracts/ProtocolFeeCache.sol	2022-08-15 14:38:46.934395100 -0400
+++ pool-utils/contracts/ProtocolFeeCache.sol	2022-08-23 19:16:58.721804700 -0400
@@ -14,10 +14,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
 
 import "./RecoveryMode.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/RecoveryMode.sol pool-utils/contracts/RecoveryMode.sol
--- pool-utils/contracts/RecoveryMode.sol	2022-08-15 14:38:46.966397800 -0400
+++ pool-utils/contracts/RecoveryMode.sol	2022-08-23 19:16:58.734809600 -0400
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/pool-utils/BasePoolUserData.sol";
+import "../../interfaces/contracts/pool-utils/IRecoveryMode.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 import "./BasePoolAuthorization.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/controllers/BasePoolController.sol pool-utils/contracts/controllers/BasePoolController.sol
--- pool-utils/contracts/controllers/BasePoolController.sol	2022-08-15 14:38:46.998798200 -0400
+++ pool-utils/contracts/controllers/BasePoolController.sol	2022-08-23 19:16:58.299807500 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IBasePoolController.sol";
+import "../../interfaces/contracts/pool-utils/IBasePoolController.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
 
 import "../BasePoolAuthorization.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/controllers/ManagedPoolController.sol pool-utils/contracts/controllers/ManagedPoolController.sol
--- pool-utils/contracts/controllers/ManagedPoolController.sol	2022-08-15 14:38:47.012125200 -0400
+++ pool-utils/contracts/controllers/ManagedPoolController.sol	2022-08-23 19:16:58.334807900 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledManagedPool.sol";
+import "../../interfaces/contracts/pool-utils/IControlledManagedPool.sol";
 
 import "./BasePoolController.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/rates/PriceRateCache.sol pool-utils/contracts/rates/PriceRateCache.sol
--- pool-utils/contracts/rates/PriceRateCache.sol	2022-08-15 14:38:47.054850200 -0400
+++ pool-utils/contracts/rates/PriceRateCache.sol	2022-08-23 19:16:58.419821400 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../../solidity-utils/contracts/helpers/WordCodec.sol";
 
 /**
  * Price rate caches are used to avoid querying the price rate for a token every time we need to work with it. It is
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/test/MockAssetManager.sol pool-utils/contracts/test/MockAssetManager.sol
--- pool-utils/contracts/test/MockAssetManager.sol	2022-08-15 14:38:47.079153200 -0400
+++ pool-utils/contracts/test/MockAssetManager.sol	2022-08-23 19:16:58.517807400 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IAssetManager.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/pool-utils/IAssetManager.sol";
 
 contract MockAssetManager is IAssetManager {
     event Rebalanced(address assetManager, bytes32 poolId, IERC20 token, bool force);
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/test/MockBalancerPoolToken.sol pool-utils/contracts/test/MockBalancerPoolToken.sol
--- pool-utils/contracts/test/MockBalancerPoolToken.sol	2022-08-15 14:38:47.094446200 -0400
+++ pool-utils/contracts/test/MockBalancerPoolToken.sol	2022-08-23 19:16:58.530806500 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "../BalancerPoolToken.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/test/MockBasePool.sol pool-utils/contracts/test/MockBasePool.sol
--- pool-utils/contracts/test/MockBasePool.sol	2022-08-15 14:38:47.110869200 -0400
+++ pool-utils/contracts/test/MockBasePool.sol	2022-08-23 19:16:58.549806900 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
 
 import "../BasePool.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/test/MockFailureModes.sol pool-utils/contracts/test/MockFailureModes.sol
--- pool-utils/contracts/test/MockFailureModes.sol	2022-08-15 14:38:47.147450200 -0400
+++ pool-utils/contracts/test/MockFailureModes.sol	2022-08-23 19:16:58.562817700 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 abstract contract MockFailureModes {
     enum FailureMode { INVARIANT, PRICE_RATE }
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/test/MockRateProvider.sol pool-utils/contracts/test/MockRateProvider.sol
--- pool-utils/contracts/test/MockRateProvider.sol	2022-08-15 14:38:47.215446300 -0400
+++ pool-utils/contracts/test/MockRateProvider.sol	2022-08-23 19:16:58.585805600 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 contract MockRateProvider is IRateProvider {
     uint256 internal _rate;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/test/MockRecoveryModeStorage.sol pool-utils/contracts/test/MockRecoveryModeStorage.sol
--- pool-utils/contracts/test/MockRecoveryModeStorage.sol	2022-08-15 14:38:47.241891100 -0400
+++ pool-utils/contracts/test/MockRecoveryModeStorage.sol	2022-08-23 19:16:58.596805300 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "../RecoveryMode.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/test/MockVault.sol pool-utils/contracts/test/MockVault.sol
--- pool-utils/contracts/test/MockVault.sol	2022-08-23 22:27:40.290057100 -0400
+++ pool-utils/contracts/test/MockVault.sol	2022-08-23 19:16:58.609805600 -0400
@@ -15,15 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/vault/IPoolSwapStructs.sol";
+import "../../interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
 
-import "@balancer-labs/v2-vault/contracts/ProtocolFeesCollector.sol";
+import "../../vault/contracts/ProtocolFeesCollector.sol";
 
 contract MockVault is IPoolSwapStructs {
     struct Pool {
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/BaseWeightedPool.sol pool-weighted/contracts/BaseWeightedPool.sol
--- pool-weighted/contracts/BaseWeightedPool.sol	2022-08-23 22:27:40.325053300 -0400
+++ pool-weighted/contracts/BaseWeightedPool.sol	2022-08-23 19:16:59.814182800 -0400
@@ -15,12 +15,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/BaseMinimalSwapInfoPool.sol";
+import "../../pool-utils/contracts/BaseMinimalSwapInfoPool.sol";
 
 import "./WeightedMath.sol";
 
@@ -140,7 +140,11 @@
      * @dev Called before any join or exit operation. Empty by default, but derived contracts may choose to add custom
      * behavior at these steps. This often has to do with protocol fee processing.
      */
-    function _beforeJoinExit(uint256[] memory preBalances, uint256[] memory normalizedWeights) internal virtual {
+    function _beforeJoinExit(
+        uint256[] memory preBalances,
+        uint256[] memory normalizedWeights,
+        uint256 protocolSwapFeePercentage
+    ) internal virtual {
         // solhint-disable-previous-line no-empty-blocks
     }
 
@@ -200,7 +204,7 @@
         address,
         uint256[] memory balances,
         uint256,
-        uint256,
+        uint256 protocolSwapFeePercentage,
         uint256[] memory scalingFactors,
         bytes memory userData
     ) internal virtual override returns (uint256, uint256[] memory) {
@@ -208,7 +212,7 @@
 
         uint256[] memory normalizedWeights = _getNormalizedWeights();
 
-        _beforeJoinExit(balances, normalizedWeights);
+        _beforeJoinExit(balances, normalizedWeights, protocolSwapFeePercentage);
         (uint256 bptAmountOut, uint256[] memory amountsIn) = _doJoin(
             sender,
             balances,
@@ -321,15 +325,17 @@
         address,
         uint256[] memory balances,
         uint256,
-        uint256,
+        uint256 protocolSwapFeePercentage,
         uint256[] memory scalingFactors,
         bytes memory userData
     ) internal virtual override returns (uint256, uint256[] memory) {
-        // All exits are disabled while the contract is paused.
+        // Exits are not disabled by default while the contract is paused, as some of them remain available to allow LPs
+        // to safely exit the Pool in case of an emergency. Other exit kinds are disabled on a case-by-case basis in
+        // their handlers.
 
         uint256[] memory normalizedWeights = _getNormalizedWeights();
 
-        _beforeJoinExit(balances, normalizedWeights);
+        _beforeJoinExit(balances, normalizedWeights, protocolSwapFeePercentage);
         (uint256 bptAmountIn, uint256[] memory amountsOut) = _doExit(
             sender,
             balances,
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/WeightedMath.sol pool-weighted/contracts/WeightedMath.sol
--- pool-weighted/contracts/WeightedMath.sol	2022-08-15 14:38:47.515096800 -0400
+++ pool-weighted/contracts/WeightedMath.sol	2022-08-23 19:16:59.838177400 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // These functions start with an underscore, as if they were part of a contract and not a library. At some point this
 // should be fixed.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/WeightedPool.sol pool-weighted/contracts/WeightedPool.sol
--- pool-weighted/contracts/WeightedPool.sol	2022-08-23 22:27:40.361056900 -0400
+++ pool-weighted/contracts/WeightedPool.sol	2022-08-23 19:16:59.629179300 -0400
@@ -24,7 +24,7 @@
 contract WeightedPool is BaseWeightedPool, InvariantGrowthProtocolFees {
     using FixedPoint for uint256;
 
-    uint256 private constant _MAX_TOKENS = 8;
+    uint256 private constant _MAX_TOKENS = 20;
 
     uint256 private immutable _totalTokens;
 
@@ -36,6 +36,18 @@
     IERC20 internal immutable _token5;
     IERC20 internal immutable _token6;
     IERC20 internal immutable _token7;
+    IERC20 internal immutable _token8;
+    IERC20 internal immutable _token9;
+    IERC20 internal immutable _token10;
+    IERC20 internal immutable _token11;
+    IERC20 internal immutable _token12;
+    IERC20 internal immutable _token13;
+    IERC20 internal immutable _token14;
+    IERC20 internal immutable _token15;
+    IERC20 internal immutable _token16;
+    IERC20 internal immutable _token17;
+    IERC20 internal immutable _token18;
+    IERC20 internal immutable _token19;
 
     // All token balances are normalized to behave as if the token had 18 decimals. We assume a token's decimals will
     // not change throughout its lifetime, and store the corresponding scaling factor for each at construction time.
@@ -49,6 +61,18 @@
     uint256 internal immutable _scalingFactor5;
     uint256 internal immutable _scalingFactor6;
     uint256 internal immutable _scalingFactor7;
+    uint256 internal immutable _scalingFactor8;
+    uint256 internal immutable _scalingFactor9;
+    uint256 internal immutable _scalingFactor10;
+    uint256 internal immutable _scalingFactor11;
+    uint256 internal immutable _scalingFactor12;
+    uint256 internal immutable _scalingFactor13;
+    uint256 internal immutable _scalingFactor14;
+    uint256 internal immutable _scalingFactor15;
+    uint256 internal immutable _scalingFactor16;
+    uint256 internal immutable _scalingFactor17;
+    uint256 internal immutable _scalingFactor18;
+    uint256 internal immutable _scalingFactor19;
 
     uint256 internal immutable _normalizedWeight0;
     uint256 internal immutable _normalizedWeight1;
@@ -58,47 +82,53 @@
     uint256 internal immutable _normalizedWeight5;
     uint256 internal immutable _normalizedWeight6;
     uint256 internal immutable _normalizedWeight7;
-
-    struct NewPoolParams {
-        string name;
-        string symbol;
-        IERC20[] tokens;
-        uint256[] normalizedWeights;
-        address[] assetManagers;
-        uint256 swapFeePercentage;
-    }
+    uint256 internal immutable _normalizedWeight8;
+    uint256 internal immutable _normalizedWeight9;
+    uint256 internal immutable _normalizedWeight10;
+    uint256 internal immutable _normalizedWeight11;
+    uint256 internal immutable _normalizedWeight12;
+    uint256 internal immutable _normalizedWeight13;
+    uint256 internal immutable _normalizedWeight14;
+    uint256 internal immutable _normalizedWeight15;
+    uint256 internal immutable _normalizedWeight16;
+    uint256 internal immutable _normalizedWeight17;
+    uint256 internal immutable _normalizedWeight18;
+    uint256 internal immutable _normalizedWeight19;
 
     constructor(
-        NewPoolParams memory params,
         IVault vault,
-        IProtocolFeePercentagesProvider protocolFeeProvider,
+        string memory name,
+        string memory symbol,
+        IERC20[] memory tokens,
+        uint256[] memory normalizedWeights,
+        address[] memory assetManagers,
+        uint256 swapFeePercentage,
         uint256 pauseWindowDuration,
         uint256 bufferPeriodDuration,
         address owner
     )
         BaseWeightedPool(
             vault,
-            params.name,
-            params.symbol,
-            params.tokens,
-            params.assetManagers,
-            params.swapFeePercentage,
+            name,
+            symbol,
+            tokens,
+            assetManagers,
+            swapFeePercentage,
             pauseWindowDuration,
             bufferPeriodDuration,
             owner,
             false
         )
-        ProtocolFeeCache(protocolFeeProvider, ProtocolFeeCache.DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL)
     {
-        uint256 numTokens = params.tokens.length;
-        InputHelpers.ensureInputLengthMatch(numTokens, params.normalizedWeights.length);
+        uint256 numTokens = tokens.length;
+        InputHelpers.ensureInputLengthMatch(numTokens, normalizedWeights.length);
 
         _totalTokens = numTokens;
 
         // Ensure each normalized weight is above the minimum
         uint256 normalizedSum = 0;
         for (uint8 i = 0; i < numTokens; i++) {
-            uint256 normalizedWeight = params.normalizedWeights[i];
+            uint256 normalizedWeight = normalizedWeights[i];
 
             _require(normalizedWeight >= WeightedMath._MIN_WEIGHT, Errors.MIN_WEIGHT);
             normalizedSum = normalizedSum.add(normalizedWeight);
@@ -106,33 +136,69 @@
         // Ensure that the normalized weights sum to ONE
         _require(normalizedSum == FixedPoint.ONE, Errors.NORMALIZED_WEIGHT_INVARIANT);
 
-        _normalizedWeight0 = params.normalizedWeights[0];
-        _normalizedWeight1 = params.normalizedWeights[1];
-        _normalizedWeight2 = numTokens > 2 ? params.normalizedWeights[2] : 0;
-        _normalizedWeight3 = numTokens > 3 ? params.normalizedWeights[3] : 0;
-        _normalizedWeight4 = numTokens > 4 ? params.normalizedWeights[4] : 0;
-        _normalizedWeight5 = numTokens > 5 ? params.normalizedWeights[5] : 0;
-        _normalizedWeight6 = numTokens > 6 ? params.normalizedWeights[6] : 0;
-        _normalizedWeight7 = numTokens > 7 ? params.normalizedWeights[7] : 0;
+        _normalizedWeight0 = normalizedWeights[0];
+        _normalizedWeight1 = normalizedWeights[1];
+        _normalizedWeight2 = numTokens > 2 ? normalizedWeights[2] : 0;
+        _normalizedWeight3 = numTokens > 3 ? normalizedWeights[3] : 0;
+        _normalizedWeight4 = numTokens > 4 ? normalizedWeights[4] : 0;
+        _normalizedWeight5 = numTokens > 5 ? normalizedWeights[5] : 0;
+        _normalizedWeight6 = numTokens > 6 ? normalizedWeights[6] : 0;
+        _normalizedWeight7 = numTokens > 7 ? normalizedWeights[7] : 0;
+        _normalizedWeight8 = numTokens > 8 ? normalizedWeights[8] : 0;
+        _normalizedWeight9 = numTokens > 9 ? normalizedWeights[9] : 0;
+        _normalizedWeight10 = numTokens > 10 ? normalizedWeights[10] : 0;
+        _normalizedWeight11 = numTokens > 11 ? normalizedWeights[11] : 0;
+        _normalizedWeight12 = numTokens > 12 ? normalizedWeights[12] : 0;
+        _normalizedWeight13 = numTokens > 13 ? normalizedWeights[13] : 0;
+        _normalizedWeight14 = numTokens > 14 ? normalizedWeights[14] : 0;
+        _normalizedWeight15 = numTokens > 15 ? normalizedWeights[15] : 0;
+        _normalizedWeight16 = numTokens > 16 ? normalizedWeights[16] : 0;
+        _normalizedWeight17 = numTokens > 17 ? normalizedWeights[17] : 0;
+        _normalizedWeight18 = numTokens > 18 ? normalizedWeights[18] : 0;
+        _normalizedWeight19 = numTokens > 19 ? normalizedWeights[19] : 0;
 
         // Immutable variables cannot be initialized inside an if statement, so we must do conditional assignments
-        _token0 = params.tokens[0];
-        _token1 = params.tokens[1];
-        _token2 = numTokens > 2 ? params.tokens[2] : IERC20(0);
-        _token3 = numTokens > 3 ? params.tokens[3] : IERC20(0);
-        _token4 = numTokens > 4 ? params.tokens[4] : IERC20(0);
-        _token5 = numTokens > 5 ? params.tokens[5] : IERC20(0);
-        _token6 = numTokens > 6 ? params.tokens[6] : IERC20(0);
-        _token7 = numTokens > 7 ? params.tokens[7] : IERC20(0);
-
-        _scalingFactor0 = _computeScalingFactor(params.tokens[0]);
-        _scalingFactor1 = _computeScalingFactor(params.tokens[1]);
-        _scalingFactor2 = numTokens > 2 ? _computeScalingFactor(params.tokens[2]) : 0;
-        _scalingFactor3 = numTokens > 3 ? _computeScalingFactor(params.tokens[3]) : 0;
-        _scalingFactor4 = numTokens > 4 ? _computeScalingFactor(params.tokens[4]) : 0;
-        _scalingFactor5 = numTokens > 5 ? _computeScalingFactor(params.tokens[5]) : 0;
-        _scalingFactor6 = numTokens > 6 ? _computeScalingFactor(params.tokens[6]) : 0;
-        _scalingFactor7 = numTokens > 7 ? _computeScalingFactor(params.tokens[7]) : 0;
+        _token0 = tokens[0];
+        _token1 = tokens[1];
+        _token2 = numTokens > 2 ? tokens[2] : IERC20(0);
+        _token3 = numTokens > 3 ? tokens[3] : IERC20(0);
+        _token4 = numTokens > 4 ? tokens[4] : IERC20(0);
+        _token5 = numTokens > 5 ? tokens[5] : IERC20(0);
+        _token6 = numTokens > 6 ? tokens[6] : IERC20(0);
+        _token7 = numTokens > 7 ? tokens[7] : IERC20(0);
+        _token8 = numTokens > 8 ? tokens[8] : IERC20(0);
+        _token9 = numTokens > 9 ? tokens[9] : IERC20(0);
+        _token10 = numTokens > 10 ? tokens[10] : IERC20(0);
+        _token11 = numTokens > 11 ? tokens[11] : IERC20(0);
+        _token12 = numTokens > 12 ? tokens[12] : IERC20(0);
+        _token13 = numTokens > 13 ? tokens[13] : IERC20(0);
+        _token14 = numTokens > 14 ? tokens[14] : IERC20(0);
+        _token15 = numTokens > 15 ? tokens[15] : IERC20(0);
+        _token16 = numTokens > 16 ? tokens[16] : IERC20(0);
+        _token17 = numTokens > 17 ? tokens[17] : IERC20(0);
+        _token18 = numTokens > 18 ? tokens[18] : IERC20(0);
+        _token19 = numTokens > 19 ? tokens[19] : IERC20(0);
+
+        _scalingFactor0 = _computeScalingFactor(tokens[0]);
+        _scalingFactor1 = _computeScalingFactor(tokens[1]);
+        _scalingFactor2 = numTokens > 2 ? _computeScalingFactor(tokens[2]) : 0;
+        _scalingFactor3 = numTokens > 3 ? _computeScalingFactor(tokens[3]) : 0;
+        _scalingFactor4 = numTokens > 4 ? _computeScalingFactor(tokens[4]) : 0;
+        _scalingFactor5 = numTokens > 5 ? _computeScalingFactor(tokens[5]) : 0;
+        _scalingFactor6 = numTokens > 6 ? _computeScalingFactor(tokens[6]) : 0;
+        _scalingFactor7 = numTokens > 7 ? _computeScalingFactor(tokens[7]) : 0;
+        _scalingFactor8 = numTokens > 8 ? _computeScalingFactor(tokens[8]) : 0;
+        _scalingFactor9 = numTokens > 9 ? _computeScalingFactor(tokens[9]) : 0;
+        _scalingFactor10 = numTokens > 10 ? _computeScalingFactor(tokens[10]) : 0;
+        _scalingFactor11 = numTokens > 11 ? _computeScalingFactor(tokens[11]) : 0;
+        _scalingFactor12 = numTokens > 12 ? _computeScalingFactor(tokens[12]) : 0;
+        _scalingFactor13 = numTokens > 13 ? _computeScalingFactor(tokens[13]) : 0;
+        _scalingFactor14 = numTokens > 14 ? _computeScalingFactor(tokens[14]) : 0;
+        _scalingFactor15 = numTokens > 15 ? _computeScalingFactor(tokens[15]) : 0;
+        _scalingFactor16 = numTokens > 16 ? _computeScalingFactor(tokens[16]) : 0;
+        _scalingFactor17 = numTokens > 17 ? _computeScalingFactor(tokens[17]) : 0;
+        _scalingFactor18 = numTokens > 18 ? _computeScalingFactor(tokens[18]) : 0;
+        _scalingFactor19 = numTokens > 19 ? _computeScalingFactor(tokens[19]) : 0;
     }
 
     function _getNormalizedWeight(IERC20 token) internal view virtual override returns (uint256) {
@@ -145,6 +211,18 @@
         else if (token == _token5) { return _normalizedWeight5; }
         else if (token == _token6) { return _normalizedWeight6; }
         else if (token == _token7) { return _normalizedWeight7; }
+        else if (token == _token8) { return _normalizedWeight8; }
+        else if (token == _token9) { return _normalizedWeight9; }
+        else if (token == _token10) { return _normalizedWeight10; }
+        else if (token == _token11) { return _normalizedWeight11; }
+        else if (token == _token12) { return _normalizedWeight12; }
+        else if (token == _token13) { return _normalizedWeight13; }
+        else if (token == _token14) { return _normalizedWeight14; }
+        else if (token == _token15) { return _normalizedWeight15; }
+        else if (token == _token16) { return _normalizedWeight16; }
+        else if (token == _token17) { return _normalizedWeight17; }
+        else if (token == _token18) { return _normalizedWeight18; }
+        else if (token == _token19) { return _normalizedWeight19; }
         else {
             _revert(Errors.INVALID_TOKEN);
         }
@@ -164,6 +242,18 @@
             if (totalTokens > 5) { normalizedWeights[5] = _normalizedWeight5; } else { return normalizedWeights; }
             if (totalTokens > 6) { normalizedWeights[6] = _normalizedWeight6; } else { return normalizedWeights; }
             if (totalTokens > 7) { normalizedWeights[7] = _normalizedWeight7; } else { return normalizedWeights; }
+            if (totalTokens > 8) { normalizedWeights[8] = _normalizedWeight8; } else { return normalizedWeights; }
+            if (totalTokens > 9) { normalizedWeights[9] = _normalizedWeight9; } else { return normalizedWeights; }
+            if (totalTokens > 10) { normalizedWeights[10] = _normalizedWeight10; } else { return normalizedWeights; }
+            if (totalTokens > 11) { normalizedWeights[11] = _normalizedWeight11; } else { return normalizedWeights; }
+            if (totalTokens > 12) { normalizedWeights[12] = _normalizedWeight12; } else { return normalizedWeights; }
+            if (totalTokens > 13) { normalizedWeights[13] = _normalizedWeight13; } else { return normalizedWeights; }
+            if (totalTokens > 14) { normalizedWeights[14] = _normalizedWeight14; } else { return normalizedWeights; }
+            if (totalTokens > 15) { normalizedWeights[15] = _normalizedWeight15; } else { return normalizedWeights; }
+            if (totalTokens > 16) { normalizedWeights[16] = _normalizedWeight16; } else { return normalizedWeights; }
+            if (totalTokens > 17) { normalizedWeights[17] = _normalizedWeight17; } else { return normalizedWeights; }
+            if (totalTokens > 18) { normalizedWeights[18] = _normalizedWeight18; } else { return normalizedWeights; }
+            if (totalTokens > 19) { normalizedWeights[19] = _normalizedWeight19; } else { return normalizedWeights; }
         }
 
         return normalizedWeights;
@@ -191,6 +281,18 @@
         else if (token == _token5) { return _scalingFactor5; }
         else if (token == _token6) { return _scalingFactor6; }
         else if (token == _token7) { return _scalingFactor7; }
+        else if (token == _token8) { return _scalingFactor8; }
+        else if (token == _token9) { return _scalingFactor9; }
+        else if (token == _token10) { return _scalingFactor10; }
+        else if (token == _token11) { return _scalingFactor11; }
+        else if (token == _token12) { return _scalingFactor12; }
+        else if (token == _token13) { return _scalingFactor13; }
+        else if (token == _token14) { return _scalingFactor14; }
+        else if (token == _token15) { return _scalingFactor15; }
+        else if (token == _token16) { return _scalingFactor16; }
+        else if (token == _token17) { return _scalingFactor17; }
+        else if (token == _token18) { return _scalingFactor18; }
+        else if (token == _token19) { return _scalingFactor19; }
         else {
             _revert(Errors.INVALID_TOKEN);
         }
@@ -210,6 +312,18 @@
             if (totalTokens > 5) { scalingFactors[5] = _scalingFactor5; } else { return scalingFactors; }
             if (totalTokens > 6) { scalingFactors[6] = _scalingFactor6; } else { return scalingFactors; }
             if (totalTokens > 7) { scalingFactors[7] = _scalingFactor7; } else { return scalingFactors; }
+            if (totalTokens > 8) { scalingFactors[8] = _scalingFactor8; } else { return scalingFactors; }
+            if (totalTokens > 9) { scalingFactors[9] = _scalingFactor9; } else { return scalingFactors; }
+            if (totalTokens > 10) { scalingFactors[10] = _scalingFactor10; } else { return scalingFactors; }
+            if (totalTokens > 11) { scalingFactors[11] = _scalingFactor11; } else { return scalingFactors; }
+            if (totalTokens > 12) { scalingFactors[12] = _scalingFactor12; } else { return scalingFactors; }
+            if (totalTokens > 13) { scalingFactors[13] = _scalingFactor13; } else { return scalingFactors; }
+            if (totalTokens > 14) { scalingFactors[14] = _scalingFactor14; } else { return scalingFactors; }
+            if (totalTokens > 15) { scalingFactors[15] = _scalingFactor15; } else { return scalingFactors; }
+            if (totalTokens > 16) { scalingFactors[16] = _scalingFactor16; } else { return scalingFactors; }
+            if (totalTokens > 17) { scalingFactors[17] = _scalingFactor17; } else { return scalingFactors; }
+            if (totalTokens > 18) { scalingFactors[18] = _scalingFactor18; } else { return scalingFactors; }
+            if (totalTokens > 19) { scalingFactors[19] = _scalingFactor19; } else { return scalingFactors; }
         }
 
         return scalingFactors;
@@ -217,16 +331,12 @@
 
     // InvariantGrowthProtocolFees
 
-    function _beforeJoinExit(uint256[] memory preBalances, uint256[] memory normalizedWeights)
-        internal
-        virtual
-        override
-    {
-        uint256 protocolFeesToBeMinted = _getSwapProtocolFees(preBalances, normalizedWeights, totalSupply());
-
-        if (protocolFeesToBeMinted > 0) {
-            _payProtocolFees(protocolFeesToBeMinted);
-        }
+    function _beforeJoinExit(
+        uint256[] memory preBalances,
+        uint256[] memory normalizedWeights,
+        uint256 protocolSwapFeePercentage
+    ) internal virtual override(BaseWeightedPool, InvariantGrowthProtocolFees) {
+        InvariantGrowthProtocolFees._beforeJoinExit(preBalances, normalizedWeights, protocolSwapFeePercentage);
     }
 
     function _afterJoinExit(
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/WeightedPoolFactory.sol pool-weighted/contracts/WeightedPoolFactory.sol
--- pool-weighted/contracts/WeightedPoolFactory.sol	2022-08-23 22:27:40.380056200 -0400
+++ pool-weighted/contracts/WeightedPoolFactory.sol	2022-08-23 19:16:59.858182100 -0400
@@ -15,17 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./WeightedPool.sol";
 
-contract WeightedPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
-    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(WeightedPool).creationCode)
-    {
+contract WeightedPoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    constructor(IVault vault) BasePoolSplitCodeFactory(vault, type(WeightedPool).creationCode) {
         // solhint-disable-previous-line no-empty-blocks
     }
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/WeightedPoolNoAMFactory.sol pool-weighted/contracts/WeightedPoolNoAMFactory.sol
--- pool-weighted/contracts/WeightedPoolNoAMFactory.sol	2022-08-23 22:27:40.398056500 -0400
+++ pool-weighted/contracts/WeightedPoolNoAMFactory.sol	2022-08-23 19:16:59.870183700 -0400
@@ -15,17 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./WeightedPool.sol";
 
-contract WeightedPoolNoAMFactory is BasePoolFactory, FactoryWidePauseWindow {
-    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(WeightedPool).creationCode)
-    {
+contract WeightedPoolNoAMFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    constructor(IVault vault) BasePoolSplitCodeFactory(vault, type(WeightedPool).creationCode) {
         // solhint-disable-previous-line no-empty-blocks
     }
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/lib/GradualValueChange.sol pool-weighted/contracts/lib/GradualValueChange.sol
--- pool-weighted/contracts/lib/GradualValueChange.sol	2022-08-15 14:38:47.572626000 -0400
+++ pool-weighted/contracts/lib/GradualValueChange.sol	2022-08-23 19:16:59.653181300 -0400
@@ -12,8 +12,8 @@
 // You should have received a copy of the GNU General Public License
 // along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 pragma solidity ^0.7.0;
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/lib/WeightCompression.sol pool-weighted/contracts/lib/WeightCompression.sol
--- pool-weighted/contracts/lib/WeightCompression.sol	2022-08-15 14:38:47.591118100 -0400
+++ pool-weighted/contracts/lib/WeightCompression.sol	2022-08-23 19:16:59.665181500 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 /**
  * @dev Library for compressing and decompressing numbers by using smaller types.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/smart/BaseManagedPoolFactory.sol pool-weighted/contracts/smart/BaseManagedPoolFactory.sol
--- pool-weighted/contracts/smart/BaseManagedPoolFactory.sol	2022-08-23 22:27:40.420053900 -0400
+++ pool-weighted/contracts/smart/BaseManagedPoolFactory.sol	2022-08-23 19:16:59.688181700 -0400
@@ -15,9 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./ManagedPool.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/smart/LiquidityBootstrappingPool.sol pool-weighted/contracts/smart/LiquidityBootstrappingPool.sol
--- pool-weighted/contracts/smart/LiquidityBootstrappingPool.sol	2022-08-15 14:38:47.620673100 -0400
+++ pool-weighted/contracts/smart/LiquidityBootstrappingPool.sol	2022-08-23 19:16:59.702181700 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "../lib/GradualValueChange.sol";
 import "../lib/WeightCompression.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/smart/LiquidityBootstrappingPoolFactory.sol pool-weighted/contracts/smart/LiquidityBootstrappingPoolFactory.sol
--- pool-weighted/contracts/smart/LiquidityBootstrappingPoolFactory.sol	2022-08-23 22:27:40.434058300 -0400
+++ pool-weighted/contracts/smart/LiquidityBootstrappingPoolFactory.sol	2022-08-23 19:16:59.723186000 -0400
@@ -15,17 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./LiquidityBootstrappingPool.sol";
 
-contract LiquidityBootstrappingPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
-    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(LiquidityBootstrappingPool).creationCode)
-    {
+contract LiquidityBootstrappingPoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    constructor(IVault vault) BasePoolSplitCodeFactory(vault, type(LiquidityBootstrappingPool).creationCode) {
         // solhint-disable-previous-line no-empty-blocks
     }
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/smart/ManagedPool.sol pool-weighted/contracts/smart/ManagedPool.sol
--- pool-weighted/contracts/smart/ManagedPool.sol	2022-08-23 22:27:40.454054500 -0400
+++ pool-weighted/contracts/smart/ManagedPool.sol	2022-08-23 19:16:59.740177100 -0400
@@ -15,16 +15,16 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ArrayHelpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../solidity-utils/contracts/helpers/ArrayHelpers.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/ProtocolFeeCache.sol";
+import "../../pool-utils/contracts/ProtocolFeeCache.sol";
 
 import "../lib/GradualValueChange.sol";
 import "../lib/WeightCompression.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/smart/ManagedPoolFactory.sol pool-weighted/contracts/smart/ManagedPoolFactory.sol
--- pool-weighted/contracts/smart/ManagedPoolFactory.sol	2022-08-15 14:38:47.685609800 -0400
+++ pool-weighted/contracts/smart/ManagedPoolFactory.sol	2022-08-23 19:16:59.763179200 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-pool-utils/contracts/controllers/ManagedPoolController.sol";
+import "../../pool-utils/contracts/controllers/ManagedPoolController.sol";
 
 import "./BaseManagedPoolFactory.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/Authentication.sol solidity-utils/contracts/helpers/Authentication.sol
--- solidity-utils/contracts/helpers/Authentication.sol	2022-08-15 14:38:48.361995100 -0400
+++ solidity-utils/contracts/helpers/Authentication.sol	2022-08-23 19:17:00.968176900 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
 
 /**
  * @dev Building block for performing access control on external functions.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/CodeDeployer.sol solidity-utils/contracts/helpers/CodeDeployer.sol
--- solidity-utils/contracts/helpers/CodeDeployer.sol	2022-08-15 14:38:48.394989000 -0400
+++ solidity-utils/contracts/helpers/CodeDeployer.sol	2022-08-23 19:17:00.997178900 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Library used to deploy contracts with specific code. This can be used for long-term storage of immutable data as
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/EOASignaturesValidator.sol solidity-utils/contracts/helpers/EOASignaturesValidator.sol
--- solidity-utils/contracts/helpers/EOASignaturesValidator.sol	2022-08-15 14:38:48.411526400 -0400
+++ solidity-utils/contracts/helpers/EOASignaturesValidator.sol	2022-08-23 19:17:01.027176800 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol";
 
 import "../openzeppelin/EIP712.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/ERC20Helpers.sol solidity-utils/contracts/helpers/ERC20Helpers.sol
--- solidity-utils/contracts/helpers/ERC20Helpers.sol	2022-08-15 14:38:48.435833800 -0400
+++ solidity-utils/contracts/helpers/ERC20Helpers.sol	2022-08-23 19:17:01.049194800 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/vault/IAsset.sol";
 
 // solhint-disable
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol
--- solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol	2022-08-15 14:38:48.452279200 -0400
+++ solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol	2022-08-23 19:17:01.077175900 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "./EOASignaturesValidator.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/InputHelpers.sol solidity-utils/contracts/helpers/InputHelpers.sol
--- solidity-utils/contracts/helpers/InputHelpers.sol	2022-08-15 14:38:48.469404200 -0400
+++ solidity-utils/contracts/helpers/InputHelpers.sol	2022-08-23 19:17:01.092181100 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 library InputHelpers {
     function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/OptionalOnlyCaller.sol solidity-utils/contracts/helpers/OptionalOnlyCaller.sol
--- solidity-utils/contracts/helpers/OptionalOnlyCaller.sol	2022-08-15 14:38:48.514847500 -0400
+++ solidity-utils/contracts/helpers/OptionalOnlyCaller.sol	2022-08-23 19:17:01.111177100 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "./SignaturesValidator.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/SignaturesValidator.sol solidity-utils/contracts/helpers/SignaturesValidator.sol
--- solidity-utils/contracts/helpers/SignaturesValidator.sol	2022-08-15 14:38:48.530425300 -0400
+++ solidity-utils/contracts/helpers/SignaturesValidator.sol	2022-08-23 19:17:01.129183500 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
 
 import "./EOASignaturesValidator.sol";
 import "../openzeppelin/Address.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/SingletonAuthentication.sol solidity-utils/contracts/helpers/SingletonAuthentication.sol
--- solidity-utils/contracts/helpers/SingletonAuthentication.sol	2022-08-15 14:38:48.546577300 -0400
+++ solidity-utils/contracts/helpers/SingletonAuthentication.sol	2022-08-23 19:17:01.149179700 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "./Authentication.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/TemporarilyPausable.sol solidity-utils/contracts/helpers/TemporarilyPausable.sol
--- solidity-utils/contracts/helpers/TemporarilyPausable.sol	2022-08-15 14:38:48.561559200 -0400
+++ solidity-utils/contracts/helpers/TemporarilyPausable.sol	2022-08-23 19:17:01.173178100 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol";
 
 /**
  * @dev Allows for a contract to be paused during an initial period after deployment, disabling functionality. Can be
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/WordCodec.sol solidity-utils/contracts/helpers/WordCodec.sol
--- solidity-utils/contracts/helpers/WordCodec.sol	2022-08-15 14:38:48.647864900 -0400
+++ solidity-utils/contracts/helpers/WordCodec.sol	2022-08-23 19:17:01.195186300 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "../math/Math.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/math/FixedPoint.sol solidity-utils/contracts/math/FixedPoint.sol
--- solidity-utils/contracts/math/FixedPoint.sol	2022-08-15 14:38:48.675286300 -0400
+++ solidity-utils/contracts/math/FixedPoint.sol	2022-08-23 19:17:01.231178300 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "./LogExpMath.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/math/LogExpMath.sol solidity-utils/contracts/math/LogExpMath.sol
--- solidity-utils/contracts/math/LogExpMath.sol	2022-08-15 14:38:48.712981400 -0400
+++ solidity-utils/contracts/math/LogExpMath.sol	2022-08-23 19:17:01.250179000 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /* solhint-disable */
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/math/Math.sol solidity-utils/contracts/math/Math.sol
--- solidity-utils/contracts/math/Math.sol	2022-08-15 14:38:48.732274200 -0400
+++ solidity-utils/contracts/math/Math.sol	2022-08-23 19:17:01.283175800 -0400
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/Address.sol solidity-utils/contracts/openzeppelin/Address.sol
--- solidity-utils/contracts/openzeppelin/Address.sol	2022-08-15 14:38:48.749418700 -0400
+++ solidity-utils/contracts/openzeppelin/Address.sol	2022-08-23 19:17:01.380175100 -0400
@@ -5,7 +5,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Collection of functions related to the address type
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/Create2.sol solidity-utils/contracts/openzeppelin/Create2.sol
--- solidity-utils/contracts/openzeppelin/Create2.sol	2022-08-15 14:38:48.809917000 -0400
+++ solidity-utils/contracts/openzeppelin/Create2.sol	2022-08-23 19:17:01.394176100 -0400
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/ERC20.sol solidity-utils/contracts/openzeppelin/ERC20.sol
--- solidity-utils/contracts/openzeppelin/ERC20.sol	2022-08-15 14:38:48.857057300 -0400
+++ solidity-utils/contracts/openzeppelin/ERC20.sol	2022-08-23 19:17:01.414176900 -0400
@@ -2,8 +2,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 import "./SafeMath.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/ERC20Permit.sol solidity-utils/contracts/openzeppelin/ERC20Permit.sol
--- solidity-utils/contracts/openzeppelin/ERC20Permit.sol	2022-08-15 14:38:48.896485800 -0400
+++ solidity-utils/contracts/openzeppelin/ERC20Permit.sol	2022-08-23 19:17:01.444178400 -0400
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
 
 import "./ERC20.sol";
 import "../helpers/EOASignaturesValidator.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/EnumerableMap.sol solidity-utils/contracts/openzeppelin/EnumerableMap.sol
--- solidity-utils/contracts/openzeppelin/EnumerableMap.sol	2022-08-15 14:38:48.919482700 -0400
+++ solidity-utils/contracts/openzeppelin/EnumerableMap.sol	2022-08-23 19:17:01.459175500 -0400
@@ -11,8 +11,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 /**
  * @dev Library for managing an enumerable variant of Solidity's
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/EnumerableSet.sol solidity-utils/contracts/openzeppelin/EnumerableSet.sol
--- solidity-utils/contracts/openzeppelin/EnumerableSet.sol	2022-08-15 14:38:48.937390300 -0400
+++ solidity-utils/contracts/openzeppelin/EnumerableSet.sol	2022-08-23 19:17:01.484177400 -0400
@@ -7,7 +7,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Library for managing
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/Ownable.sol solidity-utils/contracts/openzeppelin/Ownable.sol
--- solidity-utils/contracts/openzeppelin/Ownable.sol	2022-08-15 14:38:48.983390000 -0400
+++ solidity-utils/contracts/openzeppelin/Ownable.sol	2022-08-23 19:17:01.508176900 -0400
@@ -5,7 +5,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Contract module which provides a basic access control mechanism, where
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol
--- solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol	2022-08-15 14:38:49.001594300 -0400
+++ solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol	2022-08-23 19:17:01.520174900 -0400
@@ -6,7 +6,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Contract module that helps prevent reentrant calls to a function.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/SafeCast.sol solidity-utils/contracts/openzeppelin/SafeCast.sol
--- solidity-utils/contracts/openzeppelin/SafeCast.sol	2022-08-15 14:38:49.017742500 -0400
+++ solidity-utils/contracts/openzeppelin/SafeCast.sol	2022-08-23 19:17:01.533184300 -0400
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/SafeERC20.sol solidity-utils/contracts/openzeppelin/SafeERC20.sol
--- solidity-utils/contracts/openzeppelin/SafeERC20.sol	2022-08-15 14:38:49.032053800 -0400
+++ solidity-utils/contracts/openzeppelin/SafeERC20.sol	2022-08-23 19:17:01.545176500 -0400
@@ -6,8 +6,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 /**
  * @title SafeERC20
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/SafeMath.sol solidity-utils/contracts/openzeppelin/SafeMath.sol
--- solidity-utils/contracts/openzeppelin/SafeMath.sol	2022-08-15 14:38:49.046213500 -0400
+++ solidity-utils/contracts/openzeppelin/SafeMath.sol	2022-08-23 19:17:01.558177400 -0400
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Wrappers over Solidity's arithmetic operations with added overflow
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/test/BalancerErrorsMock.sol solidity-utils/contracts/test/BalancerErrorsMock.sol
--- solidity-utils/contracts/test/BalancerErrorsMock.sol	2022-08-15 14:38:49.062500300 -0400
+++ solidity-utils/contracts/test/BalancerErrorsMock.sol	2022-08-23 19:17:01.881221800 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 contract BalancerErrorsMock {
     function fail(uint256 code) external pure {
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/test/ERC1271Mock.sol solidity-utils/contracts/test/ERC1271Mock.sol
--- solidity-utils/contracts/test/ERC1271Mock.sol	2022-08-15 14:38:49.105292400 -0400
+++ solidity-utils/contracts/test/ERC1271Mock.sol	2022-08-23 19:17:01.896179800 -0400
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
 
 contract ERC1271Mock is IERC1271 {
     mapping(bytes32 => bool) private _approved;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/test/EnumerableMapMock.sol solidity-utils/contracts/test/EnumerableMapMock.sol
--- solidity-utils/contracts/test/EnumerableMapMock.sol	2022-08-15 14:38:49.157302700 -0400
+++ solidity-utils/contracts/test/EnumerableMapMock.sol	2022-08-23 19:17:01.919186100 -0400
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 import "../openzeppelin/EnumerableMap.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/test/SingletonAuthenticationMock.sol solidity-utils/contracts/test/SingletonAuthenticationMock.sol
--- solidity-utils/contracts/test/SingletonAuthenticationMock.sol	2022-08-15 14:38:49.386196200 -0400
+++ solidity-utils/contracts/test/SingletonAuthenticationMock.sol	2022-08-23 19:17:01.938180600 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "../helpers/SingletonAuthentication.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/BALTokenHolder.sol standalone-utils/contracts/BALTokenHolder.sol
--- standalone-utils/contracts/BALTokenHolder.sol	2022-08-15 14:38:49.764593900 -0400
+++ standalone-utils/contracts/BALTokenHolder.sol	2022-08-23 19:17:09.486896100 -0400
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBALTokenHolder.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerToken.sol";
+import "../../interfaces/contracts/standalone-utils/IBALTokenHolder.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 /**
  * @dev This contract simply holds the BAL token and delegates to Balancer Governance the permission to withdraw it. It
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/BALTokenHolderFactory.sol standalone-utils/contracts/BALTokenHolderFactory.sol
--- standalone-utils/contracts/BALTokenHolderFactory.sol	2022-08-15 14:38:49.780596700 -0400
+++ standalone-utils/contracts/BALTokenHolderFactory.sol	2022-08-23 19:17:09.499894900 -0400
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerToken.sol";
+import "../../interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
 
 import "./BALTokenHolder.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/BalancerQueries.sol standalone-utils/contracts/BalancerQueries.sol
--- standalone-utils/contracts/BalancerQueries.sol	2022-08-15 14:38:49.794593100 -0400
+++ standalone-utils/contracts/BalancerQueries.sol	2022-08-23 19:17:09.513897500 -0400
@@ -15,16 +15,16 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerQueries.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerQueries.sol";
 
-import "@balancer-labs/v2-vault/contracts/AssetHelpers.sol";
+import "../../vault/contracts/AssetHelpers.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
 
 /**
  * @dev This contract simply builds on top of the Balancer V2 architecture to provide useful helpers to users.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/ProtocolFeePercentagesProvider.sol standalone-utils/contracts/ProtocolFeePercentagesProvider.sol
--- standalone-utils/contracts/ProtocolFeePercentagesProvider.sol	2022-08-15 14:38:49.820747900 -0400
+++ standalone-utils/contracts/ProtocolFeePercentagesProvider.sol	2022-08-23 19:17:09.527902700 -0400
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+import "../../interfaces/contracts/vault/IProtocolFeesCollector.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
 
 contract ProtocolFeePercentagesProvider is IProtocolFeePercentagesProvider, SingletonAuthentication {
     using SafeCast for uint256;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/ProtocolFeesWithdrawer.sol standalone-utils/contracts/ProtocolFeesWithdrawer.sol
--- standalone-utils/contracts/ProtocolFeesWithdrawer.sol	2022-08-15 14:38:49.834902200 -0400
+++ standalone-utils/contracts/ProtocolFeesWithdrawer.sol	2022-08-23 19:17:09.542892300 -0400
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
 
 /**
  * @author Balancer Labs
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/AaveWrapping.sol standalone-utils/contracts/relayer/AaveWrapping.sol
--- standalone-utils/contracts/relayer/AaveWrapping.sol	2022-08-15 14:38:49.851131700 -0400
+++ standalone-utils/contracts/relayer/AaveWrapping.sol	2022-08-23 19:17:09.219892200 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IStaticATokenLM.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IStaticATokenLM.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/BalancerRelayer.sol standalone-utils/contracts/relayer/BalancerRelayer.sol
--- standalone-utils/contracts/relayer/BalancerRelayer.sol	2022-08-15 14:38:49.868132700 -0400
+++ standalone-utils/contracts/relayer/BalancerRelayer.sol	2022-08-23 19:17:09.237899700 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 /**
  * @title Balancer Relayer
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/BaseRelayerLibrary.sol standalone-utils/contracts/relayer/BaseRelayerLibrary.sol
--- standalone-utils/contracts/relayer/BaseRelayerLibrary.sol	2022-08-15 14:38:49.887128600 -0400
+++ standalone-utils/contracts/relayer/BaseRelayerLibrary.sol	2022-08-23 19:17:09.258895300 -0400
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "./IBaseRelayerLibrary.sol";
 import "./BalancerRelayer.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/ERC4626Wrapping.sol standalone-utils/contracts/relayer/ERC4626Wrapping.sol
--- standalone-utils/contracts/relayer/ERC4626Wrapping.sol	2022-08-15 14:38:49.902129400 -0400
+++ standalone-utils/contracts/relayer/ERC4626Wrapping.sol	2022-08-23 19:17:09.274897000 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IERC4626.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/GaugeActions.sol standalone-utils/contracts/relayer/GaugeActions.sol
--- standalone-utils/contracts/relayer/GaugeActions.sol	2022-08-15 14:38:49.917131300 -0400
+++ standalone-utils/contracts/relayer/GaugeActions.sol	2022-08-23 19:17:09.292894100 -0400
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+import "../../interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol
--- standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol	2022-08-15 14:38:49.932443000 -0400
+++ standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol	2022-08-23 19:17:09.306894500 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-vault/contracts/AssetHelpers.sol";
+import "../../vault/contracts/AssetHelpers.sol";
 
 /**
  * @title IBaseRelayerLibrary
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/LidoWrapping.sol standalone-utils/contracts/relayer/LidoWrapping.sol
--- standalone-utils/contracts/relayer/LidoWrapping.sol	2022-08-15 14:38:49.949601000 -0400
+++ standalone-utils/contracts/relayer/LidoWrapping.sol	2022-08-23 19:17:09.324894500 -0400
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IwstETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IstETH.sol";
+import "../../interfaces/contracts/standalone-utils/IwstETH.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/UnbuttonWrapping.sol standalone-utils/contracts/relayer/UnbuttonWrapping.sol
--- standalone-utils/contracts/relayer/UnbuttonWrapping.sol	2022-08-15 14:38:49.964615300 -0400
+++ standalone-utils/contracts/relayer/UnbuttonWrapping.sol	2022-08-23 19:17:09.342895900 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IUnbuttonToken.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/pool-linear/IUnbuttonToken.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/VaultActions.sol standalone-utils/contracts/relayer/VaultActions.sol
--- standalone-utils/contracts/relayer/VaultActions.sol	2022-08-15 14:38:49.978727800 -0400
+++ standalone-utils/contracts/relayer/VaultActions.sol	2022-08-23 19:17:09.363904200 -0400
@@ -15,12 +15,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/VaultHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/VaultHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/VaultPermit.sol standalone-utils/contracts/relayer/VaultPermit.sol
--- standalone-utils/contracts/relayer/VaultPermit.sol	2022-08-15 14:38:49.996079700 -0400
+++ standalone-utils/contracts/relayer/VaultPermit.sol	2022-08-23 19:17:09.391894800 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20PermitDAI.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20PermitDAI.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol
--- standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol	2022-08-15 14:38:50.013693300 -0400
+++ standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol	2022-08-23 19:17:09.195893700 -0400
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-stable/StablePoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol";
+import "../../interfaces/contracts/pool-stable/StablePoolUserData.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IFlashLoanRecipient.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 import "hardhat/console.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/test/MockBaseRelayerLibrary.sol standalone-utils/contracts/test/MockBaseRelayerLibrary.sol
--- standalone-utils/contracts/test/MockBaseRelayerLibrary.sol	2022-08-15 14:38:50.028840600 -0400
+++ standalone-utils/contracts/test/MockBaseRelayerLibrary.sol	2022-08-23 19:17:09.426896100 -0400
@@ -16,7 +16,7 @@
 
 pragma solidity ^0.7.0;
 
-//import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBaseRelayerLibrary.sol";
+//import "../../interfaces/contracts/standalone-utils/IBaseRelayerLibrary.sol";
 
 import "../relayer/BaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/test/MockStETH.sol standalone-utils/contracts/test/MockStETH.sol
--- standalone-utils/contracts/test/MockStETH.sol	2022-08-15 14:38:50.054248600 -0400
+++ standalone-utils/contracts/test/MockStETH.sol	2022-08-23 19:17:09.441892400 -0400
@@ -16,10 +16,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol";
+import "../../interfaces/contracts/standalone-utils/IstETH.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/test/TestToken.sol";
 
 contract MockStETH is TestToken, IstETH {
     constructor(
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/test/MockWstETH.sol standalone-utils/contracts/test/MockWstETH.sol
--- standalone-utils/contracts/test/MockWstETH.sol	2022-08-15 14:38:50.069259800 -0400
+++ standalone-utils/contracts/test/MockWstETH.sol	2022-08-23 19:17:09.456893200 -0400
@@ -16,11 +16,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IwstETH.sol";
+import "../../interfaces/contracts/standalone-utils/IstETH.sol";
+import "../../interfaces/contracts/standalone-utils/IwstETH.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
 
 contract MockWstETH is ERC20, IwstETH {
     using FixedPoint for uint256;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/test/TestWETH.sol standalone-utils/contracts/test/TestWETH.sol
--- standalone-utils/contracts/test/TestWETH.sol	2022-08-15 14:38:50.085246800 -0400
+++ standalone-utils/contracts/test/TestWETH.sol	2022-08-23 19:17:09.473896100 -0400
@@ -16,7 +16,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
 
 contract TestWETH is IWETH {
     string public name = "Wrapped Ether";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/AssetHelpers.sol vault/contracts/AssetHelpers.sol
--- vault/contracts/AssetHelpers.sol	2022-08-15 14:38:50.384081700 -0400
+++ vault/contracts/AssetHelpers.sol	2022-08-23 19:17:12.144892100 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IAsset.sol";
 
 abstract contract AssetHelpers {
     // solhint-disable-next-line var-name-mixedcase
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/AssetManagers.sol vault/contracts/AssetManagers.sol
--- vault/contracts/AssetManagers.sol	2022-08-15 14:38:50.399230200 -0400
+++ vault/contracts/AssetManagers.sol	2022-08-23 19:17:12.159897500 -0400
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./UserBalance.sol";
 import "./balances/BalanceAllocation.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/AssetTransfersHandler.sol vault/contracts/AssetTransfersHandler.sol
--- vault/contracts/AssetTransfersHandler.sol	2022-08-15 14:38:50.416234400 -0400
+++ vault/contracts/AssetTransfersHandler.sol	2022-08-23 19:17:12.175897600 -0400
@@ -15,15 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IAsset.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./AssetHelpers.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/Fees.sol vault/contracts/Fees.sol
--- vault/contracts/Fees.sol	2022-08-15 14:38:50.439231100 -0400
+++ vault/contracts/Fees.sol	2022-08-23 19:17:12.189895600 -0400
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 import "./ProtocolFeesCollector.sol";
 import "./VaultAuthorization.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/FlashLoans.sol vault/contracts/FlashLoans.sol
--- vault/contracts/FlashLoans.sol	2022-08-15 14:38:50.456228700 -0400
+++ vault/contracts/FlashLoans.sol	2022-08-23 19:17:12.204892600 -0400
@@ -19,12 +19,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IFlashLoanRecipient.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 import "./Fees.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/PoolBalances.sol vault/contracts/PoolBalances.sol
--- vault/contracts/PoolBalances.sol	2022-08-15 14:38:50.471230300 -0400
+++ vault/contracts/PoolBalances.sol	2022-08-23 19:17:12.219896700 -0400
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./Fees.sol";
 import "./PoolTokens.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/PoolRegistry.sol vault/contracts/PoolRegistry.sol
--- vault/contracts/PoolRegistry.sol	2022-08-15 14:38:50.487229300 -0400
+++ vault/contracts/PoolRegistry.sol	2022-08-23 19:17:12.243892800 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./VaultAuthorization.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/PoolTokens.sol vault/contracts/PoolTokens.sol
--- vault/contracts/PoolTokens.sol	2022-08-15 14:38:50.509318900 -0400
+++ vault/contracts/PoolTokens.sol	2022-08-23 19:17:12.257894300 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./AssetManagers.sol";
 import "./PoolRegistry.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/ProtocolFeesCollector.sol vault/contracts/ProtocolFeesCollector.sol
--- vault/contracts/ProtocolFeesCollector.sol	2022-08-15 14:38:50.554038500 -0400
+++ vault/contracts/ProtocolFeesCollector.sol	2022-08-23 19:17:12.271894500 -0400
@@ -15,12 +15,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol";
+import "../../interfaces/contracts/vault/IProtocolFeesCollector.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 /**
  * @dev This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/Swaps.sol vault/contracts/Swaps.sol
--- vault/contracts/Swaps.sol	2022-08-15 14:38:50.567181400 -0400
+++ vault/contracts/Swaps.sol	2022-08-23 19:17:12.287896400 -0400
@@ -15,20 +15,20 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
+import "../../interfaces/contracts/vault/IPoolSwapStructs.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./PoolBalances.sol";
 import "./balances/BalanceAllocation.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/UserBalance.sol vault/contracts/UserBalance.sol
--- vault/contracts/UserBalance.sol	2022-08-15 14:38:50.582470200 -0400
+++ vault/contracts/UserBalance.sol	2022-08-23 19:17:12.320894900 -0400
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./AssetTransfersHandler.sol";
 import "./VaultAuthorization.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/Vault.sol vault/contracts/Vault.sol
--- vault/contracts/Vault.sol	2022-08-15 14:38:50.596601400 -0400
+++ vault/contracts/Vault.sol	2022-08-23 19:17:12.350894100 -0400
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
 
 import "./VaultAuthorization.sol";
 import "./FlashLoans.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/VaultAuthorization.sol vault/contracts/VaultAuthorization.sol
--- vault/contracts/VaultAuthorization.sol	2022-08-15 14:38:50.612000800 -0400
+++ vault/contracts/VaultAuthorization.sol	2022-08-23 19:17:12.374897400 -0400
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol";
+import "../../solidity-utils/contracts/helpers/TemporarilyPausable.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 /**
  * @dev Manages access control of Vault permissioned functions by relying on the Authorizer and signature validation.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/authorizer/TimelockAuthorizer.sol vault/contracts/authorizer/TimelockAuthorizer.sol
--- vault/contracts/authorizer/TimelockAuthorizer.sol	2022-08-15 14:38:50.629152600 -0400
+++ vault/contracts/authorizer/TimelockAuthorizer.sol	2022-08-23 19:17:11.880892200 -0400
@@ -15,15 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 import "./TimelockExecutor.sol";
 
 /**
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/authorizer/TimelockExecutor.sol vault/contracts/authorizer/TimelockExecutor.sol
--- vault/contracts/authorizer/TimelockExecutor.sol	2022-08-15 14:38:50.651060400 -0400
+++ vault/contracts/authorizer/TimelockExecutor.sol	2022-08-23 19:17:11.906893800 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./TimelockAuthorizer.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/balances/BalanceAllocation.sol vault/contracts/balances/BalanceAllocation.sol
--- vault/contracts/balances/BalanceAllocation.sol	2022-08-15 14:38:50.669061800 -0400
+++ vault/contracts/balances/BalanceAllocation.sol	2022-08-23 19:17:11.924897200 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../../solidity-utils/contracts/math/Math.sol";
 
 // This library is used to create a data structure that represents a token's balance for a Pool. 'cash' is how many
 // tokens the Pool has sitting inside of the Vault. 'managed' is how many tokens were withdrawn from the Vault by the
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/balances/GeneralPoolsBalance.sol vault/contracts/balances/GeneralPoolsBalance.sol
--- vault/contracts/balances/GeneralPoolsBalance.sol	2022-08-15 14:38:50.687059600 -0400
+++ vault/contracts/balances/GeneralPoolsBalance.sol	2022-08-23 19:17:11.951892400 -0400
@@ -14,10 +14,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
+import "../../../solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
 
 import "./BalanceAllocation.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol
--- vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol	2022-08-15 14:38:50.704059600 -0400
+++ vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol	2022-08-23 19:17:11.974892300 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
 
 import "./BalanceAllocation.sol";
 import "../PoolRegistry.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/balances/TwoTokenPoolsBalance.sol vault/contracts/balances/TwoTokenPoolsBalance.sol
--- vault/contracts/balances/TwoTokenPoolsBalance.sol	2022-08-15 14:38:50.720206100 -0400
+++ vault/contracts/balances/TwoTokenPoolsBalance.sol	2022-08-23 19:17:11.996893700 -0400
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 import "./BalanceAllocation.sol";
 import "../PoolRegistry.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/test/MockAssetTransfersHandler.sol vault/contracts/test/MockAssetTransfersHandler.sol
--- vault/contracts/test/MockAssetTransfersHandler.sol	2022-08-15 14:38:50.768644600 -0400
+++ vault/contracts/test/MockAssetTransfersHandler.sol	2022-08-23 19:17:12.046895000 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "../AssetTransfersHandler.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/test/MockAuthenticatedContract.sol vault/contracts/test/MockAuthenticatedContract.sol
--- vault/contracts/test/MockAuthenticatedContract.sol	2022-08-15 14:38:50.785652000 -0400
+++ vault/contracts/test/MockAuthenticatedContract.sol	2022-08-23 19:17:12.059894000 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
 
 /*
  * @author Balancer Labs
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/test/MockBasicAuthorizer.sol vault/contracts/test/MockBasicAuthorizer.sol
--- vault/contracts/test/MockBasicAuthorizer.sol	2022-08-15 14:38:50.799642300 -0400
+++ vault/contracts/test/MockBasicAuthorizer.sol	2022-08-23 19:17:12.077892600 -0400
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasicAuthorizer.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/vault/IBasicAuthorizer.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
 
 contract MockBasicAuthorizer is IBasicAuthorizer {
     using EnumerableSet for EnumerableSet.AddressSet;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/test/MockFlashLoanRecipient.sol vault/contracts/test/MockFlashLoanRecipient.sol
--- vault/contracts/test/MockFlashLoanRecipient.sol	2022-08-15 14:38:50.815643600 -0400
+++ vault/contracts/test/MockFlashLoanRecipient.sol	2022-08-23 19:17:12.090892600 -0400
@@ -14,13 +14,13 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IFlashLoanRecipient.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/test/TestToken.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 contract MockFlashLoanRecipient is IFlashLoanRecipient {
     using Math for uint256;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/test/MockInternalBalanceRelayer.sol vault/contracts/test/MockInternalBalanceRelayer.sol
--- vault/contracts/test/MockInternalBalanceRelayer.sol	2022-08-15 14:38:50.829988600 -0400
+++ vault/contracts/test/MockInternalBalanceRelayer.sol	2022-08-23 19:17:12.110895700 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
 
 contract MockInternalBalanceRelayer {
     IVault public vault;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/test/MockPool.sol vault/contracts/test/MockPool.sol
--- vault/contracts/test/MockPool.sol	2022-08-15 14:38:50.847142100 -0400
+++ vault/contracts/test/MockPool.sol	2022-08-23 19:17:12.128893800 -0400
@@ -15,12 +15,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 contract MockPool is IGeneralPool, IMinimalSwapInfoPool {
     using FixedPoint for uint256;
