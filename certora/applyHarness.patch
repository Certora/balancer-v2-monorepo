diff -ruN .gitignore .gitignore
--- .gitignore	1969-12-31 19:00:00.000000000 -0500
+++ .gitignore	2022-10-14 11:36:50.208765165 -0400
@@ -0,0 +1,2 @@
+*
+!.gitignore
\ No newline at end of file
diff -ruN pool-stable/contracts/StableMath.sol pool-stable/contracts/StableMath.sol
--- pool-stable/contracts/StableMath.sol	2022-09-16 14:56:19.188454137 -0400
+++ pool-stable/contracts/StableMath.sol	2022-10-14 11:38:25.908677998 -0400
@@ -59,6 +59,8 @@
         pure
         returns (uint256)
     {
+        return calculateInvariant(balances[0], balances[1]);
+        /*
         /**********************************************************************************************
         // invariant                                                                                 //
         // D = invariant                                                  D^(n+1)                    //
@@ -117,6 +119,11 @@
         }
 
         _revert(Errors.STABLE_INVARIANT_DIDNT_CONVERGE);
+        */
+    }
+
+    function calculateInvariant(uint256 balance1, uint256 balance2) public pure returns(uint256) {
+        return balance1;
     }
 
     // Computes how many tokens can be taken out of a pool if `tokenAmountIn` are sent, given the current balances.
@@ -469,6 +476,10 @@
         return accumulatedTokenSwapFees.mulDown(protocolSwapFeePercentage);
     }
 
+    function getTokenBal(uint256 balance1, uint256 balance2, uint256 newInvariant, uint256 tokenIndex) public pure returns(uint256) {
+        return 0;
+    }
+
     // This function calculates the balance of a given token (tokenIndex)
     // given all the other balances and the invariant
     function _getTokenBalanceGivenInvariantAndAllOtherBalances(
@@ -477,6 +488,8 @@
         uint256 invariant,
         uint256 tokenIndex
     ) internal pure returns (uint256) {
+        return getTokenBal(balances[0], balances[1], invariant, tokenIndex);
+        /*
         // Rounds result up overall
 
         uint256 ampTimesTotal = amplificationParameter * balances.length;
@@ -521,6 +534,7 @@
         }
 
         _revert(Errors.STABLE_GET_BALANCE_DIDNT_CONVERGE);
+        */
     }
 
     function _getRate(
diff -ruN pool-stable/contracts/StablePool.sol pool-stable/contracts/StablePool.sol
--- pool-stable/contracts/StablePool.sol	2022-09-16 14:56:19.188454137 -0400
+++ pool-stable/contracts/StablePool.sol	2022-10-14 11:36:50.208765165 -0400
@@ -302,7 +302,7 @@
         uint256[] memory dueProtocolFeeAmounts = _getDueProtocolFeeAmounts(balances, protocolSwapFeePercentage);
 
         // Update current balances by subtracting the protocol fee amounts
-        _mutateAmounts(balances, dueProtocolFeeAmounts, FixedPoint.sub);
+        _mutateAmounts(balances, dueProtocolFeeAmounts, true);
         (uint256 bptAmountOut, uint256[] memory amountsIn) = _doJoin(balances, scalingFactors, userData);
 
         // Update the invariant with the balances the Pool will have after the join, in order to compute the
@@ -403,7 +403,7 @@
         dueProtocolFeeAmounts = _getDueProtocolFeeAmounts(balances, protocolSwapFeePercentage);
 
         // Update current balances by subtracting the protocol fee amounts
-        _mutateAmounts(balances, dueProtocolFeeAmounts, FixedPoint.sub);
+        _mutateAmounts(balances, dueProtocolFeeAmounts, true);
 
         (bptAmountIn, amountsOut) = _doExit(balances, scalingFactors, userData);
 
@@ -571,7 +571,7 @@
      * in the future.
      */
     function _updateInvariantAfterJoin(uint256[] memory balances, uint256[] memory amountsIn) private {
-        _mutateAmounts(balances, amountsIn, FixedPoint.add);
+        _mutateAmounts(balances, amountsIn, false);
 
         (uint256 currentAmp, ) = _getAmplificationParameter();
         // This invariant is used only to compute the final balance when calculating the protocol fees. These are
@@ -584,7 +584,7 @@
      * in the future.
      */
     function _updateInvariantAfterExit(uint256[] memory balances, uint256[] memory amountsOut) private {
-        _mutateAmounts(balances, amountsOut, FixedPoint.sub);
+        _mutateAmounts(balances, amountsOut, true);
 
         (uint256 currentAmp, ) = _getAmplificationParameter();
         // This invariant is used only to compute the final balance when calculating the protocol fees. These are
@@ -600,10 +600,10 @@
     function _mutateAmounts(
         uint256[] memory toMutate,
         uint256[] memory arguments,
-        function(uint256, uint256) pure returns (uint256) mutation
+        bool isSub
     ) private view {
         for (uint256 i = 0; i < _getTotalTokens(); ++i) {
-            toMutate[i] = mutation(toMutate[i], arguments[i]);
+            toMutate[i] = isSub? FixedPoint.sub(toMutate[i], arguments[i]) : FixedPoint.add(toMutate[i], arguments[i]) ;
         }
     }
 
diff -ruN solidity-utils/contracts/helpers/WordCodec.sol solidity-utils/contracts/helpers/WordCodec.sol
--- solidity-utils/contracts/helpers/WordCodec.sol	2022-09-16 14:56:19.192453952 -0400
+++ solidity-utils/contracts/helpers/WordCodec.sol	2022-10-14 11:36:50.208765165 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+//import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "../math/Math.sol";
 
@@ -187,7 +187,7 @@
         uint256 value,
         uint256 offset,
         uint256 bitLength
-    ) private pure {
+    ) internal pure { //MUNGED private => internal
         _require(offset < 256, Errors.OUT_OF_BOUNDS);
         // We never accept 256 bit values (which would make the codec pointless), and the larger the offset the smaller
         // the maximum bit length.
@@ -201,7 +201,7 @@
         int256 value,
         uint256 offset,
         uint256 bitLength
-    ) private pure {
+    ) internal pure { //MUNGED private => internal
         _require(offset < 256, Errors.OUT_OF_BOUNDS);
         // We never accept 256 bit values (which would make the codec pointless), and the larger the offset the smaller
         // the maximum bit length.
