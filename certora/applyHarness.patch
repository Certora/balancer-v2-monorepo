diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' distributors/contracts/MerkleOrchard.sol distributors/contracts/MerkleOrchard.sol
--- distributors/contracts/MerkleOrchard.sol	2022-08-15 14:38:42.807716500 -0400
+++ distributors/contracts/MerkleOrchard.sol	2022-09-08 18:16:30.676659300 -0400
@@ -14,13 +14,13 @@
 
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../../interfaces/contracts/vault/IVault.sol";
+import "../../../interfaces/contracts/vault/IAsset.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../../solidity-utils/contracts/openzeppelin/MerkleProof.sol";
+import "../../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 pragma solidity ^0.7.0;
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' distributors/contracts/MerkleRedeem.sol distributors/contracts/MerkleRedeem.sol
--- distributors/contracts/MerkleRedeem.sol	2022-08-15 14:38:42.822718000 -0400
+++ distributors/contracts/MerkleRedeem.sol	2022-09-08 18:16:30.705667500 -0400
@@ -14,15 +14,15 @@
 
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../../interfaces/contracts/vault/IVault.sol";
+import "../../../interfaces/contracts/vault/IAsset.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/MerkleProof.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../../solidity-utils/contracts/openzeppelin/MerkleProof.sol";
+import "../../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../../solidity-utils/contracts/openzeppelin/Ownable.sol";
+import "../../../solidity-utils/contracts/math/FixedPoint.sol";
 
 pragma solidity ^0.7.0;
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' distributors/contracts/test/MockRewardCallback.sol distributors/contracts/test/MockRewardCallback.sol
--- distributors/contracts/test/MockRewardCallback.sol	2022-08-15 14:38:42.836717200 -0400
+++ distributors/contracts/test/MockRewardCallback.sol	2022-09-08 18:16:30.727659600 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/distributors/IDistributorCallback.sol";
+import "../../interfaces/contracts/distributors/IDistributorCallback.sol";
 
 contract MockRewardCallback is IDistributorCallback {
     event CallbackReceived();
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol
--- interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol	2022-09-07 19:19:28.428461800 -0400
+++ interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol	2022-09-08 18:16:30.746658400 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "./IBasePoolFactory.sol";
+import "./IBasePoolSplitCodeFactory.sol";
 
-interface ILastCreatedPoolFactory is IBasePoolFactory {
+interface ILastCreatedPoolFactory is IBasePoolSplitCodeFactory {
     /**
      * @dev Returns the address of the last Pool created by this factory.
      *
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/BalancerMinter.sol liquidity-mining/contracts/BalancerMinter.sol
--- liquidity-mining/contracts/BalancerMinter.sol	2022-08-15 14:38:44.377629600 -0400
+++ liquidity-mining/contracts/BalancerMinter.sol	2022-09-08 18:16:30.768659000 -0400
@@ -14,15 +14,15 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeController.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeController.sol";
+import "../../interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeMath.sol";
+import "../../solidity-utils/contracts/openzeppelin/EIP712.sol";
+import "../../solidity-utils/contracts/helpers/EOASignaturesValidator.sol";
 
 contract BalancerMinter is IBalancerMinter, ReentrancyGuard, EOASignaturesValidator {
     using SafeMath for uint256;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/BalancerTokenAdmin.sol liquidity-mining/contracts/BalancerTokenAdmin.sol
--- liquidity-mining/contracts/BalancerTokenAdmin.sol	2022-08-15 14:38:44.405631200 -0400
+++ liquidity-mining/contracts/BalancerTokenAdmin.sol	2022-09-08 18:16:30.791658100 -0400
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // solhint-disable not-rely-on-time
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/SmartWalletChecker.sol liquidity-mining/contracts/SmartWalletChecker.sol
--- liquidity-mining/contracts/SmartWalletChecker.sol	2022-08-15 14:38:44.472210100 -0400
+++ liquidity-mining/contracts/SmartWalletChecker.sol	2022-09-08 18:16:30.817657600 -0400
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/ISmartWalletChecker.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
 
 contract SmartWalletChecker is ISmartWalletChecker, SingletonAuthentication {
     using EnumerableSet for EnumerableSet.AddressSet;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/VotingEscrowDelegationProxy.sol liquidity-mining/contracts/VotingEscrowDelegationProxy.sol
--- liquidity-mining/contracts/VotingEscrowDelegationProxy.sol	2022-08-15 14:38:44.501659500 -0400
+++ liquidity-mining/contracts/VotingEscrowDelegationProxy.sol	2022-09-08 18:16:30.875664700 -0400
@@ -14,10 +14,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IVeDelegation.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IVeDelegation.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
 
 contract VotingEscrowDelegationProxy is SingletonAuthentication {
     IERC20 private immutable _votingEscrow;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/admin/AuthorizerAdaptor.sol liquidity-mining/contracts/admin/AuthorizerAdaptor.sol
--- liquidity-mining/contracts/admin/AuthorizerAdaptor.sol	2022-08-15 14:38:44.518787000 -0400
+++ liquidity-mining/contracts/admin/AuthorizerAdaptor.sol	2022-09-08 18:16:30.897655400 -0400
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 /**
  * @title Authorizer Adaptor
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol
--- liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol	2022-08-15 14:38:44.534055200 -0400
+++ liquidity-mining/contracts/admin/ChildChainGaugeTokenAdder.sol	2022-09-08 18:16:30.920657800 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
+import "../../interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
 
 /**
  * @title ChildChainGaugeTokenAdder
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/admin/DistributionScheduler.sol liquidity-mining/contracts/admin/DistributionScheduler.sol
--- liquidity-mining/contracts/admin/DistributionScheduler.sol	2022-08-15 14:38:44.550624400 -0400
+++ liquidity-mining/contracts/admin/DistributionScheduler.sol	2022-09-08 18:16:30.941656500 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
+import "../../interfaces/contracts/liquidity-mining/IRewardTokenDistributor.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 // solhint-disable not-rely-on-time
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/admin/GaugeAdder.sol liquidity-mining/contracts/admin/GaugeAdder.sol
--- liquidity-mining/contracts/admin/GaugeAdder.sol	2022-08-15 14:38:44.572902000 -0400
+++ liquidity-mining/contracts/admin/GaugeAdder.sol	2022-09-08 18:16:30.970654500 -0400
@@ -14,14 +14,14 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeAdder.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeAdder.sol";
+import "../../interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
 
 contract GaugeAdder is IGaugeAdder, SingletonAuthentication, ReentrancyGuard {
     using EnumerableSet for EnumerableSet.AddressSet;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/fee-distribution/FeeDistributor.sol liquidity-mining/contracts/fee-distribution/FeeDistributor.sol
--- liquidity-mining/contracts/fee-distribution/FeeDistributor.sol	2022-08-15 14:38:44.595219700 -0400
+++ liquidity-mining/contracts/fee-distribution/FeeDistributor.sol	2022-09-08 18:16:30.995655300 -0400
@@ -15,16 +15,16 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IFeeDistributor.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IVotingEscrow.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
+import "../../interfaces/contracts/liquidity-mining/IFeeDistributor.sol";
+import "../../interfaces/contracts/liquidity-mining/IVotingEscrow.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/OptionalOnlyCaller.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/OptionalOnlyCaller.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeMath.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // solhint-disable not-rely-on-time
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol
--- liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol	2022-08-15 14:38:44.620218400 -0400
+++ liquidity-mining/contracts/gauges/ChildChainGaugeRewardHelper.sol	2022-09-08 18:16:31.021656500 -0400
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainStreamer.sol";
+import "../../interfaces/contracts/liquidity-mining/IRewardsOnlyGauge.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainStreamer.sol";
 
 /**
  * @title ChildChainGaugeRewardHelper
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol
--- liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol	2022-09-07 19:19:28.460460700 -0400
+++ liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol	2022-09-08 18:16:31.031657000 -0400
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
+import "../../interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+import "../../solidity-utils/contracts/openzeppelin/Clones.sol";
 
 contract ChildChainLiquidityGaugeFactory is IChildChainLiquidityGaugeFactory {
     // RewardsOnlyGauge expects the claim function selector to be left padded with zeros.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol.orig liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol.orig
--- liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol.orig	1969-12-31 19:00:00.000000000 -0500
+++ liquidity-mining/contracts/gauges/ChildChainLiquidityGaugeFactory.sol.orig	2022-09-08 18:16:31.060658200 -0400
@@ -0,0 +1,126 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IChildChainLiquidityGaugeFactory.sol";
+import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/ILiquidityGauge.sol";
+import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Clones.sol";
+
+contract ChildChainLiquidityGaugeFactory is IChildChainLiquidityGaugeFactory {
+    // RewardsOnlyGauge expects the claim function selector to be left padded with zeros.
+    // We then shift right 28 bytes so that the function selector (top 4 bytes) sits in the lowest 4 bytes.
+    bytes32 private constant _CLAIM_SIG = keccak256("get_reward()") >> (28 * 8);
+
+    ILiquidityGauge private immutable _gaugeImplementation;
+    IChildChainStreamer private immutable _childChainStreamerImplementation;
+
+    mapping(address => bool) private _isGaugeFromFactory;
+    mapping(address => bool) private _isStreamerFromFactory;
+    mapping(address => address) private _poolGauge;
+    mapping(address => address) private _gaugeStreamer;
+
+    constructor(ILiquidityGauge gauge, IChildChainStreamer childChainStreamer) {
+        _gaugeImplementation = gauge;
+        _childChainStreamerImplementation = childChainStreamer;
+    }
+
+    /**
+     * @notice Returns the address of the implementation used for gauge deployments.
+     */
+    function getGaugeImplementation() external view override returns (ILiquidityGauge) {
+        return _gaugeImplementation;
+    }
+
+    /**
+     * @notice Returns the address of the implementation used for streamer deployments.
+     */
+    function getChildChainStreamerImplementation() external view override returns (IChildChainStreamer) {
+        return _childChainStreamerImplementation;
+    }
+
+    /**
+     * @notice Returns the address of the gauge belonging to `pool`.
+     */
+    function getPoolGauge(address pool) public view override returns (ILiquidityGauge) {
+        return ILiquidityGauge(_poolGauge[pool]);
+    }
+
+    /**
+     * @notice Returns true if `gauge` was created by this factory.
+     */
+    function isGaugeFromFactory(address gauge) external view override returns (bool) {
+        return _isGaugeFromFactory[gauge];
+    }
+
+    /**
+     * @notice Returns the address of the streamer belonging to `gauge`.
+     */
+    function getGaugeStreamer(address gauge) public view override returns (address) {
+        return _gaugeStreamer[gauge];
+    }
+
+    /**
+     * @notice Returns true if `streamer` was created by this factory.
+     */
+    function isStreamerFromFactory(address streamer) external view override returns (bool) {
+        return _isStreamerFromFactory[streamer];
+    }
+
+    /**
+     * @notice Returns the address of the pool which `gauge` belongs.
+     */
+    function getGaugePool(address gauge) external view override returns (IERC20) {
+        return IRewardsOnlyGauge(gauge).lp_token();
+    }
+
+    /**
+     * @notice Returns the address of the streamer belonging to `pool`'s gauge.
+     */
+    function getPoolStreamer(address pool) external view override returns (address) {
+        return getGaugeStreamer(address(getPoolGauge(pool)));
+    }
+
+    /**
+     * @notice Deploys a new gauge for a Balancer pool.
+     * @dev As anyone can register arbitrary Balancer pools with the Vault,
+     * it's impossible to prove onchain that `pool` is a "valid" deployment.
+     *
+     * Care must be taken to ensure that gauges deployed from this factory are
+     * suitable before they are added to the GaugeController.
+     *
+     * This factory disallows deploying multiple gauges for a single pool.
+     * @param pool The address of the pool for which to deploy a gauge
+     * @return The address of the deployed gauge
+     */
+    function create(address pool) external returns (address) {
+        require(_poolGauge[pool] == address(0), "Gauge already exists");
+
+        address gauge = Clones.clone(address(_gaugeImplementation));
+        address streamer = Clones.clone(address(_childChainStreamerImplementation));
+
+        IChildChainStreamer(streamer).initialize(gauge);
+        IRewardsOnlyGauge(gauge).initialize(pool, streamer, _CLAIM_SIG);
+
+        _isGaugeFromFactory[gauge] = true;
+        _poolGauge[pool] = gauge;
+        _gaugeStreamer[gauge] = streamer;
+        emit RewardsOnlyGaugeCreated(gauge, pool, streamer);
+
+        return gauge;
+    }
+}
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/StakelessGauge.sol liquidity-mining/contracts/gauges/StakelessGauge.sol
--- liquidity-mining/contracts/gauges/StakelessGauge.sol	2022-09-07 19:19:28.474461500 -0400
+++ liquidity-mining/contracts/gauges/StakelessGauge.sol	2022-09-08 18:16:31.069656000 -0400
@@ -14,18 +14,15 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IGaugeController.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakelessGauge.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerTokenAdmin.sol";
+import "../../interfaces/contracts/liquidity-mining/IGaugeController.sol";
+import "../../interfaces/contracts/liquidity-mining/IStakelessGauge.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 abstract contract StakelessGauge is IStakelessGauge, ReentrancyGuard {
-    uint256 public constant MAX_RELATIVE_WEIGHT_CAP = 1e18;
-
     IERC20 internal immutable _balToken;
     IBalancerTokenAdmin private immutable _tokenAdmin;
     IBalancerMinter private immutable _minter;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol
--- liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol	2022-08-15 14:38:44.738282400 -0400
+++ liquidity-mining/contracts/gauges/arbitrum/IGatewayRouter.sol	2022-09-08 18:16:31.079656000 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 interface IGatewayRouter {
     function outboundTransfer(
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/LinearMath.sol pool-linear/contracts/LinearMath.sol
--- pool-linear/contracts/LinearMath.sol	2022-08-15 14:38:45.586868800 -0400
+++ pool-linear/contracts/LinearMath.sol	2022-09-08 18:16:31.088655300 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // These functions start with an underscore, as if they were part of a contract and not a library. At some point this
 // should be fixed.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/LinearPool.sol pool-linear/contracts/LinearPool.sol
--- pool-linear/contracts/LinearPool.sol	2022-09-07 19:19:28.771460600 -0400
+++ pool-linear/contracts/LinearPool.sol	2022-09-08 18:16:31.139655700 -0400
@@ -15,17 +15,18 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/ILinearPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/pool-linear/LinearPoolUserData.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
+import "../../interfaces/contracts/pool-linear/ILinearPool.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/BasePool.sol";
-import "@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol";
+// import "../../pool-utils/contracts/BasePool.sol";
+import "../../pool-utils/contracts/BasePool.sol";
+import "../../pool-utils/contracts/rates/PriceRateCache.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 import "./LinearMath.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/LinearPoolRebalancer.sol pool-linear/contracts/LinearPoolRebalancer.sol
--- pool-linear/contracts/LinearPoolRebalancer.sol	2022-08-15 14:38:45.622998100 -0400
+++ pool-linear/contracts/LinearPoolRebalancer.sol	2022-09-08 18:16:31.163654400 -0400
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerQueries.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/ILinearPool.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerQueries.sol";
+import "../../interfaces/contracts/pool-linear/ILinearPool.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 abstract contract LinearPoolRebalancer {
     using SafeERC20 for IERC20;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/aave/AaveLinearPool.sol pool-linear/contracts/aave/AaveLinearPool.sol
--- pool-linear/contracts/aave/AaveLinearPool.sol	2022-08-15 14:38:45.641334800 -0400
+++ pool-linear/contracts/aave/AaveLinearPool.sol	2022-09-08 18:16:31.186658000 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IStaticAToken.sol";
+import "../../interfaces/contracts/pool-linear/IStaticAToken.sol";
 
 import "../LinearPool.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/aave/AaveLinearPoolFactory.sol pool-linear/contracts/aave/AaveLinearPoolFactory.sol
--- pool-linear/contracts/aave/AaveLinearPoolFactory.sol	2022-09-07 19:19:28.794459700 -0400
+++ pool-linear/contracts/aave/AaveLinearPoolFactory.sol	2022-09-08 18:16:31.192655500 -0400
@@ -15,20 +15,25 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerQueries.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerQueries.sol";
+import "../../interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Create2.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Create2.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./AaveLinearPool.sol";
 import "./AaveLinearPoolRebalancer.sol";
 
-contract AaveLinearPoolFactory is ILastCreatedPoolFactory, BasePoolFactory, ReentrancyGuard, FactoryWidePauseWindow {
+contract AaveLinearPoolFactory is
+    ILastCreatedPoolFactory,
+    BasePoolSplitCodeFactory,
+    ReentrancyGuard,
+    FactoryWidePauseWindow
+{
     // Used for create2 deployments
     uint256 private _nextRebalancerSalt;
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol
--- pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol	2022-08-15 14:38:45.672785400 -0400
+++ pool-linear/contracts/aave/AaveLinearPoolRebalancer.sol	2022-09-08 18:16:31.215654300 -0400
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IStaticAToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol";
+import "../../interfaces/contracts/pool-linear/IStaticAToken.sol";
+import "../../interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol";
 
 import "../LinearPoolRebalancer.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol
--- pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol	2022-08-15 14:38:45.698062400 -0400
+++ pool-linear/contracts/button-wood/UnbuttonAaveLinearPool.sol	2022-09-08 18:16:31.239656800 -0400
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IUnbuttonToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IAToken.sol";
+import "../../interfaces/contracts/pool-linear/IUnbuttonToken.sol";
+import "../../interfaces/contracts/pool-linear/IAToken.sol";
 
 import "../LinearPool.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol
--- pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol	2022-09-07 19:19:28.811461800 -0400
+++ pool-linear/contracts/button-wood/UnbuttonAaveLinearPoolFactory.sol	2022-09-08 18:16:31.263656200 -0400
@@ -15,17 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./UnbuttonAaveLinearPool.sol";
 
-contract UnbuttonAaveLinearPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
-    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(UnbuttonAaveLinearPool).creationCode)
-    {
+contract UnbuttonAaveLinearPoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    constructor(IVault vault) BasePoolSplitCodeFactory(vault, type(UnbuttonAaveLinearPool).creationCode) {
         // solhint-disable-previous-line no-empty-blocks
     }
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/erc4626/ERC4626LinearPool.sol pool-linear/contracts/erc4626/ERC4626LinearPool.sol
--- pool-linear/contracts/erc4626/ERC4626LinearPool.sol	2022-08-15 14:38:45.742753600 -0400
+++ pool-linear/contracts/erc4626/ERC4626LinearPool.sol	2022-09-08 18:16:31.281659800 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IERC4626.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "../LinearPool.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol
--- pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol	2022-09-07 19:19:28.825462100 -0400
+++ pool-linear/contracts/erc4626/ERC4626LinearPoolFactory.sol	2022-09-08 18:16:31.303655200 -0400
@@ -15,17 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./ERC4626LinearPool.sol";
 
-contract ERC4626LinearPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
-    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(ERC4626LinearPool).creationCode)
-    {
+contract ERC4626LinearPoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    constructor(IVault vault) BasePoolSplitCodeFactory(vault, type(ERC4626LinearPool).creationCode) {
         // solhint-disable-previous-line no-empty-blocks
     }
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/test/MockAaveAMPLToken.sol pool-linear/contracts/test/MockAaveAMPLToken.sol
--- pool-linear/contracts/test/MockAaveAMPLToken.sol	2022-08-15 14:38:45.802384200 -0400
+++ pool-linear/contracts/test/MockAaveAMPLToken.sol	2022-09-08 18:16:31.324659900 -0400
@@ -16,7 +16,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IAToken.sol";
+import "../../interfaces/contracts/pool-linear/IAToken.sol";
 
 import "./MockUnbuttonERC20.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/test/MockERC4626Token.sol pool-linear/contracts/test/MockERC4626Token.sol
--- pool-linear/contracts/test/MockERC4626Token.sol	2022-08-15 14:38:45.816388900 -0400
+++ pool-linear/contracts/test/MockERC4626Token.sol	2022-09-08 18:16:31.344655400 -0400
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IERC4626.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/test/TestToken.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 contract MockERC4626Token is TestToken, IERC4626 {
     using FixedPoint for uint256;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/test/MockLinearPool.sol pool-linear/contracts/test/MockLinearPool.sol
--- pool-linear/contracts/test/MockLinearPool.sol	2022-09-07 19:19:28.851465100 -0400
+++ pool-linear/contracts/test/MockLinearPool.sol	2022-09-08 18:16:31.369655500 -0400
@@ -51,10 +51,6 @@
         // solhint-disable-previous-line no-empty-blocks
     }
 
-    function setTotalSupply(uint256 value) external {
-        _setTotalSupply(value);
-    }
-
     function getScalingFactor(IERC20 token) external view returns (uint256) {
         return _scalingFactor(token);
     }
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/test/MockStaticAToken.sol pool-linear/contracts/test/MockStaticAToken.sol
--- pool-linear/contracts/test/MockStaticAToken.sol	2022-08-15 14:38:45.895547400 -0400
+++ pool-linear/contracts/test/MockStaticAToken.sol	2022-09-08 18:16:31.390655900 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IStaticAToken.sol";
+import "../../interfaces/contracts/pool-linear/IStaticAToken.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol";
+import "../../solidity-utils/contracts/test/TestToken.sol";
 
 contract MockStaticAToken is TestToken, IStaticAToken, ILendingPool {
     uint256 private _rate = 1e27;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-linear/contracts/test/MockUnbuttonERC20.sol pool-linear/contracts/test/MockUnbuttonERC20.sol
--- pool-linear/contracts/test/MockUnbuttonERC20.sol	2022-08-15 14:38:45.910189700 -0400
+++ pool-linear/contracts/test/MockUnbuttonERC20.sol	2022-09-08 18:16:31.401655300 -0400
@@ -16,10 +16,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IButtonWrapper.sol";
+import "../../interfaces/contracts/pool-linear/IButtonWrapper.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 contract MockUnbuttonERC20 is ERC20, IButtonWrapper {
     using SafeERC20 for IERC20;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/ComposableStablePool.sol pool-stable/contracts/ComposableStablePool.sol
--- pool-stable/contracts/ComposableStablePool.sol	2022-09-08 16:57:42.324515300 -0400
+++ pool-stable/contracts/ComposableStablePool.sol	2022-09-08 18:27:00.891624000 -0400
@@ -15,26 +15,25 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-stable/StablePoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
-
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../interfaces/contracts/pool-stable/StablePoolUserData.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
+
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+
+// import "../../pool-utils/contracts/BaseGeneralPool.sol";
+import "../../pool-utils/contracts/BaseGeneralPool.sol";
+import "../../pool-utils/contracts/rates/PriceRateCache.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/BaseGeneralPool.sol";
-import "@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol";
-
-import "./ComposableStablePoolStorage.sol";
-import "./ComposableStablePoolRates.sol";
 import "./ComposableStablePoolStorage.sol";
 import "./ComposableStablePoolRates.sol";
 import "./ComposableStablePoolProtocolFees.sol";
 import "./StablePoolAmplification.sol";
-import "./StableMath.sol";
+import "../../../harnesses/StableMathHarness.sol";
 
 /**
  * @dev StablePool with preminted BPT and rate providers for each token, allowing for e.g. wrapped tokens with a known
@@ -308,10 +307,16 @@
         bool isGivenIn = swapRequest.kind == IVault.SwapKind.GIVEN_IN;
 
         _upscaleArray(registeredBalances, scalingFactors);
-        swapRequest.amount = _upscale(
-            swapRequest.amount,
-            scalingFactors[isGivenIn ? registeredIndexIn : registeredIndexOut]
-        );
+        if (isGivenIn)
+            swapRequest.amount = _upscale(
+                swapRequest.amount,
+                scalingFactors[registeredIndexIn]
+            );
+        else
+            swapRequest.amount = _upscale(
+                swapRequest.amount,
+                scalingFactors[registeredIndexOut]
+            );
 
         (
             uint256 preJoinExitSupply,
@@ -646,26 +651,37 @@
         ) = _beforeJoinExit(registeredBalances);
 
 
-            function(uint256[] memory, uint256, uint256, uint256, uint256[] memory, bytes memory)
-                internal
-                view
-                returns (uint256, uint256[] memory) _doJoinOrExit
-         = (isJoin ? _doJoin : _doExit);
-
-        (uint256 bptAmount, uint256[] memory amountsDelta) = _doJoinOrExit(
-            balances,
-            currentAmp,
-            preJoinExitSupply,
-            preJoinExitInvariant,
-            scalingFactors,
-            userData
-        );
 
+        uint256 bptAmount;
+        uint256[] memory amountsDelta;
+        if (isJoin) {
+            (bptAmount, amountsDelta) = _doJoin(
+                balances,
+                currentAmp,
+                preJoinExitSupply,
+                preJoinExitInvariant,
+                scalingFactors,
+                userData
+            );
+        } else {
+            (bptAmount, amountsDelta) = _doExit(
+                balances,
+                currentAmp,
+                preJoinExitSupply,
+                preJoinExitInvariant,
+                scalingFactors,
+                userData
+            );
+        }
         // Unlike joinswaps, explicit joins do not mutate balances into the post join-exit balances so we must perform
         // this mutation here.
-        function(uint256, uint256) internal pure returns (uint256) _addOrSub = isJoin ? FixedPoint.add : FixedPoint.sub;
-        _mutateAmounts(balances, amountsDelta, _addOrSub);
-        uint256 postJoinExitSupply = _addOrSub(preJoinExitSupply, bptAmount);
+                // function(uint256, uint256) internal pure returns (uint256) _addOrSub = isJoin ? FixedPoint.add : FixedPoint.sub;
+        _mutateAmounts(balances, amountsDelta, isJoin);
+        uint256 postJoinExitSupply;
+        if (isJoin)
+            postJoinExitSupply = FixedPoint.add(preJoinExitSupply, bptAmount);
+        else
+            postJoinExitSupply = FixedPoint.sub(preJoinExitSupply, bptAmount);
 
         // Pass in the post-join balances to reset the protocol fee basis.
         // We are minting bptAmount, increasing the total (and virtual) supply post-join
@@ -1113,13 +1129,16 @@
     function _mutateAmounts(
         uint256[] memory toMutate,
         uint256[] memory arguments,
-        function(uint256, uint256) pure returns (uint256) mutation
+        bool isJoin
     ) private pure {
         uint256 length = toMutate.length;
         InputHelpers.ensureInputLengthMatch(length, arguments.length);
 
         for (uint256 i = 0; i < length; ++i) {
-            toMutate[i] = mutation(toMutate[i], arguments[i]);
+            if (isJoin) 
+                toMutate[i] = FixedPoint.add(toMutate[i], arguments[i]);
+            else
+                toMutate[i] = FixedPoint.sub(toMutate[i], arguments[i]);
         }
     }
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/ComposableStablePool.sol.orig pool-stable/contracts/ComposableStablePool.sol.orig
--- pool-stable/contracts/ComposableStablePool.sol.orig	1969-12-31 19:00:00.000000000 -0500
+++ pool-stable/contracts/ComposableStablePool.sol.orig	2022-09-08 18:16:31.454656100 -0400
@@ -0,0 +1,1148 @@
+// SPDX-License-Identifier: GPL-3.0-or-later
+// This program is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+pragma solidity ^0.7.0;
+pragma experimental ABIEncoderV2;
+
+import "@balancer-labs/v2-interfaces/contracts/pool-stable/StablePoolUserData.sol";
+import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
+
+import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+
+import "@balancer-labs/v2-pool-utils/contracts/BaseGeneralPool.sol";
+import "@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol";
+
+import "./ComposableStablePoolStorage.sol";
+import "./ComposableStablePoolRates.sol";
+import "./ComposableStablePoolStorage.sol";
+import "./ComposableStablePoolRates.sol";
+import "./ComposableStablePoolProtocolFees.sol";
+import "./StablePoolAmplification.sol";
+import "./StableMath.sol";
+
+/**
+ * @dev StablePool with preminted BPT and rate providers for each token, allowing for e.g. wrapped tokens with a known
+ * price ratio, such as Compound's cTokens.
+ *
+ * BPT is preminted on Pool initialization and registered as one of the Pool's tokens, allowing for swaps to behave as
+ * single-token joins or exits (by swapping a token for BPT). We also support regular joins and exits, which can mint
+ * and burn BPT.
+ *
+ * Preminted BPT is deposited in the Vault as the initial balance of the Pool, and doesn't belong to any entity until
+ * transferred out of the Pool. The Pool's arithmetic behaves as if it didn't exist, and the BPT total supply is not
+ * a useful value: we rely on the 'virtual supply' (how much BPT is actually owned outside the Vault) instead.
+ */
+contract ComposableStablePool is
+    IRateProvider,
+    BaseGeneralPool,
+    StablePoolAmplification,
+    ComposableStablePoolRates,
+    ComposableStablePoolProtocolFees
+{
+    using FixedPoint for uint256;
+    using PriceRateCache for bytes32;
+    using StablePoolUserData for bytes;
+    using BasePoolUserData for bytes;
+
+    // The maximum imposed by the Vault, which stores balances in a packed format, is 2**(112) - 1.
+    // We are preminting half of that value (rounded up).
+    uint256 private constant _PREMINTED_TOKEN_BALANCE = 2**(111);
+
+    // The constructor arguments are received in a struct to work around stack-too-deep issues
+    struct NewPoolParams {
+        IVault vault;
+        IProtocolFeePercentagesProvider protocolFeeProvider;
+        string name;
+        string symbol;
+        IERC20[] tokens;
+        IRateProvider[] rateProviders;
+        uint256[] tokenRateCacheDurations;
+        bool[] exemptFromYieldProtocolFeeFlags;
+        uint256 amplificationParameter;
+        uint256 swapFeePercentage;
+        uint256 pauseWindowDuration;
+        uint256 bufferPeriodDuration;
+        address owner;
+    }
+
+    constructor(NewPoolParams memory params)
+        BasePool(
+            params.vault,
+            IVault.PoolSpecialization.GENERAL,
+            params.name,
+            params.symbol,
+            _insertSorted(params.tokens, IERC20(this)),
+            new address[](params.tokens.length + 1),
+            params.swapFeePercentage,
+            params.pauseWindowDuration,
+            params.bufferPeriodDuration,
+            params.owner
+        )
+        StablePoolAmplification(params.amplificationParameter)
+        ComposableStablePoolStorage(_extractStorageParams(params))
+        ComposableStablePoolRates(_extractRatesParams(params))
+        ProtocolFeeCache(params.protocolFeeProvider, ProtocolFeeCache.DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL)
+    {
+        // solhint-disable-previous-line no-empty-blocks
+    }
+
+    // Translate parameters to avoid stack-too-deep issues in the constructor
+    function _extractRatesParams(NewPoolParams memory params)
+        private
+        pure
+        returns (ComposableStablePoolRates.RatesParams memory)
+    {
+        return
+            ComposableStablePoolRates.RatesParams({
+                tokens: params.tokens,
+                rateProviders: params.rateProviders,
+                tokenRateCacheDurations: params.tokenRateCacheDurations
+            });
+    }
+
+    // Translate parameters to avoid stack-too-deep issues in the constructor
+    function _extractStorageParams(NewPoolParams memory params)
+        private
+        view
+        returns (ComposableStablePoolStorage.StorageParams memory)
+    {
+        return
+            ComposableStablePoolStorage.StorageParams({
+                registeredTokens: _insertSorted(params.tokens, IERC20(this)),
+                tokenRateProviders: params.rateProviders,
+                exemptFromYieldProtocolFeeFlags: params.exemptFromYieldProtocolFeeFlags
+            });
+    }
+
+    /**
+     * @notice Return the minimum BPT balance, required to avoid minimum token balances.
+     * @dev This amount is minted and immediately burned on pool initialization, so that the total supply
+     * (and therefore post-exit token balances), can never be zero. This keeps the math well-behaved when
+     * liquidity is low. (It also provides an easy way to check whether a pool has been initialized, to
+     * ensure this is only done once.)
+     */
+    function getMinimumBpt() external pure returns (uint256) {
+        return _getMinimumBpt();
+    }
+
+    // BasePool hook
+
+    /**
+     * @dev Override base pool hook invoked before any swap, join, or exit to ensure rates are updated before
+     * the operation.
+     */
+    function _beforeSwapJoinExit() internal override {
+        super._beforeSwapJoinExit();
+
+        // Before the scaling factors are read, we must update the cached rates, as those will be used to compute the
+        // scaling factors.
+        // Note that this is not done in a recovery mode exit (since _beforeSwapjoinExit() is not called under those
+        // conditions), but this is fine as recovery mode exits are unaffected by scaling factors anyway.
+        _cacheTokenRatesIfNecessary();
+    }
+
+    // Swap Hooks
+
+    /**
+     * @dev Override this hook called by the base class `onSwap`, to check whether we are doing a regular swap,
+     * or a swap involving BPT, which is equivalent to a single token join or exit. Since one of the Pool's
+     * tokens is the preminted BPT, we need to handle swaps where BPT is involved separately.
+     *
+     * At this point, the balances are unscaled. The indices are coming from the Vault, so they are indices into
+     * the array of registered tokens (including BPT).
+     *
+     * If this is a swap involving BPT, call `_swapWithBpt`, which computes the amountOut using the swapFeePercentage
+     * and charges protocol fees, in the same manner as single token join/exits. Otherwise, perform the default
+     * processing for a regular swap.
+     */
+    function _swapGivenIn(
+        SwapRequest memory swapRequest,
+        uint256[] memory registeredBalances,
+        uint256 registeredIndexIn,
+        uint256 registeredIndexOut,
+        uint256[] memory scalingFactors
+    ) internal virtual override returns (uint256) {
+        return
+            (swapRequest.tokenIn == IERC20(this) || swapRequest.tokenOut == IERC20(this))
+                ? _swapWithBpt(swapRequest, registeredBalances, registeredIndexIn, registeredIndexOut, scalingFactors)
+                : super._swapGivenIn(
+                    swapRequest,
+                    registeredBalances,
+                    registeredIndexIn,
+                    registeredIndexOut,
+                    scalingFactors
+                );
+    }
+
+    /**
+     * @dev Override this hook called by the base class `onSwap`, to check whether we are doing a regular swap,
+     * or a swap involving BPT, which is equivalent to a single token join or exit. Since one of the Pool's
+     * tokens is the preminted BPT, we need to handle swaps where BPT is involved separately.
+     *
+     * At this point, the balances are unscaled. The indices and balances are coming from the Vault, so they
+     * refer to the full set of registered tokens (including BPT).
+     *
+     * If this is a swap involving BPT, call `_swapWithBpt`, which computes the amountOut using the swapFeePercentage
+     * and charges protocol fees, in the same manner as single token join/exits. Otherwise, perform the default
+     * processing for a regular swap.
+     */
+    function _swapGivenOut(
+        SwapRequest memory swapRequest,
+        uint256[] memory registeredBalances,
+        uint256 registeredIndexIn,
+        uint256 registeredIndexOut,
+        uint256[] memory scalingFactors
+    ) internal virtual override returns (uint256) {
+        return
+            (swapRequest.tokenIn == IERC20(this) || swapRequest.tokenOut == IERC20(this))
+                ? _swapWithBpt(swapRequest, registeredBalances, registeredIndexIn, registeredIndexOut, scalingFactors)
+                : super._swapGivenOut(
+                    swapRequest,
+                    registeredBalances,
+                    registeredIndexIn,
+                    registeredIndexOut,
+                    scalingFactors
+                );
+    }
+
+    /**
+     * @dev This is called from the base class `_swapGivenIn`, so at this point the amount has been adjusted
+     * for swap fees, and balances have had scaling applied. This will only be called for regular (non-BPT) swaps,
+     * so forward to `onRegularSwap`.
+     */
+    function _onSwapGivenIn(
+        SwapRequest memory request,
+        uint256[] memory registeredBalances,
+        uint256 registeredIndexIn,
+        uint256 registeredIndexOut
+    ) internal virtual override returns (uint256) {
+        return
+            _onRegularSwap(
+                true, // given in
+                request.amount,
+                registeredBalances,
+                registeredIndexIn,
+                registeredIndexOut
+            );
+    }
+
+    /**
+     * @dev This is called from the base class `_swapGivenOut`, so at this point the amount has been adjusted
+     * for swap fees, and balances have had scaling applied. This will only be called for regular (non-BPT) swaps,
+     * so forward to `onRegularSwap`.
+     */
+    function _onSwapGivenOut(
+        SwapRequest memory request,
+        uint256[] memory registeredBalances,
+        uint256 registeredIndexIn,
+        uint256 registeredIndexOut
+    ) internal virtual override returns (uint256) {
+        return
+            _onRegularSwap(
+                false, // given out
+                request.amount,
+                registeredBalances,
+                registeredIndexIn,
+                registeredIndexOut
+            );
+    }
+
+    /**
+     * @dev Perform a swap between non-BPT tokens. Scaling and fee adjustments have been performed upstream, so
+     * all we need to do here is calculate the price quote, depending on the direction of the swap.
+     */
+    function _onRegularSwap(
+        bool isGivenIn,
+        uint256 amountGiven,
+        uint256[] memory registeredBalances,
+        uint256 registeredIndexIn,
+        uint256 registeredIndexOut
+    ) private view returns (uint256) {
+        // Adjust indices and balances for BPT token
+        uint256[] memory balances = _dropBptItem(registeredBalances);
+        uint256 indexIn = _skipBptIndex(registeredIndexIn);
+        uint256 indexOut = _skipBptIndex(registeredIndexOut);
+
+        (uint256 currentAmp, ) = _getAmplificationParameter();
+        uint256 invariant = StableMath._calculateInvariant(currentAmp, balances);
+
+        if (isGivenIn) {
+            return StableMath._calcOutGivenIn(currentAmp, balances, indexIn, indexOut, amountGiven, invariant);
+        } else {
+            return StableMath._calcInGivenOut(currentAmp, balances, indexIn, indexOut, amountGiven, invariant);
+        }
+    }
+
+    /**
+     * @dev Perform a swap involving the BPT token, equivalent to a single-token join or exit. As with the standard
+     * joins and swaps, we first pay any protocol fees pending from swaps that occurred since the previous join or
+     * exit, then perform the operation (joinSwap or exitSwap), and finally store the "post operation" invariant and
+     * amp, which establishes the new basis for protocol fees.
+     *
+     * At this point, the scaling factors (including rates) have been computed by the base class, but not yet applied
+     * to the balances.
+     */
+    function _swapWithBpt(
+        SwapRequest memory swapRequest,
+        uint256[] memory registeredBalances,
+        uint256 registeredIndexIn,
+        uint256 registeredIndexOut,
+        uint256[] memory scalingFactors
+    ) private returns (uint256) {
+        bool isGivenIn = swapRequest.kind == IVault.SwapKind.GIVEN_IN;
+
+        _upscaleArray(registeredBalances, scalingFactors);
+        swapRequest.amount = _upscale(
+            swapRequest.amount,
+            scalingFactors[isGivenIn ? registeredIndexIn : registeredIndexOut]
+        );
+
+        (
+            uint256 preJoinExitSupply,
+            uint256[] memory balances,
+            uint256 currentAmp,
+            uint256 preJoinExitInvariant
+        ) = _beforeJoinExit(registeredBalances);
+
+        // These calls mutate `balances` so that it holds the post join-exit balances.
+        (uint256 amountCalculated, uint256 postJoinExitSupply) = registeredIndexOut == getBptIndex()
+            ? _doJoinSwap(
+                isGivenIn,
+                swapRequest.amount,
+                balances,
+                _skipBptIndex(registeredIndexIn),
+                currentAmp,
+                preJoinExitSupply,
+                preJoinExitInvariant
+            )
+            : _doExitSwap(
+                isGivenIn,
+                swapRequest.amount,
+                balances,
+                _skipBptIndex(registeredIndexOut),
+                currentAmp,
+                preJoinExitSupply,
+                preJoinExitInvariant
+            );
+
+        _updateInvariantAfterJoinExit(
+            currentAmp,
+            balances,
+            preJoinExitInvariant,
+            preJoinExitSupply,
+            postJoinExitSupply
+        );
+
+        return
+            isGivenIn
+                ? _downscaleDown(amountCalculated, scalingFactors[registeredIndexOut]) // Amount out, round down
+                : _downscaleUp(amountCalculated, scalingFactors[registeredIndexIn]); // Amount in, round up
+    }
+
+    /**
+     * @dev This mutates `balances` so that they become the post-joinswap balances. The StableMath interfaces
+     * are different depending on the swap direction, so we forward to the appropriate low-level join function.
+     */
+    function _doJoinSwap(
+        bool isGivenIn,
+        uint256 amount,
+        uint256[] memory balances,
+        uint256 indexIn,
+        uint256 currentAmp,
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant
+    ) internal view returns (uint256, uint256) {
+        return
+            isGivenIn
+                ? _joinSwapExactTokenInForBptOut(
+                    amount,
+                    balances,
+                    indexIn,
+                    currentAmp,
+                    actualSupply,
+                    preJoinExitInvariant
+                )
+                : _joinSwapExactBptOutForTokenIn(
+                    amount,
+                    balances,
+                    indexIn,
+                    currentAmp,
+                    actualSupply,
+                    preJoinExitInvariant
+                );
+    }
+
+    /**
+     * @dev Since this is a join, we know the tokenOut is BPT. Since it is GivenIn, we know the tokenIn amount,
+     * and must calculate the BPT amount out.
+     * We are moving preminted BPT out of the Vault, which increases the virtual supply.
+     */
+    function _joinSwapExactTokenInForBptOut(
+        uint256 amountIn,
+        uint256[] memory balances,
+        uint256 indexIn,
+        uint256 currentAmp,
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant
+    ) internal view returns (uint256, uint256) {
+        // The StableMath function was created with joins in mind, so it expects a full amounts array. We create an
+        // empty one and only set the amount for the token involved.
+        uint256[] memory amountsIn = new uint256[](balances.length);
+        amountsIn[indexIn] = amountIn;
+
+        uint256 bptOut = StableMath._calcBptOutGivenExactTokensIn(
+            currentAmp,
+            balances,
+            amountsIn,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+
+        balances[indexIn] = balances[indexIn].add(amountIn);
+        uint256 postJoinExitSupply = actualSupply.add(bptOut);
+
+        return (bptOut, postJoinExitSupply);
+    }
+
+    /**
+     * @dev Since this is a join, we know the tokenOut is BPT. Since it is GivenOut, we know the BPT amount,
+     * and must calculate the token amount in.
+     * We are moving preminted BPT out of the Vault, which increases the virtual supply.
+     */
+    function _joinSwapExactBptOutForTokenIn(
+        uint256 bptOut,
+        uint256[] memory balances,
+        uint256 indexIn,
+        uint256 currentAmp,
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant
+    ) internal view returns (uint256, uint256) {
+        uint256 amountIn = StableMath._calcTokenInGivenExactBptOut(
+            currentAmp,
+            balances,
+            indexIn,
+            bptOut,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+
+        balances[indexIn] = balances[indexIn].add(amountIn);
+        uint256 postJoinExitSupply = actualSupply.add(bptOut);
+
+        return (amountIn, postJoinExitSupply);
+    }
+
+    /**
+     * @dev This mutates balances so that they become the post-exitswap balances. The StableMath interfaces are
+     * different depending on the swap direction, so we forward to the appropriate low-level exit function.
+     */
+    function _doExitSwap(
+        bool isGivenIn,
+        uint256 amount,
+        uint256[] memory balances,
+        uint256 indexOut,
+        uint256 currentAmp,
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant
+    ) internal view returns (uint256, uint256) {
+        return
+            isGivenIn
+                ? _exitSwapExactBptInForTokenOut(
+                    amount,
+                    balances,
+                    indexOut,
+                    currentAmp,
+                    actualSupply,
+                    preJoinExitInvariant
+                )
+                : _exitSwapExactTokenOutForBptIn(
+                    amount,
+                    balances,
+                    indexOut,
+                    currentAmp,
+                    actualSupply,
+                    preJoinExitInvariant
+                );
+    }
+
+    /**
+     * @dev Since this is an exit, we know the tokenIn is BPT. Since it is GivenIn, we know the BPT amount,
+     * and must calculate the token amount out.
+     * We are moving BPT out of circulation and into the Vault, which decreases the virtual supply.
+     */
+    function _exitSwapExactBptInForTokenOut(
+        uint256 bptAmount,
+        uint256[] memory balances,
+        uint256 indexOut,
+        uint256 currentAmp,
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant
+    ) internal view returns (uint256, uint256) {
+        uint256 amountOut = StableMath._calcTokenOutGivenExactBptIn(
+            currentAmp,
+            balances,
+            indexOut,
+            bptAmount,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+
+        balances[indexOut] = balances[indexOut].sub(amountOut);
+        uint256 postJoinExitSupply = actualSupply.sub(bptAmount);
+
+        return (amountOut, postJoinExitSupply);
+    }
+
+    /**
+     * @dev Since this is an exit, we know the tokenIn is BPT. Since it is GivenOut, we know the token amount out,
+     * and must calculate the BPT amount in.
+     * We are moving BPT out of circulation and into the Vault, which decreases the virtual supply.
+     */
+    function _exitSwapExactTokenOutForBptIn(
+        uint256 amountOut,
+        uint256[] memory balances,
+        uint256 indexOut,
+        uint256 currentAmp,
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant
+    ) internal view returns (uint256, uint256) {
+        // The StableMath function was created with exits in mind, so it expects a full amounts array. We create an
+        // empty one and only set the amount for the token involved.
+        uint256[] memory amountsOut = new uint256[](balances.length);
+        amountsOut[indexOut] = amountOut;
+
+        uint256 bptAmount = StableMath._calcBptInGivenExactTokensOut(
+            currentAmp,
+            balances,
+            amountsOut,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+
+        balances[indexOut] = balances[indexOut].sub(amountOut);
+        uint256 postJoinExitSupply = actualSupply.sub(bptAmount);
+
+        return (bptAmount, postJoinExitSupply);
+    }
+
+    // Join Hooks
+
+    /**
+     * Since this Pool has preminted BPT which is stored in the Vault, it cannot simply be minted at construction.
+     *
+     * We take advantage of the fact that StablePools have an initialization step where BPT is minted to the first
+     * account joining them, and perform both actions at once. By minting the entire BPT supply for the initial joiner
+     * and then pulling all tokens except those due the joiner, we arrive at the desired state of the Pool holding all
+     * BPT except the joiner's.
+     */
+    function _onInitializePool(
+        bytes32,
+        address sender,
+        address,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal override returns (uint256, uint256[] memory) {
+        StablePoolUserData.JoinKind kind = userData.joinKind();
+        _require(kind == StablePoolUserData.JoinKind.INIT, Errors.UNINITIALIZED);
+
+        // AmountsIn usually does not include the BPT token; initialization is the one time it has to.
+        uint256[] memory amountsInIncludingBpt = userData.initialAmountsIn();
+        InputHelpers.ensureInputLengthMatch(amountsInIncludingBpt.length, scalingFactors.length);
+        _upscaleArray(amountsInIncludingBpt, scalingFactors);
+
+        (uint256 amp, ) = _getAmplificationParameter();
+        uint256[] memory amountsIn = _dropBptItem(amountsInIncludingBpt);
+        uint256 invariantAfterJoin = StableMath._calculateInvariant(amp, amountsIn);
+
+        // Set the initial BPT to the value of the invariant
+        uint256 bptAmountOut = invariantAfterJoin;
+
+        // BasePool will mint bptAmountOut for the sender: we then also mint the remaining BPT to make up the total
+        // supply, and have the Vault pull those tokens from the sender as part of the join.
+        // We are only minting half of the maximum value - already an amount many orders of magnitude greater than any
+        // conceivable real liquidity - to allow for minting new BPT as a result of regular joins.
+        //
+        // Note that the sender need not approve BPT for the Vault as the Vault already has infinite BPT allowance for
+        // all accounts.
+        uint256 initialBpt = _PREMINTED_TOKEN_BALANCE.sub(bptAmountOut);
+
+        _mintPoolTokens(sender, initialBpt);
+        amountsInIncludingBpt[getBptIndex()] = initialBpt;
+
+        // Initialization is still a join, so we need to do post-join work.
+        _updatePostJoinExit(amp, invariantAfterJoin);
+
+        return (bptAmountOut, amountsInIncludingBpt);
+    }
+
+    /**
+     * @dev Base pool hook called from `onJoinPool`. Forward to `onJoinExitPool` with `isJoin` set to true.
+     */
+    function _onJoinPool(
+        bytes32,
+        address,
+        address,
+        uint256[] memory registeredBalances,
+        uint256,
+        uint256,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal override returns (uint256, uint256[] memory) {
+        return _onJoinExitPool(true, registeredBalances, scalingFactors, userData);
+    }
+
+    /**
+     * @dev Base pool hook called from `onExitPool`. Forward to `onJoinExitPool` with `isJoin` set to false.
+     * Note that recovery mode exits do not call `_onExitPool`.
+     */
+    function _onExitPool(
+        bytes32,
+        address,
+        address,
+        uint256[] memory registeredBalances,
+        uint256,
+        uint256,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal override returns (uint256, uint256[] memory) {
+        return _onJoinExitPool(false, registeredBalances, scalingFactors, userData);
+    }
+
+    /**
+     * @dev Pay protocol fees before the operation, and call `_updateInvariantAfterJoinExit` afterward, to establish
+     * the new basis for protocol fees.
+     */
+    function _onJoinExitPool(
+        bool isJoin,
+        uint256[] memory registeredBalances,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal returns (uint256, uint256[] memory) {
+        (
+            uint256 preJoinExitSupply,
+            uint256[] memory balances,
+            uint256 currentAmp,
+            uint256 preJoinExitInvariant
+        ) = _beforeJoinExit(registeredBalances);
+
+
+            function(uint256[] memory, uint256, uint256, uint256, uint256[] memory, bytes memory)
+                internal
+                view
+                returns (uint256, uint256[] memory) _doJoinOrExit
+         = (isJoin ? _doJoin : _doExit);
+
+        (uint256 bptAmount, uint256[] memory amountsDelta) = _doJoinOrExit(
+            balances,
+            currentAmp,
+            preJoinExitSupply,
+            preJoinExitInvariant,
+            scalingFactors,
+            userData
+        );
+
+        // Unlike joinswaps, explicit joins do not mutate balances into the post join-exit balances so we must perform
+        // this mutation here.
+        function(uint256, uint256) internal pure returns (uint256) _addOrSub = isJoin ? FixedPoint.add : FixedPoint.sub;
+        _mutateAmounts(balances, amountsDelta, _addOrSub);
+        uint256 postJoinExitSupply = _addOrSub(preJoinExitSupply, bptAmount);
+
+        // Pass in the post-join balances to reset the protocol fee basis.
+        // We are minting bptAmount, increasing the total (and virtual) supply post-join
+        _updateInvariantAfterJoinExit(
+            currentAmp,
+            balances,
+            preJoinExitInvariant,
+            preJoinExitSupply,
+            postJoinExitSupply
+        );
+
+        // For clarity and simplicity, arrays used and computed in lower level functions do not include BPT.
+        // But the amountsIn array passed back to the Vault must include BPT, so we add it back in here.
+        return (bptAmount, _addBptItem(amountsDelta, 0));
+    }
+
+    /**
+     * @dev Pay any due protocol fees and calculate values necessary for performing the join/exit.
+     */
+    function _beforeJoinExit(uint256[] memory registeredBalances)
+        internal
+        returns (
+            uint256,
+            uint256[] memory,
+            uint256,
+            uint256
+        )
+    {
+        (uint256 lastJoinExitAmp, uint256 lastPostJoinExitInvariant) = getLastJoinExitData();
+        (
+            uint256 preJoinExitSupply,
+            uint256[] memory balances,
+            uint256 oldAmpPreJoinExitInvariant
+        ) = _payProtocolFeesBeforeJoinExit(registeredBalances, lastJoinExitAmp, lastPostJoinExitInvariant);
+
+        // If the amplification factor is the same as it was during the last join/exit then we can reuse the
+        // value calculated using the "old" amplification factor. If not, then we have to calculate this now.
+        (uint256 currentAmp, ) = _getAmplificationParameter();
+        uint256 preJoinExitInvariant = currentAmp == lastJoinExitAmp
+            ? oldAmpPreJoinExitInvariant
+            : StableMath._calculateInvariant(currentAmp, balances);
+
+        return (preJoinExitSupply, balances, currentAmp, preJoinExitInvariant);
+    }
+
+    /**
+     * @dev Support single- and multi-token joins, but not explicit proportional joins.
+     */
+    function _doJoin(
+        uint256[] memory balances,
+        uint256 currentAmp,
+        uint256 preJoinExitSupply,
+        uint256 preJoinExitInvariant,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal view returns (uint256, uint256[] memory) {
+        StablePoolUserData.JoinKind kind = userData.joinKind();
+        if (kind == StablePoolUserData.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {
+            return
+                _joinExactTokensInForBPTOut(
+                    preJoinExitSupply,
+                    preJoinExitInvariant,
+                    currentAmp,
+                    balances,
+                    scalingFactors,
+                    userData
+                );
+        } else if (kind == StablePoolUserData.JoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT) {
+            return _joinTokenInForExactBPTOut(preJoinExitSupply, preJoinExitInvariant, currentAmp, balances, userData);
+        } else {
+            _revert(Errors.UNHANDLED_JOIN_KIND);
+        }
+    }
+
+    /**
+     * @dev Multi-token join. Joins with proportional amounts will pay no protocol fees.
+     */
+    function _joinExactTokensInForBPTOut(
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant,
+        uint256 currentAmp,
+        uint256[] memory balances,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) private view returns (uint256, uint256[] memory) {
+        (uint256[] memory amountsIn, uint256 minBPTAmountOut) = userData.exactTokensInForBptOut();
+        InputHelpers.ensureInputLengthMatch(balances.length, amountsIn.length);
+
+        // The user-provided amountsIn is unscaled, so we address that.
+        _upscaleArray(amountsIn, _dropBptItem(scalingFactors));
+
+        uint256 bptAmountOut = StableMath._calcBptOutGivenExactTokensIn(
+            currentAmp,
+            balances,
+            amountsIn,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+
+        _require(bptAmountOut >= minBPTAmountOut, Errors.BPT_OUT_MIN_AMOUNT);
+
+        return (bptAmountOut, amountsIn);
+    }
+
+    /**
+     * @dev Single-token join, equivalent to swapping a pool token for BPT.
+     */
+    function _joinTokenInForExactBPTOut(
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant,
+        uint256 currentAmp,
+        uint256[] memory balances,
+        bytes memory userData
+    ) private view returns (uint256, uint256[] memory) {
+        // Since this index is sent in from the user, we interpret it as NOT including the BPT token.
+        (uint256 bptAmountOut, uint256 tokenIndex) = userData.tokenInForExactBptOut();
+        // Note that there is no maximum amountIn parameter: this is handled by `IVault.joinPool`.
+
+        // Balances are passed through from the Vault hook, and include BPT
+        _require(tokenIndex < balances.length, Errors.OUT_OF_BOUNDS);
+
+        // We join with a single token, so initialize amountsIn with zeros.
+        uint256[] memory amountsIn = new uint256[](balances.length);
+
+        // And then assign the result to the selected token.
+        amountsIn[tokenIndex] = StableMath._calcTokenInGivenExactBptOut(
+            currentAmp,
+            balances,
+            tokenIndex,
+            bptAmountOut,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+
+        return (bptAmountOut, amountsIn);
+    }
+
+    // Exit Hooks
+
+    /**
+     * @dev Support single- and multi-token exits, but not explicit proportional exits, which are
+     * supported through Recovery Mode.
+     */
+    function _doExit(
+        uint256[] memory balances,
+        uint256 currentAmp,
+        uint256 preJoinExitSupply,
+        uint256 preJoinExitInvariant,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) internal view returns (uint256, uint256[] memory) {
+        StablePoolUserData.ExitKind kind = userData.exitKind();
+        if (kind == StablePoolUserData.ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT) {
+            return
+                _exitBPTInForExactTokensOut(
+                    preJoinExitSupply,
+                    preJoinExitInvariant,
+                    currentAmp,
+                    balances,
+                    scalingFactors,
+                    userData
+                );
+        } else if (kind == StablePoolUserData.ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT) {
+            return _exitExactBPTInForTokenOut(preJoinExitSupply, preJoinExitInvariant, currentAmp, balances, userData);
+        } else {
+            _revert(Errors.UNHANDLED_EXIT_KIND);
+        }
+    }
+
+    /**
+     * @dev Multi-token exit. Proportional exits will pay no protocol fees.
+     */
+    function _exitBPTInForExactTokensOut(
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant,
+        uint256 currentAmp,
+        uint256[] memory balances,
+        uint256[] memory scalingFactors,
+        bytes memory userData
+    ) private view returns (uint256, uint256[] memory) {
+        (uint256[] memory amountsOut, uint256 maxBPTAmountIn) = userData.bptInForExactTokensOut();
+        InputHelpers.ensureInputLengthMatch(amountsOut.length, balances.length);
+
+        // The user-provided amountsIn is unscaled, so we address that.
+        _upscaleArray(amountsOut, _dropBptItem(scalingFactors));
+
+        uint256 bptAmountIn = StableMath._calcBptInGivenExactTokensOut(
+            currentAmp,
+            balances,
+            amountsOut,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+        _require(bptAmountIn <= maxBPTAmountIn, Errors.BPT_IN_MAX_AMOUNT);
+
+        return (bptAmountIn, amountsOut);
+    }
+
+    /**
+     * @dev Single-token exit, equivalent to swapping BPT for a pool token.
+     */
+    function _exitExactBPTInForTokenOut(
+        uint256 actualSupply,
+        uint256 preJoinExitInvariant,
+        uint256 currentAmp,
+        uint256[] memory balances,
+        bytes memory userData
+    ) private view returns (uint256, uint256[] memory) {
+        // Since this index is sent in from the user, we interpret it as NOT including the BPT token
+        (uint256 bptAmountIn, uint256 tokenIndex) = userData.exactBptInForTokenOut();
+        // Note that there is no minimum amountOut parameter: this is handled by `IVault.exitPool`.
+
+        _require(tokenIndex < balances.length, Errors.OUT_OF_BOUNDS);
+
+        // We exit in a single token, so initialize amountsOut with zeros
+        uint256[] memory amountsOut = new uint256[](balances.length);
+
+        // And then assign the result to the selected token.
+        amountsOut[tokenIndex] = StableMath._calcTokenOutGivenExactBptIn(
+            currentAmp,
+            balances,
+            tokenIndex,
+            bptAmountIn,
+            actualSupply,
+            preJoinExitInvariant,
+            getSwapFeePercentage()
+        );
+
+        return (bptAmountIn, amountsOut);
+    }
+
+    /**
+     * @dev We cannot use the default RecoveryMode implementation here, since we need to account for the BPT token.
+     */
+    function _doRecoveryModeExit(
+        uint256[] memory registeredBalances,
+        uint256,
+        bytes memory userData
+    ) internal virtual override returns (uint256, uint256[] memory) {
+        // Since this Pool uses preminted BPT, we need to replace the total supply with the virtual total supply, and
+        // adjust the balances array by removing BPT from it.
+        // Note that we don't compute the actual supply, which would require a lot of complex calculations and
+        // interactions with external components. This is fine because virtual and actual supply are the same while
+        // recovery mode is enabled (since all protocol fees are forfeit and the fee percentages zeroed out).
+        (uint256 virtualSupply, uint256[] memory balances) = _dropBptItemFromBalances(registeredBalances);
+
+        (uint256 bptAmountIn, uint256[] memory amountsOut) = super._doRecoveryModeExit(
+            balances,
+            virtualSupply,
+            userData
+        );
+
+        // The vault requires an array including BPT, so add it back in here.
+        return (bptAmountIn, _addBptItem(amountsOut, 0));
+    }
+
+    // BPT rate
+
+    /**
+     * Many functions require accessing multiple internal values that might at first seem unrelated, but are actually
+     * quite intertwined, and computed at the same time for optimal performance (since calculating some of them also
+     * yields intermediate results useful for other queries). This helper function returns many of these values,
+     * greatly reducing bytecode size.
+     *
+     * The return values are:
+     *  @return balances - The current upscaled token balances (not including BPT)
+     *  @return virtualSupply - The Pool's virtual supply
+     *  @return protocolFeeAmount - The amount of unpaid protocol fees in BPT
+     *  @return lastJoinExitAmp - The Pool's amplification factor at the last join or exit operation
+     *  @return currentInvariantWithLastJoinExitAmp - The invariant of the current balances, calculated using the
+     *  amplification factor at the last join or exit operation.
+     */
+    function _getSupplyAndFeesData()
+        private
+        view
+        returns (
+            uint256[] memory balances,
+            uint256 virtualSupply,
+            uint256 protocolFeeAmount,
+            uint256 lastJoinExitAmp,
+            uint256 currentInvariantWithLastJoinExitAmp
+        )
+    {
+        // First we query the Vault for current registered balances (which includes preminted BPT), to then calculate
+        // the current scaled balances and virtual supply.
+        (, uint256[] memory registeredBalances, ) = getVault().getPoolTokens(getPoolId());
+        _upscaleArray(registeredBalances, _scalingFactors());
+        (virtualSupply, balances) = _dropBptItemFromBalances(registeredBalances);
+
+        // Now we need to calculate any BPT due in the form of protocol fees. This requires data from the last join or
+        // exit operation. `lastJoinExitAmp` can be useful in the scenario in which the amplification factor has not
+        // changed, meaning this old value is equal to the current value.
+        uint256 lastPostJoinExitInvariant;
+        (lastJoinExitAmp, lastPostJoinExitInvariant) = getLastJoinExitData();
+
+        // Computing the protocol ownership percentage also yields the invariant using the old amplification factor. If
+        // it has not changed, then this is also the current invariant.
+        uint256 expectedProtocolOwnershipPercentage;
+        (
+            expectedProtocolOwnershipPercentage,
+            currentInvariantWithLastJoinExitAmp
+        ) = _getProtocolPoolOwnershipPercentage(balances, lastJoinExitAmp, lastPostJoinExitInvariant);
+
+        protocolFeeAmount = ProtocolFees.bptForPoolOwnershipPercentage(
+            virtualSupply,
+            expectedProtocolOwnershipPercentage
+        );
+    }
+
+    /**
+     * @dev This function returns the appreciation of BPT relative to the underlying tokens, as an 18 decimal fixed
+     * point number. It is simply the ratio of the invariant to the BPT supply.
+     *
+     * The total supply is initialized to equal the invariant, so this value starts at one. During Pool operation the
+     * invariant always grows and shrinks either proportionally to the total supply (in scenarios with no price impact,
+     * e.g. proportional joins), or grows faster and shrinks more slowly than it (whenever swap fees are collected or
+     * the token rates increase). Therefore, the rate is a monotonically increasing function.
+     *
+     * WARNING: since this function reads balances directly from the Vault, it is potentially subject to manipulation
+     * via reentrancy. However, this can only happen if one of the tokens in the Pool contains some form of callback
+     * behavior in the `transferFrom` function (like ERC777 tokens do). These tokens are strictly incompatible with the
+     * Vault and Pool design, and are not safe to be used.
+     */
+    function getRate() external view virtual override returns (uint256) {
+        // We need to compute the current invariant and actual total supply. The latter includes protocol fees that have
+        // accrued but are not yet minted: in calculating these we'll actually end up fetching most of the data we need
+        // for the invariant.
+
+        (
+            uint256[] memory balances,
+            uint256 virtualSupply,
+            uint256 protocolFeeAmount,
+            uint256 lastJoinExitAmp,
+            uint256 currentInvariantWithLastJoinExitAmp
+        ) = _getSupplyAndFeesData();
+
+        // Due protocol fees will be minted at the next join or exit, so we can simply add them to the current virtual
+        // supply to get the actual supply.
+        uint256 actualTotalSupply = virtualSupply.add(protocolFeeAmount);
+
+        // All that's missing now is the invariant. We have the balances required to calculate it already, but still
+        // need the current amplification factor.
+        (uint256 currentAmp, ) = _getAmplificationParameter();
+
+        // It turns out that the process for due protocol fee calculation involves computing the current invariant,
+        // except using the amplification factor at the last join or exit. This would typically not be terribly useful,
+        // but since the amplification factor only changes rarely there is high probability of its current value being
+        // the same as it was in the last join or exit. If that is the case, then we can skip the costly invariant
+        // computation altogether.
+        uint256 currentInvariant = (currentAmp == lastJoinExitAmp)
+            ? currentInvariantWithLastJoinExitAmp
+            : StableMath._calculateInvariant(currentAmp, balances);
+
+        // With the current invariant and actual total supply, we can compute the rate as a fixed-point number.
+        return currentInvariant.divDown(actualTotalSupply);
+    }
+
+    /**
+     * @dev Returns the effective BPT supply.
+     *
+     * In other pools, this would be the same as `totalSupply`, but there are two key differences here:
+     *  - this pool pre-mints BPT and holds it in the Vault as a token, and as such we need to subtract the Vault's
+     *    balance to get the total "circulating supply". This is called the 'virtualSupply'.
+     *  - the Pool owes debt to the Protocol in the form of unminted BPT, which will be minted immediately before the
+     *    next join or exit. We need to take these into account since, even if they don't yet exist, they will
+     *    effectively be included in any Pool operation that involves BPT.
+     *
+     * In the vast majority of cases, this function should be used instead of `totalSupply()`.
+     */
+    function getActualSupply() external view returns (uint256) {
+        (, uint256 virtualSupply, uint256 protocolFeeAmount, , ) = _getSupplyAndFeesData();
+        return virtualSupply.add(protocolFeeAmount);
+    }
+
+    function _beforeProtocolFeeCacheUpdate() internal override {
+        // The `getRate()` function depends on the actual supply, which in turn depends on the cached protocol fee
+        // percentages. Changing these would therefore result in the rate changing, which is not acceptable as this is a
+        // sensitive value.
+        // Because of this, we pay any due protocol fees *before* updating the cache, making it so that the new
+        // percentages only affect future operation of the Pool, and not past fees. As a result, `getRate()` is
+        // unaffected by the cached protocol fee percentages changing.
+
+        // Given that this operation is state-changing and relatively complex, we only allow it as long as the Pool is
+        // not paused.
+        _ensureNotPaused();
+
+        // We need to calculate the amount of unminted BPT that represents protocol fees to then pay those. This yields
+        // some auxiliary values that turn out to also be useful for the rest of the tasks we want to perform.
+        (
+            uint256[] memory balances,
+            ,
+            uint256 protocolFeeAmount,
+            uint256 lastJoinExitAmp,
+            uint256 currentInvariantWithLastJoinExitAmp
+        ) = _getSupplyAndFeesData();
+
+        if (protocolFeeAmount > 0) {
+            _payProtocolFees(protocolFeeAmount);
+        }
+
+        // With the fees paid, we now need to calculate the current invariant so we can store it alongside the current
+        // amplification factor, marking the Pool as free of protocol debt.
+        (uint256 currentAmp, ) = _getAmplificationParameter();
+
+        // It turns out that the process for due protocol fee calculation involves computing the current invariant,
+        // except using the amplification factor at the last join or exit. This would typically not be terribly useful,
+        // but since the amplification factor only changes rarely there is high probability of its current value being
+        // the same as it was in the last join or exit. If that is the case, then we can skip the costly invariant
+        // computation altogether.
+        uint256 currentInvariant = (currentAmp == lastJoinExitAmp)
+            ? currentInvariantWithLastJoinExitAmp
+            : StableMath._calculateInvariant(currentAmp, balances);
+
+        _updatePostJoinExit(currentAmp, currentInvariant);
+    }
+
+    function _onDisableRecoveryMode() internal override {
+        // Enabling recovery mode short-circuits protocol fee computations, forcefully returning a zero percentage,
+        // increasing the return value of `getRate()` and effectively forfeiting due protocol fees.
+
+        // Therefore, when exiting recovery mode we store the current invariant and the amplification factor used to
+        // compute it, marking the Pool as free of protocol debt. Otherwise it'd be possible for debt to be
+        // retroactively accrued, which would be incorrect and could lead to the value of `getRate` decreasing.
+
+        (, uint256[] memory registeredBalances, ) = getVault().getPoolTokens(getPoolId());
+        _upscaleArray(registeredBalances, _scalingFactors());
+        uint256[] memory balances = _dropBptItem(registeredBalances);
+
+        (uint256 currentAmp, ) = _getAmplificationParameter();
+        uint256 currentInvariant = StableMath._calculateInvariant(currentAmp, balances);
+
+        _updatePostJoinExit(currentAmp, currentInvariant);
+    }
+
+    // Helpers
+
+    /**
+     * @dev Mutates `amounts` by applying `mutation` with each entry in `arguments`.
+     *
+     * Equivalent to `amounts = amounts.map(mutation)`.
+     */
+    function _mutateAmounts(
+        uint256[] memory toMutate,
+        uint256[] memory arguments,
+        function(uint256, uint256) pure returns (uint256) mutation
+    ) private pure {
+        uint256 length = toMutate.length;
+        InputHelpers.ensureInputLengthMatch(length, arguments.length);
+
+        for (uint256 i = 0; i < length; ++i) {
+            toMutate[i] = mutation(toMutate[i], arguments[i]);
+        }
+    }
+
+    // Permissioned functions
+
+    /**
+     * @dev Inheritance rules still require us to override this in the most derived contract, even though
+     * it only calls super.
+     */
+    function _isOwnerOnlyAction(bytes32 actionId)
+        internal
+        view
+        virtual
+        override(
+            // Our inheritance pattern creates a small diamond that requires explicitly listing the parents here.
+            // Each parent calls the `super` version, so linearization ensures all implementations are called.
+            BasePool,
+            ComposableStablePoolProtocolFees,
+            StablePoolAmplification,
+            ComposableStablePoolRates
+        )
+        returns (bool)
+    {
+        return super._isOwnerOnlyAction(actionId);
+    }
+}
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/ComposableStablePoolFactory.sol pool-stable/contracts/ComposableStablePoolFactory.sol
--- pool-stable/contracts/ComposableStablePoolFactory.sol	2022-09-07 19:19:28.991465200 -0400
+++ pool-stable/contracts/ComposableStablePoolFactory.sol	2022-09-08 18:16:31.480303200 -0400
@@ -15,18 +15,21 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./ComposableStablePool.sol";
 
-contract ComposableStablePoolFactory is BasePoolFactory, FactoryWidePauseWindow {
+contract ComposableStablePoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    IProtocolFeePercentagesProvider private _protocolFeeProvider;
+
     constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(ComposableStablePool).creationCode)
+        BasePoolSplitCodeFactory(vault, type(ComposableStablePool).creationCode)
     {
-        // solhint-disable-previous-line no-empty-blocks
+        _protocolFeeProvider = protocolFeeProvider;
     }
 
     /**
@@ -50,7 +53,7 @@
                     abi.encode(
                         ComposableStablePool.NewPoolParams({
                             vault: getVault(),
-                            protocolFeeProvider: getProtocolFeePercentagesProvider(),
+                            protocolFeeProvider: _protocolFeeProvider,
                             name: name,
                             symbol: symbol,
                             tokens: tokens,
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/ComposableStablePoolProtocolFees.sol pool-stable/contracts/ComposableStablePoolProtocolFees.sol
--- pool-stable/contracts/ComposableStablePoolProtocolFees.sol	2022-09-08 16:57:42.383635200 -0400
+++ pool-stable/contracts/ComposableStablePoolProtocolFees.sol	2022-09-08 18:16:31.498655300 -0400
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
-import "@balancer-labs/v2-pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol";
-import "@balancer-labs/v2-pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol";
+import "../../pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol";
 
 import "./ComposableStablePoolStorage.sol";
 import "./ComposableStablePoolRates.sol";
-import "./StableMath.sol";
+import "../../../harnesses/StableMathHarness.sol";
 
 abstract contract ComposableStablePoolProtocolFees is
     ComposableStablePoolStorage,
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/ComposableStablePoolRates.sol pool-stable/contracts/ComposableStablePoolRates.sol
--- pool-stable/contracts/ComposableStablePoolRates.sol	2022-09-08 16:57:42.431634800 -0400
+++ pool-stable/contracts/ComposableStablePoolRates.sol	2022-09-08 18:16:31.548659100 -0400
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-pool-utils/contracts/rates/PriceRateCache.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../pool-utils/contracts/rates/PriceRateCache.sol";
 
 import "./ComposableStablePoolStorage.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/ComposableStablePoolStorage.sol pool-stable/contracts/ComposableStablePoolStorage.sol
--- pool-stable/contracts/ComposableStablePoolStorage.sol	2022-09-08 16:57:42.475715400 -0400
+++ pool-stable/contracts/ComposableStablePoolStorage.sol	2022-09-08 18:16:31.644655600 -0400
@@ -14,13 +14,14 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/BasePool.sol";
+// import "../../pool-utils/contracts/BasePool.sol";
+import "../../pool-utils/contracts/BasePool.sol";
 
-import "./StableMath.sol";
+import "../../../harnesses/StableMathHarness.sol";
 
 abstract contract ComposableStablePoolStorage is BasePool {
     using FixedPoint for uint256;
@@ -44,12 +45,12 @@
     uint256 private immutable _bptIndex;
 
     // These are the registered tokens: one of them will be the BPT.
-    IERC20 private immutable _token0;
-    IERC20 private immutable _token1;
-    IERC20 private immutable _token2;
-    IERC20 private immutable _token3;
-    IERC20 private immutable _token4;
-    IERC20 private immutable _token5;
+    IERC20 internal immutable _token0;
+    IERC20 internal immutable _token1;
+    IERC20 internal immutable _token2;
+    // IERC20 internal immutable _token3;
+    // IERC20 internal immutable _token4;
+    // IERC20 internal immutable _token5;
 
     // All token balances are normalized to behave as if the token had 18 decimals. We assume a token's decimals will
     // not change throughout its lifetime, and store the corresponding scaling factor for each at construction time.
@@ -107,9 +108,9 @@
         _token0 = params.registeredTokens[0];
         _token1 = params.registeredTokens[1];
         _token2 = params.registeredTokens[2];
-        _token3 = totalTokens > 3 ? params.registeredTokens[3] : IERC20(0);
-        _token4 = totalTokens > 4 ? params.registeredTokens[4] : IERC20(0);
-        _token5 = totalTokens > 5 ? params.registeredTokens[5] : IERC20(0);
+        // _token3 = totalTokens > 3 ? params.registeredTokens[3] : IERC20(0);
+        // _token4 = totalTokens > 4 ? params.registeredTokens[4] : IERC20(0);
+        // _token5 = totalTokens > 5 ? params.registeredTokens[5] : IERC20(0);
 
         _scalingFactor0 = _computeScalingFactor(params.registeredTokens[0]);
         _scalingFactor1 = _computeScalingFactor(params.registeredTokens[1]);
@@ -214,9 +215,9 @@
         if (token == _token0) return 0;
         if (token == _token1) return 1;
         if (token == _token2) return 2;
-        if (token == _token3) return 3;
-        if (token == _token4) return 4;
-        if (token == _token5) return 5;
+        // if (token == _token3) return 3;
+        // if (token == _token4) return 4;
+        // if (token == _token5) return 5;
 
         _revert(Errors.INVALID_TOKEN);
     }
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/StableMath.sol pool-stable/contracts/StableMath.sol
--- pool-stable/contracts/StableMath.sol	2022-09-08 16:57:42.521809300 -0400
+++ pool-stable/contracts/StableMath.sol	2022-09-08 18:16:31.668654800 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // These functions start with an underscore, as if they were part of a contract and not a library. At some point this
 // should be fixed. Additionally, some variables have non mixed case names (e.g. P_D) that relate to the mathematical
@@ -25,9 +25,9 @@
 library StableMath {
     using FixedPoint for uint256;
 
-    uint256 internal constant _MIN_AMP = 1;
-    uint256 internal constant _MAX_AMP = 5000;
-    uint256 internal constant _AMP_PRECISION = 1e3;
+    uint256 public constant _MIN_AMP = 1;
+    uint256 public constant _MAX_AMP = 5000;
+    uint256 public constant _AMP_PRECISION = 1e3;
 
     uint256 internal constant _MAX_STABLE_TOKENS = 5;
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/StablePoolAmplification.sol pool-stable/contracts/StablePoolAmplification.sol
--- pool-stable/contracts/StablePoolAmplification.sol	2022-09-08 16:57:42.556824000 -0400
+++ pool-stable/contracts/StablePoolAmplification.sol	2022-09-08 18:16:31.706655000 -0400
@@ -14,10 +14,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../pool-utils/contracts/BasePoolAuthorization.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
 
-import "./StableMath.sol";
+import "../../../harnesses/StableMathHarness.sol";
 
 abstract contract StablePoolAmplification is BasePoolAuthorization {
     using WordCodec for bytes32;
@@ -31,8 +31,8 @@
     // WARNING: this only limits *a single* amplification change to have a maximum rate of change of twice the original
     // value daily. It is possible to perform multiple amplification changes in sequence to increase this value more
     // rapidly: for example, by doubling the value every day it can increase by a factor of 8 over three days (2^3).
-    uint256 private constant _MIN_UPDATE_TIME = 1 days;
-    uint256 private constant _MAX_AMP_UPDATE_DAILY_RATE = 2;
+    uint256 public constant _MIN_UPDATE_TIME = 1 days;
+    uint256 public constant _MAX_AMP_UPDATE_DAILY_RATE = 2;
 
     // The amplification data structure is as follows:
     // [  64 bits |   64 bits  |  64 bits  |   64 bits   ]
@@ -75,7 +75,7 @@
 
     // Return the current amp value, which will be an interpolation if there is an ongoing amp update.
     // Also return a flag indicating whether there is an ongoing update.
-    function _getAmplificationParameter() internal view returns (uint256 value, bool isUpdating) {
+    function _getAmplificationParameter() public view returns (uint256 value, bool isUpdating) {
         (uint256 startValue, uint256 endValue, uint256 startTime, uint256 endTime) = _getAmplificationData();
 
         // Note that block.timestamp >= startTime, since startTime is set to the current time when an update starts
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/test/MockComposableStablePoolProtocolFees.sol pool-stable/contracts/test/MockComposableStablePoolProtocolFees.sol
--- pool-stable/contracts/test/MockComposableStablePoolProtocolFees.sol	2022-09-07 19:19:29.053460900 -0400
+++ pool-stable/contracts/test/MockComposableStablePoolProtocolFees.sol	2022-09-08 18:16:31.728658600 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
 
 import "../ComposableStablePoolProtocolFees.sol";
 
@@ -59,21 +59,16 @@
         // solhint-disable-previous-line no-empty-blocks
     }
 
-    function payProtocolFeesBeforeJoinExit(
-        uint256[] memory registeredBalances,
-        uint256 lastJoinExitAmp,
-        uint256 lastPostJoinExitInvariant
-    ) external returns (uint256 virtualSupply, uint256[] memory balances) {
-        (virtualSupply, balances, ) = _payProtocolFeesBeforeJoinExit(
-            registeredBalances,
-            lastJoinExitAmp,
-            lastPostJoinExitInvariant
-        );
+    function payProtocolFeesBeforeJoinExit(uint256[] memory balancesWithBpt)
+        external
+        returns (uint256 virtualSupply, uint256[] memory balances)
+    {
+        return _payProtocolFeesBeforeJoinExit(balancesWithBpt);
     }
 
     function updateInvariantAfterJoinExit(
         uint256 currentAmp,
-        uint256[] memory balances,
+        uint256[] memory balancesWithoutBpt,
         uint256 preJoinExitInvariant,
         uint256 preJoinExitSupply,
         uint256 postJoinExitSupply
@@ -81,7 +76,7 @@
         return
             _updateInvariantAfterJoinExit(
                 currentAmp,
-                balances,
+                balancesWithoutBpt,
                 preJoinExitInvariant,
                 preJoinExitSupply,
                 postJoinExitSupply
@@ -108,17 +103,8 @@
         return _getGrowthInvariants(balances, lastPostJoinExitAmp);
     }
 
-    function getProtocolPoolOwnershipPercentage(
-        uint256[] memory balances,
-        uint256 lastJoinExitAmp,
-        uint256 lastPostJoinExitInvariant
-    ) external view returns (uint256) {
-        (uint256 percentage, ) = _getProtocolPoolOwnershipPercentage(
-            balances,
-            lastJoinExitAmp,
-            lastPostJoinExitInvariant
-        );
-        return percentage;
+    function getProtocolPoolOwnershipPercentage(uint256[] memory balances) external view returns (uint256) {
+        return _getProtocolPoolOwnershipPercentage(balances);
     }
 
     // Stubbed functions
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/test/MockComposableStablePoolRates.sol pool-stable/contracts/test/MockComposableStablePoolRates.sol
--- pool-stable/contracts/test/MockComposableStablePoolRates.sol	2022-08-15 14:38:46.316540400 -0400
+++ pool-stable/contracts/test/MockComposableStablePoolRates.sol	2022-09-08 18:16:31.753657700 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
 
 import "../ComposableStablePoolRates.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/test/MockComposableStablePoolStorage.sol pool-stable/contracts/test/MockComposableStablePoolStorage.sol
--- pool-stable/contracts/test/MockComposableStablePoolStorage.sol	2022-09-08 16:57:42.823737700 -0400
+++ pool-stable/contracts/test/MockComposableStablePoolStorage.sol	2022-09-08 18:16:31.764654600 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
 
 import "../ComposableStablePoolStorage.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-stable/contracts/test/MockStablePoolAmplification.sol pool-stable/contracts/test/MockStablePoolAmplification.sol
--- pool-stable/contracts/test/MockStablePoolAmplification.sol	2022-08-15 14:38:46.369392800 -0400
+++ pool-stable/contracts/test/MockStablePoolAmplification.sol	2022-09-08 18:16:31.799661200 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "../StablePoolAmplification.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/BalancerPoolToken.sol pool-utils/contracts/BalancerPoolToken.sol
--- pool-utils/contracts/BalancerPoolToken.sol	2022-08-15 14:38:46.836910000 -0400
+++ pool-utils/contracts/BalancerPoolToken.sol	2022-09-08 18:16:31.805656000 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20Permit.sol";
 
 /**
  * @title Highly opinionated token implementation
@@ -33,7 +33,7 @@
  * - Assigns infinite allowance for all token holders to the Vault
  */
 contract BalancerPoolToken is ERC20Permit {
-    IVault private immutable _vault;
+    IVault internal immutable _vault;
 
     constructor(
         string memory tokenName,
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/BaseGeneralPool.sol pool-utils/contracts/BaseGeneralPool.sol
--- pool-utils/contracts/BaseGeneralPool.sol	2022-08-15 14:38:46.862913600 -0400
+++ pool-utils/contracts/BaseGeneralPool.sol	2022-09-08 18:16:31.828657500 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
 
 import "./BasePool.sol";
 
@@ -34,7 +34,7 @@
         uint256[] memory balances,
         uint256 indexIn,
         uint256 indexOut
-    ) external override onlyVault(swapRequest.poolId) returns (uint256) {
+    ) public override onlyVault(swapRequest.poolId) returns (uint256) {
         _beforeSwapJoinExit();
 
         _validateIndexes(indexIn, indexOut, _getTotalTokens());
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/BaseMinimalSwapInfoPool.sol pool-utils/contracts/BaseMinimalSwapInfoPool.sol
--- pool-utils/contracts/BaseMinimalSwapInfoPool.sol	2022-08-15 14:38:46.879075800 -0400
+++ pool-utils/contracts/BaseMinimalSwapInfoPool.sol	2022-09-08 18:16:31.863656200 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
+import "../../interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
 
 import "./BasePool.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/BasePool.sol pool-utils/contracts/BasePool.sol
--- pool-utils/contracts/BasePool.sol	2022-09-08 16:57:43.016740400 -0400
+++ pool-utils/contracts/BasePool.sol	2022-09-08 18:16:31.881656200 -0400
@@ -15,17 +15,17 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IAssetManager.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
+import "../../interfaces/contracts/pool-utils/IAssetManager.sol";
+import "../../interfaces/contracts/pool-utils/IControlledPool.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../solidity-utils/contracts/helpers/TemporarilyPausable.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./BalancerPoolToken.sol";
 import "./BasePoolAuthorization.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/BasePoolAuthorization.sol pool-utils/contracts/BasePoolAuthorization.sol
--- pool-utils/contracts/BasePoolAuthorization.sol	2022-09-08 16:57:43.076744100 -0400
+++ pool-utils/contracts/BasePoolAuthorization.sol	2022-09-08 18:16:31.902654600 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
 
 /**
  * @dev Base authorization layer implementation for Pools.
@@ -31,7 +31,7 @@
 abstract contract BasePoolAuthorization is Authentication {
     address private immutable _owner;
 
-    address private constant _DELEGATE_OWNER = 0xBA1BA1ba1BA1bA1bA1Ba1BA1ba1BA1bA1ba1ba1B;
+    address public constant _DELEGATE_OWNER = 0xBA1BA1ba1BA1bA1bA1Ba1BA1ba1BA1bA1ba1ba1B;
 
     constructor(address owner) {
         _owner = owner;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/RecoveryMode.sol pool-utils/contracts/RecoveryMode.sol
--- pool-utils/contracts/RecoveryMode.sol	2022-09-07 19:19:29.147462600 -0400
+++ pool-utils/contracts/RecoveryMode.sol	2022-09-08 18:16:31.925654700 -0400
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/pool-utils/BasePoolUserData.sol";
+import "../../interfaces/contracts/pool-utils/IRecoveryMode.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 import "./BasePoolAuthorization.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/controllers/BasePoolController.sol pool-utils/contracts/controllers/BasePoolController.sol
--- pool-utils/contracts/controllers/BasePoolController.sol	2022-08-15 14:38:46.998798200 -0400
+++ pool-utils/contracts/controllers/BasePoolController.sol	2022-09-08 18:16:31.949654700 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IBasePoolController.sol";
+import "../../interfaces/contracts/pool-utils/IBasePoolController.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
 
 import "../BasePoolAuthorization.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/controllers/ManagedPoolController.sol pool-utils/contracts/controllers/ManagedPoolController.sol
--- pool-utils/contracts/controllers/ManagedPoolController.sol	2022-09-07 19:19:29.161468300 -0400
+++ pool-utils/contracts/controllers/ManagedPoolController.sol	2022-09-08 18:16:31.970656800 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledManagedPool.sol";
+import "../../interfaces/contracts/pool-utils/IControlledManagedPool.sol";
 
 import "./BasePoolController.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol
--- pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol	2022-09-07 19:19:29.190462700 -0400
+++ pool-utils/contracts/protocol-fees/InvariantGrowthProtocolSwapFees.sol	2022-09-08 18:16:31.994656900 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../../solidity-utils/contracts/math/Math.sol";
 import "./ProtocolFees.sol";
 
 library InvariantGrowthProtocolSwapFees {
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol
--- pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol	2022-09-07 19:19:29.202477100 -0400
+++ pool-utils/contracts/protocol-fees/ProtocolFeeCache.sol	2022-09-08 18:16:32.002659000 -0400
@@ -14,10 +14,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
 
 import "../RecoveryMode.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/protocol-fees/ProtocolFees.sol pool-utils/contracts/protocol-fees/ProtocolFees.sol
--- pool-utils/contracts/protocol-fees/ProtocolFees.sol	2022-09-07 19:19:29.204461400 -0400
+++ pool-utils/contracts/protocol-fees/ProtocolFees.sol	2022-09-08 18:16:32.008656900 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../../solidity-utils/contracts/math/Math.sol";
 
 library ProtocolFees {
     using FixedPoint for uint256;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/rates/PriceRateCache.sol pool-utils/contracts/rates/PriceRateCache.sol
--- pool-utils/contracts/rates/PriceRateCache.sol	2022-08-15 14:38:47.054850200 -0400
+++ pool-utils/contracts/rates/PriceRateCache.sol	2022-09-08 18:16:32.028656400 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../../solidity-utils/contracts/helpers/WordCodec.sol";
 
 /**
  * Price rate caches are used to avoid querying the price rate for a token every time we need to work with it. It is
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/test/MockAssetManager.sol pool-utils/contracts/test/MockAssetManager.sol
--- pool-utils/contracts/test/MockAssetManager.sol	2022-08-15 14:38:47.079153200 -0400
+++ pool-utils/contracts/test/MockAssetManager.sol	2022-09-08 18:16:32.048656900 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IAssetManager.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/pool-utils/IAssetManager.sol";
 
 contract MockAssetManager is IAssetManager {
     event Rebalanced(address assetManager, bytes32 poolId, IERC20 token, bool force);
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/test/MockBalancerPoolToken.sol pool-utils/contracts/test/MockBalancerPoolToken.sol
--- pool-utils/contracts/test/MockBalancerPoolToken.sol	2022-08-15 14:38:47.094446200 -0400
+++ pool-utils/contracts/test/MockBalancerPoolToken.sol	2022-09-08 18:16:32.085658000 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "../BalancerPoolToken.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/test/MockBasePool.sol pool-utils/contracts/test/MockBasePool.sol
--- pool-utils/contracts/test/MockBasePool.sol	2022-08-15 14:38:47.110869200 -0400
+++ pool-utils/contracts/test/MockBasePool.sol	2022-09-08 18:16:32.105660600 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
 
 import "../BasePool.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/test/MockFailureModes.sol pool-utils/contracts/test/MockFailureModes.sol
--- pool-utils/contracts/test/MockFailureModes.sol	2022-08-15 14:38:47.147450200 -0400
+++ pool-utils/contracts/test/MockFailureModes.sol	2022-09-08 18:16:32.132657100 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 abstract contract MockFailureModes {
     enum FailureMode { INVARIANT, PRICE_RATE }
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/test/MockRateProvider.sol pool-utils/contracts/test/MockRateProvider.sol
--- pool-utils/contracts/test/MockRateProvider.sol	2022-08-15 14:38:47.215446300 -0400
+++ pool-utils/contracts/test/MockRateProvider.sol	2022-09-08 18:16:32.159655600 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-utils/IRateProvider.sol";
+import "../../interfaces/contracts/pool-utils/IRateProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 contract MockRateProvider is IRateProvider {
     uint256 internal _rate;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/test/MockRecoveryModeStorage.sol pool-utils/contracts/test/MockRecoveryModeStorage.sol
--- pool-utils/contracts/test/MockRecoveryModeStorage.sol	2022-08-15 14:38:47.241891100 -0400
+++ pool-utils/contracts/test/MockRecoveryModeStorage.sol	2022-09-08 18:16:32.179655700 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "../RecoveryMode.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-utils/contracts/test/MockVault.sol pool-utils/contracts/test/MockVault.sol
--- pool-utils/contracts/test/MockVault.sol	2022-09-07 19:19:29.263460600 -0400
+++ pool-utils/contracts/test/MockVault.sol	2022-09-08 18:16:32.237656100 -0400
@@ -15,15 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/vault/IPoolSwapStructs.sol";
+import "../../interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
 
-import "@balancer-labs/v2-vault/contracts/ProtocolFeesCollector.sol";
+import "../../vault/contracts/ProtocolFeesCollector.sol";
 
 contract MockVault is IPoolSwapStructs {
     struct Pool {
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/WeightedMath.sol pool-weighted/contracts/WeightedMath.sol
--- pool-weighted/contracts/WeightedMath.sol	2022-09-07 19:19:29.439421300 -0400
+++ pool-weighted/contracts/WeightedMath.sol	2022-09-08 18:16:32.286659100 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 // These functions start with an underscore, as if they were part of a contract and not a library. At some point this
 // should be fixed.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/WeightedPoolFactory.sol pool-weighted/contracts/WeightedPoolFactory.sol
--- pool-weighted/contracts/WeightedPoolFactory.sol	2022-09-08 16:54:18.395750200 -0400
+++ pool-weighted/contracts/WeightedPoolFactory.sol	2022-09-08 18:16:32.314655400 -0400
@@ -15,17 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./WeightedPool.sol";
 
-contract WeightedPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
-    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(WeightedPool).creationCode)
-    {
+contract WeightedPoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    constructor(IVault vault) BasePoolSplitCodeFactory(vault, type(WeightedPool).creationCode) {
         // solhint-disable-previous-line no-empty-blocks
     }
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/lib/GradualValueChange.sol pool-weighted/contracts/lib/GradualValueChange.sol
--- pool-weighted/contracts/lib/GradualValueChange.sol	2022-08-15 14:38:47.572626000 -0400
+++ pool-weighted/contracts/lib/GradualValueChange.sol	2022-09-08 18:16:32.334656300 -0400
@@ -12,8 +12,8 @@
 // You should have received a copy of the GNU General Public License
 // along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 pragma solidity ^0.7.0;
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/lib/WeightCompression.sol pool-weighted/contracts/lib/WeightCompression.sol
--- pool-weighted/contracts/lib/WeightCompression.sol	2022-08-15 14:38:47.591118100 -0400
+++ pool-weighted/contracts/lib/WeightCompression.sol	2022-09-08 18:16:32.341657300 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
 
 /**
  * @dev Library for compressing and decompressing numbers by using smaller types.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/smart/BaseManagedPoolFactory.sol pool-weighted/contracts/smart/BaseManagedPoolFactory.sol
--- pool-weighted/contracts/smart/BaseManagedPoolFactory.sol	2022-09-07 19:19:29.501419900 -0400
+++ pool-weighted/contracts/smart/BaseManagedPoolFactory.sol	2022-09-08 18:16:32.364656700 -0400
@@ -15,9 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./ManagedPool.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/smart/LiquidityBootstrappingPool.sol pool-weighted/contracts/smart/LiquidityBootstrappingPool.sol
--- pool-weighted/contracts/smart/LiquidityBootstrappingPool.sol	2022-08-15 14:38:47.620673100 -0400
+++ pool-weighted/contracts/smart/LiquidityBootstrappingPool.sol	2022-09-08 18:16:32.395656600 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/WordCodec.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "../lib/GradualValueChange.sol";
 import "../lib/WeightCompression.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/smart/LiquidityBootstrappingPoolFactory.sol pool-weighted/contracts/smart/LiquidityBootstrappingPoolFactory.sol
--- pool-weighted/contracts/smart/LiquidityBootstrappingPoolFactory.sol	2022-09-07 19:19:29.515432500 -0400
+++ pool-weighted/contracts/smart/LiquidityBootstrappingPoolFactory.sol	2022-09-08 18:16:32.424656200 -0400
@@ -15,17 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-pool-utils/contracts/factories/BasePoolFactory.sol";
-import "@balancer-labs/v2-pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
+import "../../pool-utils/contracts/factories/BasePoolSplitCodeFactory.sol";
+import "../../pool-utils/contracts/factories/FactoryWidePauseWindow.sol";
 
 import "./LiquidityBootstrappingPool.sol";
 
-contract LiquidityBootstrappingPoolFactory is BasePoolFactory, FactoryWidePauseWindow {
-    constructor(IVault vault, IProtocolFeePercentagesProvider protocolFeeProvider)
-        BasePoolFactory(vault, protocolFeeProvider, type(LiquidityBootstrappingPool).creationCode)
-    {
+contract LiquidityBootstrappingPoolFactory is BasePoolSplitCodeFactory, FactoryWidePauseWindow {
+    constructor(IVault vault) BasePoolSplitCodeFactory(vault, type(LiquidityBootstrappingPool).creationCode) {
         // solhint-disable-previous-line no-empty-blocks
     }
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' pool-weighted/contracts/smart/ManagedPoolFactory.sol pool-weighted/contracts/smart/ManagedPoolFactory.sol
--- pool-weighted/contracts/smart/ManagedPoolFactory.sol	2022-08-15 14:38:47.685609800 -0400
+++ pool-weighted/contracts/smart/ManagedPoolFactory.sol	2022-09-08 18:16:32.450664100 -0400
@@ -15,7 +15,7 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-pool-utils/contracts/controllers/ManagedPoolController.sol";
+import "../../pool-utils/contracts/controllers/ManagedPoolController.sol";
 
 import "./BaseManagedPoolFactory.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/Authentication.sol solidity-utils/contracts/helpers/Authentication.sol
--- solidity-utils/contracts/helpers/Authentication.sol	2022-08-15 14:38:48.361995100 -0400
+++ solidity-utils/contracts/helpers/Authentication.sol	2022-09-08 18:16:32.464658700 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
 
 /**
  * @dev Building block for performing access control on external functions.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/CodeDeployer.sol solidity-utils/contracts/helpers/CodeDeployer.sol
--- solidity-utils/contracts/helpers/CodeDeployer.sol	2022-08-15 14:38:48.394989000 -0400
+++ solidity-utils/contracts/helpers/CodeDeployer.sol	2022-09-08 18:16:32.502655700 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Library used to deploy contracts with specific code. This can be used for long-term storage of immutable data as
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/EOASignaturesValidator.sol solidity-utils/contracts/helpers/EOASignaturesValidator.sol
--- solidity-utils/contracts/helpers/EOASignaturesValidator.sol	2022-08-15 14:38:48.411526400 -0400
+++ solidity-utils/contracts/helpers/EOASignaturesValidator.sol	2022-09-08 18:16:32.560656500 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol";
 
 import "../openzeppelin/EIP712.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/ERC20Helpers.sol solidity-utils/contracts/helpers/ERC20Helpers.sol
--- solidity-utils/contracts/helpers/ERC20Helpers.sol	2022-09-07 19:19:29.705420300 -0400
+++ solidity-utils/contracts/helpers/ERC20Helpers.sol	2022-09-08 18:16:32.593653700 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/vault/IAsset.sol";
 
 // solhint-disable
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol
--- solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol	2022-08-15 14:38:48.452279200 -0400
+++ solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol	2022-09-08 18:16:32.618656900 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "./EOASignaturesValidator.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/InputHelpers.sol solidity-utils/contracts/helpers/InputHelpers.sol
--- solidity-utils/contracts/helpers/InputHelpers.sol	2022-08-15 14:38:48.469404200 -0400
+++ solidity-utils/contracts/helpers/InputHelpers.sol	2022-09-08 18:16:32.640659500 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 library InputHelpers {
     function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/OptionalOnlyCaller.sol solidity-utils/contracts/helpers/OptionalOnlyCaller.sol
--- solidity-utils/contracts/helpers/OptionalOnlyCaller.sol	2022-08-15 14:38:48.514847500 -0400
+++ solidity-utils/contracts/helpers/OptionalOnlyCaller.sol	2022-09-08 18:16:32.666656900 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/IOptionalOnlyCaller.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "./SignaturesValidator.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/SignaturesValidator.sol solidity-utils/contracts/helpers/SignaturesValidator.sol
--- solidity-utils/contracts/helpers/SignaturesValidator.sol	2022-08-15 14:38:48.530425300 -0400
+++ solidity-utils/contracts/helpers/SignaturesValidator.sol	2022-09-08 18:16:32.688656000 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
 
 import "./EOASignaturesValidator.sol";
 import "../openzeppelin/Address.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/SingletonAuthentication.sol solidity-utils/contracts/helpers/SingletonAuthentication.sol
--- solidity-utils/contracts/helpers/SingletonAuthentication.sol	2022-08-15 14:38:48.546577300 -0400
+++ solidity-utils/contracts/helpers/SingletonAuthentication.sol	2022-09-08 18:16:32.736197900 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IAuthorizerAdaptor.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "./Authentication.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/TemporarilyPausable.sol solidity-utils/contracts/helpers/TemporarilyPausable.sol
--- solidity-utils/contracts/helpers/TemporarilyPausable.sol	2022-08-15 14:38:48.561559200 -0400
+++ solidity-utils/contracts/helpers/TemporarilyPausable.sol	2022-09-08 18:16:32.789191600 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol";
 
 /**
  * @dev Allows for a contract to be paused during an initial period after deployment, disabling functionality. Can be
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/helpers/WordCodec.sol solidity-utils/contracts/helpers/WordCodec.sol
--- solidity-utils/contracts/helpers/WordCodec.sol	2022-08-15 14:38:48.647864900 -0400
+++ solidity-utils/contracts/helpers/WordCodec.sol	2022-09-08 18:16:32.821190300 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "../math/Math.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/math/FixedPoint.sol solidity-utils/contracts/math/FixedPoint.sol
--- solidity-utils/contracts/math/FixedPoint.sol	2022-08-15 14:38:48.675286300 -0400
+++ solidity-utils/contracts/math/FixedPoint.sol	2022-09-08 18:16:32.855343600 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 import "./LogExpMath.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/math/LogExpMath.sol solidity-utils/contracts/math/LogExpMath.sol
--- solidity-utils/contracts/math/LogExpMath.sol	2022-08-15 14:38:48.712981400 -0400
+++ solidity-utils/contracts/math/LogExpMath.sol	2022-09-08 18:16:32.875339700 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /* solhint-disable */
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/math/Math.sol solidity-utils/contracts/math/Math.sol
--- solidity-utils/contracts/math/Math.sol	2022-08-15 14:38:48.732274200 -0400
+++ solidity-utils/contracts/math/Math.sol	2022-09-08 18:16:32.898383700 -0400
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/Address.sol solidity-utils/contracts/openzeppelin/Address.sol
--- solidity-utils/contracts/openzeppelin/Address.sol	2022-08-15 14:38:48.749418700 -0400
+++ solidity-utils/contracts/openzeppelin/Address.sol	2022-09-08 18:16:32.919388500 -0400
@@ -5,7 +5,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Collection of functions related to the address type
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/Create2.sol solidity-utils/contracts/openzeppelin/Create2.sol
--- solidity-utils/contracts/openzeppelin/Create2.sol	2022-08-15 14:38:48.809917000 -0400
+++ solidity-utils/contracts/openzeppelin/Create2.sol	2022-09-08 18:16:32.941515800 -0400
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/ERC20.sol solidity-utils/contracts/openzeppelin/ERC20.sol
--- solidity-utils/contracts/openzeppelin/ERC20.sol	2022-08-15 14:38:48.857057300 -0400
+++ solidity-utils/contracts/openzeppelin/ERC20.sol	2022-09-08 18:16:32.963517100 -0400
@@ -2,8 +2,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 import "./SafeMath.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/ERC20Permit.sol solidity-utils/contracts/openzeppelin/ERC20Permit.sol
--- solidity-utils/contracts/openzeppelin/ERC20Permit.sol	2022-08-15 14:38:48.896485800 -0400
+++ solidity-utils/contracts/openzeppelin/ERC20Permit.sol	2022-09-08 18:16:32.984514600 -0400
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
 
 import "./ERC20.sol";
 import "../helpers/EOASignaturesValidator.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/EnumerableMap.sol solidity-utils/contracts/openzeppelin/EnumerableMap.sol
--- solidity-utils/contracts/openzeppelin/EnumerableMap.sol	2022-08-15 14:38:48.919482700 -0400
+++ solidity-utils/contracts/openzeppelin/EnumerableMap.sol	2022-09-08 18:16:33.004514500 -0400
@@ -11,8 +11,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 /**
  * @dev Library for managing an enumerable variant of Solidity's
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/EnumerableSet.sol solidity-utils/contracts/openzeppelin/EnumerableSet.sol
--- solidity-utils/contracts/openzeppelin/EnumerableSet.sol	2022-08-15 14:38:48.937390300 -0400
+++ solidity-utils/contracts/openzeppelin/EnumerableSet.sol	2022-09-08 18:16:33.025513600 -0400
@@ -7,7 +7,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Library for managing
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/Ownable.sol solidity-utils/contracts/openzeppelin/Ownable.sol
--- solidity-utils/contracts/openzeppelin/Ownable.sol	2022-08-15 14:38:48.983390000 -0400
+++ solidity-utils/contracts/openzeppelin/Ownable.sol	2022-09-08 18:16:33.055518500 -0400
@@ -5,7 +5,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Contract module which provides a basic access control mechanism, where
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol
--- solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol	2022-08-15 14:38:49.001594300 -0400
+++ solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol	2022-09-08 18:16:33.069518400 -0400
@@ -6,7 +6,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Contract module that helps prevent reentrant calls to a function.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/SafeCast.sol solidity-utils/contracts/openzeppelin/SafeCast.sol
--- solidity-utils/contracts/openzeppelin/SafeCast.sol	2022-08-15 14:38:49.017742500 -0400
+++ solidity-utils/contracts/openzeppelin/SafeCast.sol	2022-09-08 18:16:33.103046700 -0400
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/SafeERC20.sol solidity-utils/contracts/openzeppelin/SafeERC20.sol
--- solidity-utils/contracts/openzeppelin/SafeERC20.sol	2022-08-15 14:38:49.032053800 -0400
+++ solidity-utils/contracts/openzeppelin/SafeERC20.sol	2022-09-08 18:16:33.136046300 -0400
@@ -6,8 +6,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 /**
  * @title SafeERC20
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/openzeppelin/SafeMath.sol solidity-utils/contracts/openzeppelin/SafeMath.sol
--- solidity-utils/contracts/openzeppelin/SafeMath.sol	2022-08-15 14:38:49.046213500 -0400
+++ solidity-utils/contracts/openzeppelin/SafeMath.sol	2022-09-08 18:16:33.175043600 -0400
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 /**
  * @dev Wrappers over Solidity's arithmetic operations with added overflow
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/test/BalancerErrorsMock.sol solidity-utils/contracts/test/BalancerErrorsMock.sol
--- solidity-utils/contracts/test/BalancerErrorsMock.sol	2022-08-15 14:38:49.062500300 -0400
+++ solidity-utils/contracts/test/BalancerErrorsMock.sol	2022-09-08 18:16:33.185043800 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
 contract BalancerErrorsMock {
     function fail(uint256 code) external pure {
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/test/ERC1271Mock.sol solidity-utils/contracts/test/ERC1271Mock.sol
--- solidity-utils/contracts/test/ERC1271Mock.sol	2022-08-15 14:38:49.105292400 -0400
+++ solidity-utils/contracts/test/ERC1271Mock.sol	2022-09-08 18:16:33.207042900 -0400
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC1271.sol";
 
 contract ERC1271Mock is IERC1271 {
     mapping(bytes32 => bool) private _approved;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/test/EnumerableMapMock.sol solidity-utils/contracts/test/EnumerableMapMock.sol
--- solidity-utils/contracts/test/EnumerableMapMock.sol	2022-08-15 14:38:49.157302700 -0400
+++ solidity-utils/contracts/test/EnumerableMapMock.sol	2022-09-08 18:16:33.228042000 -0400
@@ -2,7 +2,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 import "../openzeppelin/EnumerableMap.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' solidity-utils/contracts/test/SingletonAuthenticationMock.sol solidity-utils/contracts/test/SingletonAuthenticationMock.sol
--- solidity-utils/contracts/test/SingletonAuthenticationMock.sol	2022-08-15 14:38:49.386196200 -0400
+++ solidity-utils/contracts/test/SingletonAuthenticationMock.sol	2022-09-08 18:16:33.267055500 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "../helpers/SingletonAuthentication.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/BALTokenHolder.sol standalone-utils/contracts/BALTokenHolder.sol
--- standalone-utils/contracts/BALTokenHolder.sol	2022-08-15 14:38:49.764593900 -0400
+++ standalone-utils/contracts/BALTokenHolder.sol	2022-09-08 18:16:33.297045800 -0400
@@ -14,12 +14,12 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBALTokenHolder.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerToken.sol";
+import "../../interfaces/contracts/standalone-utils/IBALTokenHolder.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 /**
  * @dev This contract simply holds the BAL token and delegates to Balancer Governance the permission to withdraw it. It
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/BALTokenHolderFactory.sol standalone-utils/contracts/BALTokenHolderFactory.sol
--- standalone-utils/contracts/BALTokenHolderFactory.sol	2022-08-15 14:38:49.780596700 -0400
+++ standalone-utils/contracts/BALTokenHolderFactory.sol	2022-09-08 18:16:33.323045500 -0400
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerToken.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerToken.sol";
+import "../../interfaces/contracts/standalone-utils/IBALTokenHolderFactory.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
 
 import "./BALTokenHolder.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/BalancerQueries.sol standalone-utils/contracts/BalancerQueries.sol
--- standalone-utils/contracts/BalancerQueries.sol	2022-08-15 14:38:49.794593100 -0400
+++ standalone-utils/contracts/BalancerQueries.sol	2022-09-08 18:16:33.347041400 -0400
@@ -15,16 +15,16 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerQueries.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerQueries.sol";
 
-import "@balancer-labs/v2-vault/contracts/AssetHelpers.sol";
+import "../../vault/contracts/AssetHelpers.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
 
 /**
  * @dev This contract simply builds on top of the Balancer V2 architecture to provide useful helpers to users.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/ProtocolFeePercentagesProvider.sol standalone-utils/contracts/ProtocolFeePercentagesProvider.sol
--- standalone-utils/contracts/ProtocolFeePercentagesProvider.sol	2022-08-15 14:38:49.820747900 -0400
+++ standalone-utils/contracts/ProtocolFeePercentagesProvider.sol	2022-09-08 18:16:33.354042700 -0400
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
+import "../../interfaces/contracts/vault/IProtocolFeesCollector.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeePercentagesProvider.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
 
 contract ProtocolFeePercentagesProvider is IProtocolFeePercentagesProvider, SingletonAuthentication {
     using SafeCast for uint256;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/ProtocolFeesWithdrawer.sol standalone-utils/contracts/ProtocolFeesWithdrawer.sol
--- standalone-utils/contracts/ProtocolFeesWithdrawer.sol	2022-08-15 14:38:49.834902200 -0400
+++ standalone-utils/contracts/ProtocolFeesWithdrawer.sol	2022-09-08 18:16:33.378048700 -0400
@@ -14,11 +14,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IProtocolFeesWithdrawer.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/SingletonAuthentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/helpers/SingletonAuthentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
 
 /**
  * @author Balancer Labs
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/AaveWrapping.sol standalone-utils/contracts/relayer/AaveWrapping.sol
--- standalone-utils/contracts/relayer/AaveWrapping.sol	2022-08-15 14:38:49.851131700 -0400
+++ standalone-utils/contracts/relayer/AaveWrapping.sol	2022-09-08 18:16:33.401046000 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IStaticATokenLM.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IStaticATokenLM.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/BalancerRelayer.sol standalone-utils/contracts/relayer/BalancerRelayer.sol
--- standalone-utils/contracts/relayer/BalancerRelayer.sol	2022-08-15 14:38:49.868132700 -0400
+++ standalone-utils/contracts/relayer/BalancerRelayer.sol	2022-09-08 18:16:33.423044400 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 /**
  * @title Balancer Relayer
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/BaseRelayerLibrary.sol standalone-utils/contracts/relayer/BaseRelayerLibrary.sol
--- standalone-utils/contracts/relayer/BaseRelayerLibrary.sol	2022-09-07 19:19:29.709423000 -0400
+++ standalone-utils/contracts/relayer/BaseRelayerLibrary.sol	2022-09-08 18:16:33.432046200 -0400
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IBalancerRelayer.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "./IBaseRelayerLibrary.sol";
 import "./BalancerRelayer.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/ERC4626Wrapping.sol standalone-utils/contracts/relayer/ERC4626Wrapping.sol
--- standalone-utils/contracts/relayer/ERC4626Wrapping.sol	2022-08-15 14:38:49.902129400 -0400
+++ standalone-utils/contracts/relayer/ERC4626Wrapping.sol	2022-09-08 18:16:33.457040900 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IERC4626.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IERC4626.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/GaugeActions.sol standalone-utils/contracts/relayer/GaugeActions.sol
--- standalone-utils/contracts/relayer/GaugeActions.sol	2022-08-15 14:38:49.917131300 -0400
+++ standalone-utils/contracts/relayer/GaugeActions.sol	2022-09-08 18:16:33.476042500 -0400
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
-import "@balancer-labs/v2-interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/liquidity-mining/IBalancerMinter.sol";
+import "../../interfaces/contracts/liquidity-mining/IStakingLiquidityGauge.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol
--- standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol	2022-09-07 19:19:29.724417500 -0400
+++ standalone-utils/contracts/relayer/IBaseRelayerLibrary.sol	2022-09-08 18:16:33.520042900 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-vault/contracts/AssetHelpers.sol";
+import "../../vault/contracts/AssetHelpers.sol";
 
 /**
  * @title IBaseRelayerLibrary
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/LidoWrapping.sol standalone-utils/contracts/relayer/LidoWrapping.sol
--- standalone-utils/contracts/relayer/LidoWrapping.sol	2022-08-15 14:38:49.949601000 -0400
+++ standalone-utils/contracts/relayer/LidoWrapping.sol	2022-09-08 18:16:33.573046100 -0400
@@ -15,11 +15,11 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IwstETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/standalone-utils/IstETH.sol";
+import "../../interfaces/contracts/standalone-utils/IwstETH.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/UnbuttonWrapping.sol standalone-utils/contracts/relayer/UnbuttonWrapping.sol
--- standalone-utils/contracts/relayer/UnbuttonWrapping.sol	2022-08-15 14:38:49.964615300 -0400
+++ standalone-utils/contracts/relayer/UnbuttonWrapping.sol	2022-09-08 18:16:33.586045800 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-linear/IUnbuttonToken.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/pool-linear/IUnbuttonToken.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/VaultActions.sol standalone-utils/contracts/relayer/VaultActions.sol
--- standalone-utils/contracts/relayer/VaultActions.sol	2022-08-15 14:38:49.978727800 -0400
+++ standalone-utils/contracts/relayer/VaultActions.sol	2022-09-08 18:16:33.594045500 -0400
@@ -15,12 +15,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/VaultHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/VaultHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/VaultPermit.sol standalone-utils/contracts/relayer/VaultPermit.sol
--- standalone-utils/contracts/relayer/VaultPermit.sol	2022-08-15 14:38:49.996079700 -0400
+++ standalone-utils/contracts/relayer/VaultPermit.sol	2022-09-08 18:16:33.620042200 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20PermitDAI.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20PermitDAI.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
 import "./IBaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol
--- standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol	2022-08-15 14:38:50.013693300 -0400
+++ standalone-utils/contracts/relayer/special/DoubleEntrypointFixRelayer.sol	2022-09-08 18:16:33.628044900 -0400
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/pool-stable/StablePoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol";
+import "../../interfaces/contracts/pool-stable/StablePoolUserData.sol";
+import "../../interfaces/contracts/pool-weighted/WeightedPoolUserData.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IFlashLoanRecipient.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ERC20Helpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/ERC20Helpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 import "hardhat/console.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/test/MockBaseRelayerLibrary.sol standalone-utils/contracts/test/MockBaseRelayerLibrary.sol
--- standalone-utils/contracts/test/MockBaseRelayerLibrary.sol	2022-08-15 14:38:50.028840600 -0400
+++ standalone-utils/contracts/test/MockBaseRelayerLibrary.sol	2022-09-08 18:16:33.651044000 -0400
@@ -16,7 +16,7 @@
 
 pragma solidity ^0.7.0;
 
-//import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IBaseRelayerLibrary.sol";
+//import "../../interfaces/contracts/standalone-utils/IBaseRelayerLibrary.sol";
 
 import "../relayer/BaseRelayerLibrary.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/test/MockStETH.sol standalone-utils/contracts/test/MockStETH.sol
--- standalone-utils/contracts/test/MockStETH.sol	2022-08-15 14:38:50.054248600 -0400
+++ standalone-utils/contracts/test/MockStETH.sol	2022-09-08 18:16:33.676041700 -0400
@@ -16,10 +16,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol";
+import "../../interfaces/contracts/standalone-utils/IstETH.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/test/TestToken.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/test/TestToken.sol";
 
 contract MockStETH is TestToken, IstETH {
     constructor(
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/test/MockWstETH.sol standalone-utils/contracts/test/MockWstETH.sol
--- standalone-utils/contracts/test/MockWstETH.sol	2022-08-15 14:38:50.069259800 -0400
+++ standalone-utils/contracts/test/MockWstETH.sol	2022-09-08 18:16:33.701047200 -0400
@@ -16,11 +16,11 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IstETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/standalone-utils/IwstETH.sol";
+import "../../interfaces/contracts/standalone-utils/IstETH.sol";
+import "../../interfaces/contracts/standalone-utils/IwstETH.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/openzeppelin/ERC20.sol";
 
 contract MockWstETH is ERC20, IwstETH {
     using FixedPoint for uint256;
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' standalone-utils/contracts/test/TestWETH.sol standalone-utils/contracts/test/TestWETH.sol
--- standalone-utils/contracts/test/TestWETH.sol	2022-08-15 14:38:50.085246800 -0400
+++ standalone-utils/contracts/test/TestWETH.sol	2022-09-08 18:16:33.721053300 -0400
@@ -16,7 +16,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
 
 contract TestWETH is IWETH {
     string public name = "Wrapped Ether";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/AssetHelpers.sol vault/contracts/AssetHelpers.sol
--- vault/contracts/AssetHelpers.sol	2022-08-15 14:38:50.384081700 -0400
+++ vault/contracts/AssetHelpers.sol	2022-09-08 18:16:33.742042300 -0400
@@ -14,9 +14,9 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IAsset.sol";
 
 abstract contract AssetHelpers {
     // solhint-disable-next-line var-name-mixedcase
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/AssetManagers.sol vault/contracts/AssetManagers.sol
--- vault/contracts/AssetManagers.sol	2022-08-15 14:38:50.399230200 -0400
+++ vault/contracts/AssetManagers.sol	2022-09-08 18:16:33.766044200 -0400
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./UserBalance.sol";
 import "./balances/BalanceAllocation.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/AssetTransfersHandler.sol vault/contracts/AssetTransfersHandler.sol
--- vault/contracts/AssetTransfersHandler.sol	2022-08-15 14:38:50.416234400 -0400
+++ vault/contracts/AssetTransfersHandler.sol	2022-09-08 18:16:33.788043500 -0400
@@ -15,15 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IAsset.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./AssetHelpers.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/Fees.sol vault/contracts/Fees.sol
--- vault/contracts/Fees.sol	2022-08-15 14:38:50.439231100 -0400
+++ vault/contracts/Fees.sol	2022-09-08 18:16:33.810048400 -0400
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/math/FixedPoint.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 import "./ProtocolFeesCollector.sol";
 import "./VaultAuthorization.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/FlashLoans.sol vault/contracts/FlashLoans.sol
--- vault/contracts/FlashLoans.sol	2022-08-15 14:38:50.456228700 -0400
+++ vault/contracts/FlashLoans.sol	2022-09-08 18:16:33.840043600 -0400
@@ -19,12 +19,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IFlashLoanRecipient.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 import "./Fees.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/PoolBalances.sol vault/contracts/PoolBalances.sol
--- vault/contracts/PoolBalances.sol	2022-08-15 14:38:50.471230300 -0400
+++ vault/contracts/PoolBalances.sol	2022-09-08 18:16:33.857042400 -0400
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/vault/IBasePool.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./Fees.sol";
 import "./PoolTokens.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/PoolRegistry.sol vault/contracts/PoolRegistry.sol
--- vault/contracts/PoolRegistry.sol	2022-08-15 14:38:50.487229300 -0400
+++ vault/contracts/PoolRegistry.sol	2022-09-08 18:16:33.882056100 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./VaultAuthorization.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/PoolTokens.sol vault/contracts/PoolTokens.sol
--- vault/contracts/PoolTokens.sol	2022-08-15 14:38:50.509318900 -0400
+++ vault/contracts/PoolTokens.sol	2022-09-08 18:16:33.903042500 -0400
@@ -15,9 +15,9 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./AssetManagers.sol";
 import "./PoolRegistry.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/ProtocolFeesCollector.sol vault/contracts/ProtocolFeesCollector.sol
--- vault/contracts/ProtocolFeesCollector.sol	2022-08-15 14:38:50.554038500 -0400
+++ vault/contracts/ProtocolFeesCollector.sol	2022-09-08 18:16:33.924042400 -0400
@@ -15,12 +15,12 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol";
+import "../../interfaces/contracts/vault/IProtocolFeesCollector.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
 
 /**
  * @dev This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/Swaps.sol vault/contracts/Swaps.sol
--- vault/contracts/Swaps.sol	2022-08-15 14:38:50.567181400 -0400
+++ vault/contracts/Swaps.sol	2022-09-08 18:16:33.949043200 -0400
@@ -15,20 +15,20 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IGeneralPool.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
+import "../../interfaces/contracts/vault/IPoolSwapStructs.sol";
+import "../../interfaces/contracts/vault/IGeneralPool.sol";
+import "../../interfaces/contracts/vault/IMinimalSwapInfoPool.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./PoolBalances.sol";
 import "./balances/BalanceAllocation.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/UserBalance.sol vault/contracts/UserBalance.sol
--- vault/contracts/UserBalance.sol	2022-08-15 14:38:50.582470200 -0400
+++ vault/contracts/UserBalance.sol	2022-09-08 18:16:33.972041900 -0400
@@ -15,13 +15,13 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeERC20.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeCast.sol";
+import "../../solidity-utils/contracts/openzeppelin/SafeERC20.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
 
 import "./AssetTransfersHandler.sol";
 import "./VaultAuthorization.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/Vault.sol vault/contracts/Vault.sol
--- vault/contracts/Vault.sol	2022-08-15 14:38:50.596601400 -0400
+++ vault/contracts/Vault.sol	2022-09-08 18:16:33.991046500 -0400
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/solidity-utils/misc/IWETH.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
 
 import "./VaultAuthorization.sol";
 import "./FlashLoans.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/VaultAuthorization.sol vault/contracts/VaultAuthorization.sol
--- vault/contracts/VaultAuthorization.sol	2022-08-15 14:38:50.612000800 -0400
+++ vault/contracts/VaultAuthorization.sol	2022-09-08 18:16:34.020042400 -0400
@@ -15,14 +15,14 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/Authentication.sol";
+import "../../solidity-utils/contracts/helpers/ExtraCalldataEOASignaturesValidator.sol";
+import "../../solidity-utils/contracts/helpers/TemporarilyPausable.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 /**
  * @dev Manages access control of Vault permissioned functions by relying on the Authorizer and signature validation.
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/authorizer/TimelockAuthorizer.sol vault/contracts/authorizer/TimelockAuthorizer.sol
--- vault/contracts/authorizer/TimelockAuthorizer.sol	2022-08-15 14:38:50.629152600 -0400
+++ vault/contracts/authorizer/TimelockAuthorizer.sol	2022-09-08 18:16:34.052050300 -0400
@@ -15,15 +15,15 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IVault.sol";
-import "@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../interfaces/contracts/solidity-utils/helpers/IAuthentication.sol";
+import "../../interfaces/contracts/vault/IVault.sol";
+import "../../interfaces/contracts/vault/IAuthorizer.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/helpers/InputHelpers.sol";
+import "../../solidity-utils/contracts/math/Math.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 import "./TimelockExecutor.sol";
 
 /**
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/authorizer/TimelockExecutor.sol vault/contracts/authorizer/TimelockExecutor.sol
--- vault/contracts/authorizer/TimelockExecutor.sol	2022-08-15 14:38:50.651060400 -0400
+++ vault/contracts/authorizer/TimelockExecutor.sol	2022-09-08 18:16:34.080045000 -0400
@@ -14,8 +14,8 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Address.sol";
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
+import "../../solidity-utils/contracts/openzeppelin/Address.sol";
+import "../../solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol";
 
 import "./TimelockAuthorizer.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/balances/BalanceAllocation.sol vault/contracts/balances/BalanceAllocation.sol
--- vault/contracts/balances/BalanceAllocation.sol	2022-08-15 14:38:50.669061800 -0400
+++ vault/contracts/balances/BalanceAllocation.sol	2022-09-08 18:16:34.102043800 -0400
@@ -14,7 +14,7 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-solidity-utils/contracts/math/Math.sol";
+import "../../../solidity-utils/contracts/math/Math.sol";
 
 // This library is used to create a data structure that represents a token's balance for a Pool. 'cash' is how many
 // tokens the Pool has sitting inside of the Vault. 'managed' is how many tokens were withdrawn from the Vault by the
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/balances/GeneralPoolsBalance.sol vault/contracts/balances/GeneralPoolsBalance.sol
--- vault/contracts/balances/GeneralPoolsBalance.sol	2022-08-15 14:38:50.687059600 -0400
+++ vault/contracts/balances/GeneralPoolsBalance.sol	2022-09-08 18:16:34.133041300 -0400
@@ -14,10 +14,10 @@
 
 pragma solidity ^0.7.0;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
+import "../../../solidity-utils/contracts/openzeppelin/EnumerableMap.sol";
 
 import "./BalanceAllocation.sol";
 
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol
--- vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol	2022-08-15 14:38:50.704059600 -0400
+++ vault/contracts/balances/MinimalSwapInfoPoolsBalance.sol	2022-09-08 18:16:34.157042100 -0400
@@ -15,10 +15,10 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
-import "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
+import "../../../solidity-utils/contracts/openzeppelin/EnumerableSet.sol";
 
 import "./BalanceAllocation.sol";
 import "../PoolRegistry.sol";
diff -ruN '--exclude=node_modules' '--exclude=deployments' '--exclude=governance-scripts' vault/contracts/balances/TwoTokenPoolsBalance.sol vault/contracts/balances/TwoTokenPoolsBalance.sol
--- vault/contracts/balances/TwoTokenPoolsBalance.sol	2022-08-15 14:38:50.720206100 -0400
+++ vault/contracts/balances/TwoTokenPoolsBalance.sol	2022-09-08 18:16:34.186268700 -0400
@@ -15,8 +15,8 @@
 pragma solidity ^0.7.0;
 pragma experimental ABIEncoderV2;
 
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
-import "@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
+import "../../../interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol";
+import "../../../interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol";
 
 import "./BalanceAllocation.sol";
 import "../PoolRegistry.sol";
